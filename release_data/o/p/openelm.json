{
    "0.1.7": {
        "info": {
            "author": "CarperAI",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Operating System :: Unix",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Scientific/Engineering :: Artificial Intelligence",
                "Typing :: Typed"
            ],
            "description": "[![DOI](https://zenodo.org/badge/532259603.svg)](https://zenodo.org/badge/latestdoi/532259603)\n# OpenELM\n\nThis repository is a replication of [Evolution Through Large Models](https://arxiv.org/abs/2206.08896), a recent paper from OpenAI exploring the links between large language models (LLMs) and evolutionary computing, particularly focused on code generation.\n\nLLMs trained on datasets of code, such as OpenAI\u2019s Codex, have shown good results in automated code generation. However, in cases where we are interested in a class of programs which are rarely found in the training distribution,\nevolutionary algorithms provide a way to generate code by making mutations to known, or \"seed\" programs. The ELM approach shows that an LLM trained on code can suggest intelligent mutations for genetic programming (GP) algorithms. Genetic algorithms explore the search space with random perturbations, but typically need to be highly customised with domain knowledge to allow them to make desirable changes \u2014 LLMs provide a way of encoding this domain knowledge and guiding the genetic algorithm towards intelligent exploration of the search space.\n\nThis project aims to replicate the ELM paper in the original [Sodarace](https://doi.org/10.1162/ARTL_a_00185) environment, before applying the technique to more complex code generation problems.\n\nFor more details, see our full research proposal at https://carperai.notion.site/ELM-e8f37b2649944259b1abf9ccaa4edae2. The release blog post: https://carper.ai/openelm-release.\n\n# Architecture\nRoughly, ELM consists of a pipeline of different components:\n```html\n+-------------+                     +-------------+         \n|  MapElites  | <-----------------> | Environment | \n+------+------+                     +------+------+         \n       |                                   ^                         \n       | collect samples                   |                         \n       v                                   v                         \n+------+---------+     finetune    +-------+--------+    mutate and execute   +----------------+\n| Conditional RL | --------------> | Language model | <---------------------> | Sandbox server |\n+----------------+                 +----------------+                         +----------------+\n```\nWe currently implemented MapElites, Environment, a part of the Language model mutation operator (prompt mutation), and the sandbox server.\n\nIn the next stage, we will complete the conditional generation with RL pipeline.\n\n# Running ELM\nCurrently, we can run the MAP-Elites algorithm on [a few environments](https://github.com/CarperAI/OpenELM/blob/main/elm/environments/environments.py), apply [prompt mutations](https://github.com/CarperAI/OpenELM/blob/main/elm/diff_model.py), and connect with [sandbox server](https://github.com/CarperAI/OpenELM/tree/main/elm/sandbox). The RL components are still on-going.\n\n## Setting up the sandbox\nIdeally, please follow the [sandboxing readme](https://github.com/CarperAI/OpenELM/tree/main/elm/sandbox) to set it up in a docker container. But for quick testing purpose, one may try the following:\n```bash\ncd elm/sandbox/server\nexport FLASK_APP=index.py\nflask run\n```\n## Running the MAP-Elites\nWe have a few toy environments implemented as well as the Sodarace environment in the ELM paper. One may try to do the following (after setting up with the sandbox server in the same machine).\n\nFirst, download the codegen-350M model.\n```bash\nwget -P checkpoints https://storage.googleapis.com/sfr-codegen-research/checkpoints/codegen-350M-mono.tar.gz && tar -xvf checkpoints/codegen-350M-mono.tar.gz -C checkpoints/\n```\nOnce it is done, run the MAP-Elites with prompt mutations using codegen-350M.\n```bash\npython3 run_elm.py run_name=test\npython3 run_elm.py --config-name=elm_image_cfg  run_name=test\n```\n\n\n# Milestones & Progress\n\nWeekly meetings are in the EleutherAI discord at 20:00 UTC on Fridays.\n\n- [x] Sodarace environment implemented\n- [x] Stage 1: Diff Models & MAP-Elites\n  - [x] Prompt Engineering on CodeGen\n  - [x] Train diff model\n  - [x] MAP-Elites implemented\n- [ ] Stage 2: Train LLM on generated data\n- [ ] Stage 3: Conditional generation with PPO\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "OpenELM",
            "package_url": "https://pypi.org/project/OpenELM/",
            "platform": null,
            "project_url": "https://pypi.org/project/OpenELM/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/OpenELM/0.1.7/",
            "requires_dist": [
                "hydra-core (>=1.2.0)",
                "wandb (>=0.13)",
                "numpy",
                "torch (>=1.10)",
                "transformers (>=4.22.0)",
                "tokenizers",
                "swig (>=4.1.0)",
                "box2d-py (==2.3.8)",
                "requests",
                "Flask",
                "black ; extra == 'dev'",
                "isort ; extra == 'dev'",
                "flake8 ; extra == 'dev'",
                "pydocstyle ; extra == 'dev'",
                "mypy ; extra == 'dev'",
                "pre-commit ; extra == 'dev'",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipython ; extra == 'notebook'",
                "pygraphviz ; extra == 'tinygp'",
                "graphviz ; extra == 'tinygp'"
            ],
            "requires_python": ">=3.9",
            "summary": "Evolution Through Large Models",
            "version": "0.1.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16211449,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a5e79c69354f93558fbd74715c406d70",
                    "sha256": "924daa660ef40c5d7eb8abeac995509ff58efa52449062393c1c90e39ccec4be"
                },
                "downloads": -1,
                "filename": "OpenELM-0.1.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a5e79c69354f93558fbd74715c406d70",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 95242,
                "upload_time": "2022-12-25T22:07:27",
                "upload_time_iso_8601": "2022-12-25T22:07:27.968627Z",
                "url": "https://files.pythonhosted.org/packages/93/fa/a8910f444f1630118d009ecc0a88fd15e1f70d08c43b9a2167e24f2287ed/OpenELM-0.1.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "530e11f2d55fa30c62cef23d5bf93747",
                    "sha256": "e43283aa22e4d067845012ca8548678d3aa40cad9e76424fe8a11533caab3bf7"
                },
                "downloads": -1,
                "filename": "OpenELM-0.1.7.tar.gz",
                "has_sig": false,
                "md5_digest": "530e11f2d55fa30c62cef23d5bf93747",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 106426,
                "upload_time": "2022-12-25T22:07:30",
                "upload_time_iso_8601": "2022-12-25T22:07:30.107563Z",
                "url": "https://files.pythonhosted.org/packages/84/90/f10b34c912986227b2df8b71207bcae978afe3a95c7c9e7d3e8b5a02f290/OpenELM-0.1.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
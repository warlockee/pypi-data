{
    "1.0": {
        "info": {
            "author": "Kage Park",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kagepark/Import",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "kmport",
            "package_url": "https://pypi.org/project/kmport/",
            "platform": null,
            "project_url": "https://pypi.org/project/kmport/",
            "project_urls": {
                "Homepage": "https://github.com/kagepark/Import"
            },
            "release_url": "https://pypi.org/project/kmport/1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Extended import function",
            "version": "1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16253729,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a7debe4967e5d7387cf876fa529b475f",
                    "sha256": "cd87e450fc759b6598b3e97052d94f8c194e8ebd765e7cbb3359e9101a81dcce"
                },
                "downloads": -1,
                "filename": "kmport-1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a7debe4967e5d7387cf876fa529b475f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 5457,
                "upload_time": "2022-03-19T17:08:47",
                "upload_time_iso_8601": "2022-03-19T17:08:47.120295Z",
                "url": "https://files.pythonhosted.org/packages/a1/59/6c38ef74f60d5dbd00e12477eef0d403a8a94f9eb09b02b82bbe521f2f8f/kmport-1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5f497c795c22f33640063b99800fd39b",
                    "sha256": "f5736eed7afaad64a3e5c5d2eedeec4199c200b8b6b6d425bd2b01231e532526"
                },
                "downloads": -1,
                "filename": "kmport-1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "5f497c795c22f33640063b99800fd39b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4806,
                "upload_time": "2022-03-19T17:08:48",
                "upload_time_iso_8601": "2022-03-19T17:08:48.917456Z",
                "url": "https://files.pythonhosted.org/packages/f0/a4/0149f291765949eb6639825b1fd51e82ba662605539744f1ff55d57162a9/kmport-1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "Kage Park",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kagepark/Import",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "kmport",
            "package_url": "https://pypi.org/project/kmport/",
            "platform": null,
            "project_url": "https://pypi.org/project/kmport/",
            "project_urls": {
                "Homepage": "https://github.com/kagepark/Import"
            },
            "release_url": "https://pypi.org/project/kmport/1.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Extended import function",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16253729,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9739c8b7b0a620432ca7538e16038900",
                    "sha256": "e32d2b92c14813ce9f97512013256ff658e7206fca3f31e648274eef6fff6087"
                },
                "downloads": -1,
                "filename": "kmport-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9739c8b7b0a620432ca7538e16038900",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 5478,
                "upload_time": "2022-03-19T17:11:19",
                "upload_time_iso_8601": "2022-03-19T17:11:19.435710Z",
                "url": "https://files.pythonhosted.org/packages/90/65/bd934653a331a44a56fc4c6addc78bfc567c7370b51b856b31c10a25a9ef/kmport-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "934325d5c0c461a5695ffed2e711c223",
                    "sha256": "2790fa02ab4537989acaa268647de9c8deed995f9275b8848c3eae1e4360dd1d"
                },
                "downloads": -1,
                "filename": "kmport-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "934325d5c0c461a5695ffed2e711c223",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4807,
                "upload_time": "2022-03-19T17:11:21",
                "upload_time_iso_8601": "2022-03-19T17:11:21.220829Z",
                "url": "https://files.pythonhosted.org/packages/63/1d/0ea94c965fca9c904a92ce7356b8aeff55500f882f09aa97c2ab065bae54/kmport-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.1": {
        "info": {
            "author": "Kage Park",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kagepark/Import",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "kmport",
            "package_url": "https://pypi.org/project/kmport/",
            "platform": null,
            "project_url": "https://pypi.org/project/kmport/",
            "project_urls": {
                "Homepage": "https://github.com/kagepark/Import"
            },
            "release_url": "https://pypi.org/project/kmport/2.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Extended import function",
            "version": "2.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16253729,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f555df3024ea36551ccfbc0eb93b52a2",
                    "sha256": "0054b6369061c7667f0c28d6032106bfb8b279e5ec52bbde05123137fe2a1a14"
                },
                "downloads": -1,
                "filename": "kmport-2.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f555df3024ea36551ccfbc0eb93b52a2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 44604,
                "upload_time": "2022-12-29T20:59:49",
                "upload_time_iso_8601": "2022-12-29T20:59:49.785481Z",
                "url": "https://files.pythonhosted.org/packages/01/93/deee7dadeb7817fd37b93f0cb1c98ad2d30fecf5052ea92bf16d82347b7a/kmport-2.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3eb7cac1eafd7a87d5657346215b594f",
                    "sha256": "ec48f5d7a09bf24c0a163237870f1028361ecf66505bc4b39079d923c092398a"
                },
                "downloads": -1,
                "filename": "kmport-2.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3eb7cac1eafd7a87d5657346215b594f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 47011,
                "upload_time": "2022-12-29T20:59:51",
                "upload_time_iso_8601": "2022-12-29T20:59:51.616748Z",
                "url": "https://files.pythonhosted.org/packages/33/c8/76b48e072d84f2a9c9f3607cf81123d926f031c5f8c5fbfdd26f688dbebc/kmport-2.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.3": {
        "info": {
            "author": "Kage Park",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kagepark/Import",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "kmport",
            "package_url": "https://pypi.org/project/kmport/",
            "platform": null,
            "project_url": "https://pypi.org/project/kmport/",
            "project_urls": {
                "Homepage": "https://github.com/kagepark/Import"
            },
            "release_url": "https://pypi.org/project/kmport/2.0.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Extended import function",
            "version": "2.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16253729,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "827a8be491e71330baf207e4509fac67",
                    "sha256": "6251cd0bce264b72d4149ca0d0acf602e3bdd1e9c7889af2b7d48a258735e6d4"
                },
                "downloads": -1,
                "filename": "kmport-2.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "827a8be491e71330baf207e4509fac67",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 45592,
                "upload_time": "2022-12-29T23:12:43",
                "upload_time_iso_8601": "2022-12-29T23:12:43.960783Z",
                "url": "https://files.pythonhosted.org/packages/c5/c5/d09c287bb3b1b8155a7e0a52122a5db22c6a7cc505a28459ac367c928165/kmport-2.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "415b6f19481c61120eab28fb3d585e66",
                    "sha256": "1f3e9e2e32e153b218ff704d73eda078d1c6057457d9977dddc8d495bac15149"
                },
                "downloads": -1,
                "filename": "kmport-2.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "415b6f19481c61120eab28fb3d585e66",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 48790,
                "upload_time": "2022-12-29T23:12:45",
                "upload_time_iso_8601": "2022-12-29T23:12:45.427611Z",
                "url": "https://files.pythonhosted.org/packages/98/00/d659e7008831fd16384fc03bd47ec5f50b87db8c53531f6bc2651efde063/kmport-2.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.4": {
        "info": {
            "author": "Kage Park",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 3"
            ],
            "description": "Open Kage's useful tools and class to public.\n(Long time used and upgraded)\nBut, this is develope version.\nSo, suddenly it will be big change when I got some more good idea.\nmake to seperate to Import from kmisc\n\n# Install\n```javascript\npip3 install kmport\n```\n\n# Functions\n\n## Global()\n    Method's global variables\n\n## StdOut(msg)\n    Standard Output Print without new line symbol\n\n## def StdErr(msg)\n    Standard Error Print without new line symbol\n\n## PyVer(main=None,miner=None,msym=None)\n    python version check\n    ```\n    ex)\n    if PyVer(3): # If Python version 3 then ...\n       ~~~\n    ```\n\n## find_executable(executable,path=None)\n    Find Excuatable command location\n    ```\n    ex)\n    if find_executable('ping'): # if ping command is in the system\n       ~~~\n\n    ping_path=find_executable('ping') # Get ping command full path\n    ```\n\n## ByteName(src)\n    Get Byte type name\n\n## Bytes(src,**opts)\n    Convert data to bytes data\n\n## Str(src,**opts)\n    Convert data to String data\n\n## Int(i,default='org',sym=None,err=False):\n    Convert data to Int data when possible. if not then return default (original data)\n    support data type: int,float,digit number,list,tuple\n    default: (default org)\n        org : fail then return or keeping the input data\n        True,False,None: fail then return default value in single data or ignore the item in list\n    sym     : split symbol when input is string\n    err     : \n        False: replace data for possible positions\n        True : if convert error in list/tuple then return default\n\n## Join(*inps,symbol='_-_',byte=None,ignore_data=(),append_front='',append_end='')\n    Similar as join function.\n    ```\n    ex)\n    Join(['a','b','c'],' ') same as ' '.join(['a','b','c'])\n\n    Join(['a','b','c'],'\\n',append_front='  ') \n    Output:\n    a\n      b\n      c\n\n    Join(['a','b','c'],'\\n',append_end='  ') \n    Output:\n    a<newline>\n    b   <newline>\n    c   <newline>\n\n    Join(['a','b','c'],'\\n',append_front='  ',ignore_data=['b']) # Ignore 'b' data\n    Output:\n    a\n      c\n    ```\n\n## FixIndex(src,idx,default=False,err=False):\n    Find Index number in the list,tuple,str,dict\n    default   : if wrong or error then return default\n    err : default False\n        False: fixing index to correcting index without error\n        True: if wrong index then return default value\n\n## Next(src,step=0,out=None,default='org')\n    Get Next data or first key of the dict \n    ```\n    ex) get send data in the list\n    Next([1,2,3,4],step=1)\n    Output:\n    2\n\n    ex) get dictionary key\n    Next({'a':1})\n    Output:\n    a\n\n    Next({'a':1,'b':2},step=2)\n    Output:\n    b\n    ```\n\n## Copy(src)\n    Copy data\n    ```\n    a={'a':1,'b':2}\n    b=Copy(a)\n    ```\n\n## TypeName(obj)\n    Get input's Type,Instance's name\n    ```\n    TypeName(1)     # int\n    TypeName('1')   # str\n    TypeName(int)   # int\n    TypeName('int') # int\n    TypeName(str)   # str\n    TypeName('str') # str\n\n    def abc(): pass\n    TypeName(abc)   # function\n\n    class cc:\n        def AA(): pass\n    TypeName(cc)    # classobj\n\n    import os\n    TypeName(os)    # module\n\n    ...\n    ```\n\n## Type(*inps,**opts): \n    Similar as isinstance(A,())\n    support : basic type and ('byte','bytes'),('obj','object'),('func','unboundmethod','function'),('classobj','class'),'generator','method','long',....\n\n## FIND(src).Find(find,src='_#_',sym='\\n',default=[],out=None,findall=True,word=False,mode='value',prs=None,line_num=False,peel=None,idx=None)\n    Searching regular expression form data and return the data\n\n## Found(data,find,digitstring=False,word=False,white_space=True,sense=True,location=False):\n    if found <find> in <data> then return True, not then False\n    If find \"[All]\" then you can type \"\\[All\\]\" at the <find> location\n    if not then \"[]\" will be work with re expression\n    <find> rule:\n       re.compile regular expression\n       any keep characters  : *\n       any single character : ?\n       ^                    : start\n       $                    : end\n    <option>\n       sense                : True:(default) sensetive, False: lower and upper is same\n       white_space          : True:(default) keep white_space, False: ignore white_space\n       word                 : True: <find> is correct word, False:(default) <find> in insde string\n       digitstring          : True: string and intiger is same, False:(default) different\n       location             : True: return found location ex:(3,10), False:(default) return True/False\n\n## IsSame(src,dest,sense=False,order=False,Type=False,digitstring=True,white_space=False,**opts):\n    return True/False\n    Check same data or not between src and dest datas\n    <dest> rule:\n       re.compile format\n       any keep characters  : *\n       any single character : ?\n       ^                    : start\n       $                    : end\n    <option>\n       order                : True: if list,tuple then check ordering too, False:(default) just check data is same or not\n       Type                 : True: check Type only, False:(default) check data\n       sense                : True: sensetive, False:(default) lower and upper is same\n       white_space          : True: keep white space, False:(default) ignore white_space\n       digitstring          : True:(default) string and intiger is same, False: different\n\n## IsIn(find,dest,idx=False,default=False,sense=False,startswith=True,endswith=True,Type=False,digitstring=True,word=True,white_space=False,order=False)\n    Check key or value in the dict, list or tuple then True, not then False\n    <find> can use IsSame's <dest> rule\n    ```\n    IsIn('abc',['AC','abc','uuu']): True ('abc' in the list['AC','abc','uuu'])\n    IsIn('a*c',['AC','abc','uuu']): True ('a*c' in the list['AC','abc','uuu'])\n    ```\n\n## WhiteStrip(src,mode=True):\n    remove multi space to single space, remove first and end space\n    others return original\n\n## IsNone(src,**opts):\n    Check the SRC is similar None type data('',None) or not\n    -check_type=<type> : include above and if different type then the return True\n    -list_none :\n      - False: check index item in the source (default)\n      - True : check all list of source\n    -index   : if source is list then just want check index item\n    -space   :\n      - True : aprove space to data in source\n      - False: ignore space data in source\n   ```\n   IsNone('')   : True\n   IsNone(None) : True\n   IsNone([])   : True\n   IsNone({})   : True\n   IsNone(0)    : False\n   IsNone(False): False\n   ```\n\n## IsVar(src,obj=None,default=False,mode='all',parent=0)\n    Check the input(src) is Variable name or not (in OBJ or in my function)\n    ```\n    g=9\n    def abc(c=5):\n       b=3\n       IsVar('b') : True\n       IsVar('c') : True\n       IsVar('g') : True\n       IsVar('m') : False\n\n    class AA:\n        def __init__(self):\n            self.abc=1111\n    IsVar('abc',AA()) : True ('abc' is a variable in the AA class)\n    ```\n\n## IsFunction(src,find='_#_')\n    Check the find is a Function in the src object(module,class)\n    ```\n    def abc(): pass\n    IsFunction('abc')             : False ('abc' is not a function)\n    IsFunction(abc)               : True (abc is a function)\n    IsFunction(MyModule(),'abc')  : True ('abc' is a function in my module)\n    IsFunction(MyModule(),abc)    : True (abc is a function in my module)\n    IsFunction(MyModule(),'abcd') : False (not found 'abcd' in my module)\n    ```\n\n## IsBytes(src)\n    Check data is Bytes or not\n\n## IsInt(src,mode='all'):\n    Check data is Int or not\n    - mode : int => check only int\n             str => int type string only\n             all => Int and int type string\n\n## Dict(*inp,**opt):\n    Dictionary\n    - Define\n    - marge\n    - Update\n    - Append\n    support : Dict, list or tuple with 2 data, dict_items, Django request.data, request data, like path type list([('/a/b',2),('/a/c',3),...]), kDict\n\n## CompVersion(*inp,**opts):\n    input: source, compare_symbol(>x,<x,==,!xx), destination\n      return BOOL\n    input: source, destination, compare_symbol='>x,<x,==,!xx'\n      return BOOL\n    input: source, destination\n      - without compare_symbol\n      - out=sym      : return symbol (>, ==, <)  (default)\n      - out=int      : return 1(>), 0(==), -1(<)\n      - out=str      : return bigger(>), same(==), lower(<)\n    input: source\n      - out=str      : return '3.0.1' (default)\n      - out=tuple    : return to tuple type (3,0,1)\n      - out=list     : return to list type [3,0,1]\n    version_symbol or symbol : default '.'\n\n    sort list\n    <list>.sort(key=CompVersion)  or sorted(<list>,key=CompVersion)\n\n## ModVersion(mod)\n    Find Module Version\n\n## Install(module,install_account='',mode=None,upgrade=False,version=None,force=False,pkg_map=None,err=False):\n    Install python module file\n    module name\n    install_accout='' : default None,  --user : install on account's directory\n    upgrade :\n      False : default\n      True  : Install or Upgrade the module\n    version :\n      None  : default\n      <version>: Check the version\n                 == <version> : if not Same version then install at the same version\n                 >= <version> : if not bigger the version then install or upgrade\n                 <= <version> : if not lower the version then install at the version\n    force  : default False\n      True : if installed then force re-install, not then install\n    pkg_map: mapping package name and real package name\n      format => { <pkg name>: <real install pkg name> }\n    err    : default False\n      True : if installing got any isseu then crashing\n      False: if installing got any issue then return False\n\n## Import(*inps,**opts):\n    basic function of import\n    if not found the module then automaticall install\n    version check and upgrade, reinstall according to the version\n    support requirement files\n\n    inps has \"require <require file>\" then install the all require files in <require file>\n    Import('<module name>  >= <version>') : Check version and lower then automaticall upgrade \n    Import('<module name>  == <version>') : Check version and different then automaticall reinstall with the version\n    Import('<module name>',path='AAA,BBB,CCCC') : import <module name> from default and extra AAA and BBB and CCC.\n    -path=       : searching and the module in the extra path (seperate with ',' or ':' )\n    -force=True  : unload and load again when already loaded (default: False)\n    -reload=True : run reload when already loaded (default: False)\n    -unload=True : unload module (default : False)\n    -err=True    : show install or loading error (default: False)\n    -dbg=True    : show comment (default : False)\n    -install_account=: '--user','user','myaccount','account',myself then install at my local account\n                 default: Install by System default setting\n\n## MethodInClass(class_name)\n    Get Method list in Class\n\n## ObjInfo(obj)\n    Get object information\n    type, name, method list, path, module_name, module_version, module\n    ```\n    import requests\n    ObjInfo(requests)\n    Output:\n    {'type': 'module', 'name': 'requests', 'methods': ['ConnectTimeout', 'ConnectionError', 'DependencyWarning', 'FileModeWarning', 'HTTPError', 'JSONDecodeError', 'NullHandler', 'PreparedRequest', 'ReadTimeout', 'Request', 'RequestException', 'RequestsDependencyWarning', 'Response', 'Session', 'Timeout', 'TooManyRedirects', 'URLRequired', '__author__', '__author_email__', '__build__', '__builtins__', '__cached__', '__cake__', '__copyright__', '__description__', '__doc__', '__file__', '__license__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__title__', '__url__', '__version__', '_check_cryptography', '_internal_utils', 'adapters', 'api', 'auth', 'certs', 'chardet_version', 'charset_normalizer_version', 'check_compatibility', 'codes', 'compat', 'cookies', 'delete', 'exceptions', 'get', 'head', 'hooks', 'logging', 'models', 'options', 'packages', 'patch', 'post', 'put', 'request', 'session', 'sessions', 'ssl', 'status_codes', 'structures', 'urllib3', 'utils', 'warnings'], 'path': ['/usr/lib/python3.10/site-packages/requests'], 'version': '2.27.1', 'module_name': 'requests', 'module': <module 'requests' from '/usr/lib/python3.10/site-packages/requests/__init__.py'>}\n    ```\n## MyModule(default=False,parent=-1): \n    Get current module \n    - parent\n      -1 : my current python page's module\n      0  : my function's module\n      1  : my parent's module\n\n## CallerName(default=False,detail=False):\n    Get the caller name of my group function\n    detail=True: return (func name, line number, filename)\n    default    : If not found caller name then return default\n\n    def A():               #Group A()\n        CallerName()       -> Called by module's A() => A\n        B()\n    def B():               #Group B()\n        CallerName()       -> Called my group by A() function => A\n        def C():\n            CallerName()   -> Called my group by A() function => A\n        C()\n    A()                    -> Calling def A() in python script(module)\n\n## Frame2Function(obj,default=False):\n    Get Function Object from frame or frame info\n\n## FunctionName(parent=0,default=False,history=0,tree=False,args=False,line_number=False,filename=False,obj=False,show=False):\n    Get function name\n     - parent\n       0            : my name (default)\n       1            : my parent function\n       ...          : going top parent function\n     - history      : Getting history (return list)\n     - tree         : tree  (return list)\n       - show       : show tree on screen\n     - args         : show arguments\n     - line_number  : show line number\n     - filename     : show filename\n     - obj          : Get OBJ (return list)\n\n## FunctionList(obj=None)\n    Get function list in this object\n\n## GetClass(obj,default=None)\n    Get Class object from instance,method,function\n\n## FunctionArgs(func,**opts):\n    Get function's input Arguments\n    - mode\n      - defaults : get default (V=?,...)\n      - args     : get args  (V,V2,...)\n      - varargs  : get varargs (*V)\n      - keywords : get keywords (**V)\n      - string   : return arguments to string format\n      - list,tuple: return arguments to list format\n      default output : dictioniary format\n    - default : if nothing then return default value (default None)\n\n## Args(src,field='all',default={}):\n    Get Class, instance's global arguments\n    Get Function input parameters\n\n## Variable(src=None,obj=None,parent=0,history=False,default=False,mode='local',VarType=None,alltype=True):\n    Get available variable data\n     - src: \n       if None: return whole environment (dict)\n       if string then find the string variable in the environment\n       if variable then return that\n     - parent \n       0 : my function (default)\n       1 : my parents function\n       ...\n     - history: from me to my top of the functions\n     - mode  : variable area\n       local : function's local(inside) variable\n       global: function's global variable\n\n## Uniq(src,default='org'):\n    make to uniq data\n\n## Split(src,sym,default=None,sym_spliter='|'):\n    multipul split then 'a|b|...'\n    without \"|\" then same as string split function\n\n## FormData(src,default=None,want_type=None):\n    convert string data to format\n    '1' => 1\n    json string to json format\n    \"{'a':1}\" => {'a':1}\n    \"[1,2,3]\" => [1,2,3]\n    ....\n\n## IndexForm(idx,idx_only=False,symbol=None):\n    return : <True/False>, Index Data\n     - False: not found Index form from input idx \n     - True : found Index\n    Index Data\n     - tuple(A,B) : Range Index (A~B)\n     - list [A,B] : OR Index or keys A or B\n     - Single     : int: Index, others: key\n    - idx_only    : only return integer index\n    - symbol   : default None, if idx is string and want split with symbol\n\n## Get(*inps,**opts):\n    Get (Any) something\n    Get('whoami')  : return my function name\n    Get('funclist'): return my module's function list\n     - parent=1    : my parent's function list\n    Get(<list|string|dict|int|...>,<index|key|keypath>): Get data at the <index|key|keypath>\n     - keypath : '/a/b/c' => {'a':{'b':{'c':1,'d'}}} => return c's 1\n    Get('_this_',<key>): my functions's <key>\n    Get('<var name>')  : return variable data\n    Get('_this_','args')  : return my functions Arguments\n    Get(<function>,'args')  : return the functions Arguments\n    <option>\n    default : None, any issue\n\n## ExceptMessage(msg='',default=None):\n    Try:\n       AAA\n    Except:\n       err=ExceptMessage() => If excepting then taken error or traceback code and return it\n\n## IpV4(ip,out='str',default=False,port=None,bmc=False,used=False,pool=None):\n    check/convert IP\n    ip : int, str, ...\n    out:\n      str : default : convert to xxx.xxx.xxx.xxx format\n      int : convert to int format\n      hex : convert to hex format\n    port: if you want check the IP with port then type\n    bmc : default False, True: check BMC port (623,664,443)\n    return : IP, if fail then return default value\n    used:\n      * required port option, but check with single port\n      False: default (not check)\n      True: Check IP already used the port(return True) or still available(return False)\n    pool: if give IP Pool(tuple) then check the IP is in the POOL or not.\n## ping(host,**opts)\n    same as ping command\n    log_format='ping' : print ping output on screen\n    ping('<IP>',log_format='ping') : print ping output\n    ping('<IP>',count=5) : 5 times pinging then return True not then return False\n    ping('<IP>',timeout=50) : pinging then return True and passing 50 seconds then return False\n    ping('<IP>',keep_good=50,timeout=3600) : if keep pinging 50 seconds then return True in the 1hour.\n\n## WEB\n    import requests\n    Web=WEB(requests)\n    Web.GetIP() : get my web server IP\n    Web.GetIP(mode='client') : get client IP \n    Web.Method() : return method name(get,post,...)\n    Web.Method(mode='upper') : return method name (GET,POST,...)\n    Web.Method('GET') : if requests' method is GET then return True, not then False\n    Web.Request('<host_url>') : return requests' output\n    WEB().str2url(<string>): if some special character then convert to URL\n    WEB().form2dict(<request.form>) : return form data to dictionary.\n\n## TIME()\n    TIME().Int()     : Now second time \n    TIME().Rset()    : Reset initial Time\n    TIME().Format('<time format>')            : return format time current time\n    TIME().Format('<time format>',time=<int>) : return format time from time\n    TIME().Format('<time format>',read_format='<time format>',time='<format time>'): Read time using read_format and return want time format (covert time format)\n    TIME().Time()    : Same as time.time()\n    TIME().Datetime(): Sameas datetime.datetime()\n    Timeout example)\n    ```\n    timeout=30\n    Time=TIME()\n    while True:\n        if Time.Out(timeout): break\n        ~~~ \n        Time.Sleep(1)\n    ```\n## rshell(cmd,timeout=None,ansi=True,path=None,progress=False,progress_pre_new_line=False,progress_post_new_line=False,log=None,progress_interval=5,cd=False,default_timeout=3600):\n    Run a shell command\n\n## sprintf(string,*inps,**opts):\n    \"\"\"ipmitool -H %(ipmi_ip)s -U %(ipmi_user)s -P '%(ipmi_pass)s' \"\"\"%(**opts)\n    \"\"\"{app} -H {ipmi_ip} -U {ipmi_user} -P '{ipmi_pass}' \"\"\".format(**opts)\n    \"\"\"{} -H {} -U {} -P '{}' \"\"\".format(*inps)\n    \"\"\"{0} -H {1} -U {2} -P '{3}' \"\"\".format(*inps)\n\n## Sort(src,reverse=False,func=None,order=None,field=None,base='key',sym=None):\n    Sorting data\n    reverse=True: reverse sort\n    field=<num> : Sorting by tuple's index number(field) data in list\n    order\n        int   : sorting by integer style\n        str   : sorting by string style\n        len   : sorting by string's length\n    base='key': (default), sort by key, 'value': sort by data  for dictionary case\n    sym=<split symbol>: if src is string with symbol then automatically split with that symbol and sorting.\n\n## MacV4(src,**opts):\n    Check Mac address format and convert\n    Hex to Int\n    Hex to Mac string\n    Mac string to Int\n    symbol : default ':' mac address spliter symbol\n    out :\n      str : default : XX:XX:XX:XX:XX format\n      int : integer format\n    default : False\n    case : \n      upper : upper case output\n      lower : lower case output\n\n## Path(*inp,**opts):\n    Get Path of input\n    inputs)\n       ~       : home path\n       ~<user> : user's home path\n       None    : current path\n       __file__: current python script file path\n       __mod__ : This python script file path\n       file    : the file's path\n       [list]  : convert to path rule \n       obj     : support function, module, class, instance\n\n    remove_dot : \n      True : (default) /a/b/./../c => /a/c\n      False: /a/b/./../c => /a/b/./../c\n    error : \n      False: default, if path issue then return error\n      True : if path issue then ignore\n    out :\n     str : default: return path string\n     list: return list format\n       - force_root : default False, True: ['','a','b'] or ['a','b'] => '/a/b'\n\n     '/a/b/c' => ['','a','b','c'] (out=list)\n     'a/b/c'  => ['a','b','c']    (out=list)\n     ['','a','b','c']  => '/a/b/c'(out=str)\n     ['a','b','c']     => 'a/b/c' (out=str)\n\n## Cut(src,head_len=None,body_len=None,new_line='\\n',out=str):\n    Cut string\n    head_len : int : first line length (default None)\n               if body_len is None then everything cut same length with head_len\n    body_len : int : line length after head_len (default None)\n    new_line : default linux new line\n    out=\n        str  : output to string with new_line (default)\n        list : output to list instead new_line\n\n## Space(num=4,fill=None,mode='space',tap=''):\n    make a charactor(space, tap) group\n    num: default 4, how many fill out <fill>\n    mode:\n      space : default: ' '\n      tap   : \\\\t\n    fill:\n      None : default: following mode information\n      <special charactor> : fill out the charactor\n    tap:\n      ''   : default\n      <spcial inital chractor>: pre-fillout with this chractor\n\n## WrapString(string,fspace=0,nspace=0,new_line='\\n',flength=0,nlength=0,ntap=0,NFLT=False,mode='space',default=''):\n\n## GetKey(src,find=None,default=None,mode='first',root=None):\n    Get key from dict,list,tuple,str\n    find : if matched value then return the key/index of the data\n    mode :\n      first : default: return first find\n      all   : return found all\n    default : return when not found\n\n## rm(*args,**opts):\n    delete local file with option like as CLI\n       [<opt>] <files>/<directory>\n       -f    : don't ask delete\n       -r    : <directory> or recurring delete\n    delete local file with option like as Function\n       <files>/<directory>,...\n       force=True    : don't ask delete, default False\n       recurring=True: <directory> or recurring delete\n    delete list/tuple\n       <list,tuple>,<del items>,...\n       option)\n         data\n           True : delete data like as <del items>\n           False: (default) delete index (<del items> are int)\n    delete dict\n       <dict>,<del items>,...\n       option)\n         data\n           True : delete data like as <del items>\n           False: (default) delete key like as <del items>\n         recurring \n           False: searching data in first level\n           True : keep searching inside dictionary \n\n## List(*inps,**opts):\n    tuple2list: \n        True : convert tuple data to list data\n        False: append tuple into list\n    <dict input>\n     items : <dict>.items()\n     data  : <dict>.value()\n     path  : convert <dict> to path like list ([('/a/b',1),('/a/c',2),...])\n     (default): <dict>.keys()\n    <option>\n     idx=<int>    : get <idx> data\n     del=<int>    : delete <idx>\n     first=<data> : move <data> to first\n     end=<data>   : move <data> to end\n     find=<data>  : get Index list\n     default      : False\n     mode \n        auto      : auto fixing index\n        err       : not found then return default(False)\n        ignore    : not found then ignore the data\n\n## Replace(src,replace_what,replace_to,default=None,newline='\\n'):\n    replace string (src, from, to)\n    if not string then return default\n    default: return defined value when not string\n      'org': return src\n      ...  : return defined default\n\n## OutFormat(data,out=None,strip=False,peel=None):\n    Output Format maker\n    <option>\n      out\n        None: Not convert\n        str,int,list,dict : convert data to want format\n        raw : Peeled data when single data(['a'],('a'),{'a':'abc'}) others then return orignal\n      peel\n        None : automatically working according to out\n        True : Peeling data\n        False: Not Peeling\n      strip \n        False: not remove white space\n        True : remove white space\n\n## FeedFunc(obj,*inps,**opts):\n    Automatically Feed matched variables to function\n    FeedFunc(<func>,<function's arguments>,<function's variables>)\n    if something wrong then return False\n    if correct then return output of ran the Function with inputs\n\n## printf(*msg,**opts):\n\n## ColorStr(msg,**opts):\n\n## CleanAnsi(data):\n\n## cli_input(msg,**opts):\n\n## TypeData(src,want_type=None,default='org',spliter=None)\n    Convert (input)data to want type (ex: str -> list, int, ...), can not convert to type then return False\n\n## MoveData(src,data=None,to=None,from_idx=None,force=False,default='org'):\n    support src type is list,str,(tuple)\n    moving format : data(data) or from_idx(int)\n      - data : if src has many same data then just keep single data at moved\n    moving dest   : to(int)\n    move data or index(from_idx) to want index(to)\n      force=True: even tuple to move\n    if not support then return default\n    default : org\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kagepark/Import",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "kmport",
            "package_url": "https://pypi.org/project/kmport/",
            "platform": null,
            "project_url": "https://pypi.org/project/kmport/",
            "project_urls": {
                "Homepage": "https://github.com/kagepark/Import"
            },
            "release_url": "https://pypi.org/project/kmport/2.0.4/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Extended import function",
            "version": "2.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16253729,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0cb3ec646ba5f840fbda5fce59970f92",
                    "sha256": "cf617a8bf05dfcd823b42e7900dcdc27368c327201e9b13805d257348f9892bb"
                },
                "downloads": -1,
                "filename": "kmport-2.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0cb3ec646ba5f840fbda5fce59970f92",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 47150,
                "upload_time": "2022-12-30T02:52:33",
                "upload_time_iso_8601": "2022-12-30T02:52:33.077066Z",
                "url": "https://files.pythonhosted.org/packages/93/2a/0c03587f121cafe17f934130d560fb7714290abecb0fc172e6822c771351/kmport-2.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2ecd238df2ebb5082f21726128354ca4",
                    "sha256": "1cf52524e06e717d9c90de1a54eadcfa9cf936e4c8fb6fa5f2d18df83004b8ea"
                },
                "downloads": -1,
                "filename": "kmport-2.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "2ecd238df2ebb5082f21726128354ca4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 55609,
                "upload_time": "2022-12-30T02:52:34",
                "upload_time_iso_8601": "2022-12-30T02:52:34.428217Z",
                "url": "https://files.pythonhosted.org/packages/d6/a8/f978c7ed12370c16306524f29a41be6bc9624d20164665e3e52bb2948dd8/kmport-2.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
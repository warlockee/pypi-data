{
    "0.0.1": {
        "info": {
            "author": "David Marx",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "keyframed",
            "package_url": "https://pypi.org/project/keyframed/",
            "platform": null,
            "project_url": "https://pypi.org/project/keyframed/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/keyframed/0.0.1/",
            "requires_dist": [
                "traces",
                "numexpr",
                "pytest ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16169471,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b4be459ced528bfafa4eda348af3934a",
                    "sha256": "f0d24a238c7d6787c9ec56347083fa221fd16d30b778ac341df0a6164a99ca5f"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b4be459ced528bfafa4eda348af3934a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 6086,
                "upload_time": "2022-11-27T23:54:58",
                "upload_time_iso_8601": "2022-11-27T23:54:58.185981Z",
                "url": "https://files.pythonhosted.org/packages/c1/ea/2282f99358b7e425fb3e820729064e5c0f980053112cfd33aa0bdca757a2/keyframed-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3486534edad62e222ec21f8d95c66d8c",
                    "sha256": "7e0288428ee3a0d9e4f4ba55b90fef082d4a87ea46a0f5a7d142c3a32ba5d0a8"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3486534edad62e222ec21f8d95c66d8c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5387,
                "upload_time": "2022-11-27T23:54:59",
                "upload_time_iso_8601": "2022-11-27T23:54:59.818031Z",
                "url": "https://files.pythonhosted.org/packages/dc/d5/aa328fce4e8651942983b446748c16468deb213bab9d41f4b01c20db0f29/keyframed-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "David Marx",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "keyframed",
            "package_url": "https://pypi.org/project/keyframed/",
            "platform": null,
            "project_url": "https://pypi.org/project/keyframed/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/keyframed/0.0.2/",
            "requires_dist": [
                "traces",
                "numexpr",
                "loguru",
                "scipy",
                "pytest ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16169471,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "59e7484849ed59867199a479690c948f",
                    "sha256": "5845741dab26933f3e2dee7f53a35843d7f1b7363dcb8945e6c8e6ba18e98131"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "59e7484849ed59867199a479690c948f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 6101,
                "upload_time": "2022-11-28T04:11:32",
                "upload_time_iso_8601": "2022-11-28T04:11:32.790646Z",
                "url": "https://files.pythonhosted.org/packages/5f/f7/1b9c629601815101172005a6ce835ded2b246c377c7abbbb7416351a90e8/keyframed-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "eadce3a67b2bac2400d1e097aa0c48f1",
                    "sha256": "d578f8f240820c4626dc6725c47825fd08c0279aacb628cc6046fb36ed5afbbe"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "eadce3a67b2bac2400d1e097aa0c48f1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5385,
                "upload_time": "2022-11-28T04:11:33",
                "upload_time_iso_8601": "2022-11-28T04:11:33.854234Z",
                "url": "https://files.pythonhosted.org/packages/85/ac/c11c079958333a8ccb5e9be933f42b1b407d51279977cc01ba736b9a9270/keyframed-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3": {
        "info": {
            "author": "David Marx",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "keyframed",
            "package_url": "https://pypi.org/project/keyframed/",
            "platform": null,
            "project_url": "https://pypi.org/project/keyframed/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/keyframed/0.0.3/",
            "requires_dist": [
                "traces",
                "numexpr",
                "loguru",
                "scipy",
                "pytest ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16169471,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c7b41c035e888058e7b1ef260580a891",
                    "sha256": "5c5d9251edee907b292a087e9a1c12e2fb2d2c082c06c3e4543a69fe2508a5d6"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c7b41c035e888058e7b1ef260580a891",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7621,
                "upload_time": "2022-12-20T01:58:13",
                "upload_time_iso_8601": "2022-12-20T01:58:13.491865Z",
                "url": "https://files.pythonhosted.org/packages/5e/6a/f4a8534e163bb02e4ed843f62f739a398e6c004fc7bc5a0c98c98c111177/keyframed-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f0646361e778e58dfc1bb31678722c71",
                    "sha256": "40c550a9696cb7247acbe51d314b86cdde49abc40e612ee5506d1ebebc9d69ab"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "f0646361e778e58dfc1bb31678722c71",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 6573,
                "upload_time": "2022-12-20T01:58:14",
                "upload_time_iso_8601": "2022-12-20T01:58:14.685892Z",
                "url": "https://files.pythonhosted.org/packages/53/9d/e53d63eda7262d7f67d6f6555db4d88ae8b715f83d0f0097a28ba8d2e009/keyframed-0.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3b0": {
        "info": {
            "author": "David Marx",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "keyframed",
            "package_url": "https://pypi.org/project/keyframed/",
            "platform": null,
            "project_url": "https://pypi.org/project/keyframed/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/keyframed/0.0.3b0/",
            "requires_dist": [
                "traces",
                "numexpr",
                "loguru",
                "scipy",
                "pytest ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "",
            "version": "0.0.3b0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16169471,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fb0a8d4eede1be58db438b6807c521e3",
                    "sha256": "e435e53aa93e4590321c9bbb577886bddc9f2e9e03e37dd647fe805630269135"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.3b0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fb0a8d4eede1be58db438b6807c521e3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 12920,
                "upload_time": "2022-12-21T04:23:54",
                "upload_time_iso_8601": "2022-12-21T04:23:54.826562Z",
                "url": "https://files.pythonhosted.org/packages/ff/ad/1996526c9539519ac172fca74716d9024cf0a6e009cbeda92e111e7d6485/keyframed-0.0.3b0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "19e237ee8e0093d76b8157eba670c3ed",
                    "sha256": "eb39d73b71e8ea5dc62ebfc7cff019533989eed515ce37549c577955fe70c391"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.3b0.tar.gz",
                "has_sig": false,
                "md5_digest": "19e237ee8e0093d76b8157eba670c3ed",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16961,
                "upload_time": "2022-12-21T04:23:56",
                "upload_time_iso_8601": "2022-12-21T04:23:56.177767Z",
                "url": "https://files.pythonhosted.org/packages/71/bd/929cce76fdce8ad9a02293b2ee9dab931e982957d7796b278f8575f3efc4/keyframed-0.0.3b0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.4": {
        "info": {
            "author": "David Marx",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Keyframed: A Time Series Data Type\n\nKeyframed is a time series data type that allows users to store and retrieve data at specified time indices. It is built on top of the `traces` library, which provides a data structure for storing time series data and a set of functions for manipulating that data.\n\n*(Fun fact: basically all of this documentation was generated by ChatGPT! I'm still editing it down some, WIP)*\n\n## Summary\n\nThe main purpose of this library is to implement the `Keyframed` class, which can be initialized with a set of data points or a single datum, and the length of the object can be set to create a bounded sequence or left unset to create an unbounded sequence. \"Keyframes\" are specific indices where a value is defined, and interpolation is used to estimate values for indices between keyframes. \n\nYou can access the data points of a Keyframed object by indexing it like a sequence. If the index you specify is not a keyframe (i.e., a data point that has been explicitly set), the value will be interpolated based on the surrounding keyframes. The default method of interpolation is \"previous\", which will simply return the value of the closest preceding keyframe. However, you can specify a different method of interpolation when setting a keyframe, or you can specify a callable function that will be used to generate the value at the given index. To access a list of indices which are considered keyframes, use the `.keyframes` method. Keyframed objects can be iterated over and support basic arithmetic operations.\n\nThe motivation of this library is to facilitate object-oriented parameterization of generative animations, specifically working towards a replacement for the keyframing DSL developed by Chigozie Nri for parameterizing AI art animations (i.e. the keyframing syntax used by tools such as Disco Diffusion and Deforum).\n\n## Installation\n\nTo install Keyframed, use pip:\n\n    pip install keyframed\n    \n## Getting Started\n    \nTo use the Keyframed class, you can create an instance of the class with a given set of data points, or you can provide a single datum which will be reused for all keyframes. You can set the length of the Keyframed object, which will cause it to behave like a bounded sequence. Alternatively, you can leave the length unset, which will allow the Keyframed object to behave like an unbounded sequence.\n\n\n```python\nfrom keyframed import Keyframed\n\n# create a new Keyframed object with a single keyframe at time 0 with value 1\nkf = Keyframed(data=1)\n\n# create a new Keyframed object with two keyframes at times 0 and 1, with values 0 and 1 respectively\nkf = Keyframed(data={0: 0, 1: 1})\n\n# create a new Keyframed object with keyframe data specified in a dictionary, and interpolation methods specified in another dictionary\nkf = Keyframed(data={0: 0, 1: 1, 2: 2}, interp={1: 'linear', 2: 'cubic'})\n```\n\n## Basic Concepts\n\n- **Keyframe**: In a Keyframed object, keyframes are specific indices where a value is defined. All other indices are filled in using interpolation.\n\n- **Keyframing**: Keyframing refers to the process of defining specific values at keyframes and using interpolation to fill in values for the indices in between.\n\n- **Boundedness**: A Keyframed object is said to be bounded if it has a defined length. An unbounded Keyframed object has no defined length and can be iterated indefinitely.\n\n- **Interpolation**: Interpolation is the process of estimating a value between two known values. In the context of a Keyframed object, interpolation is used to estimate the values for indices between keyframes.\n\n## Basic Usage\n\nIn this library, a \"keyframe\" is a specific point in your data that has a defined value. For example, if you have a series of numbers that represent the positions of a moving object at specific times, each of those position measurements is a keyframe.\n\nTo create a new Keyframed object, you can pass in a dictionary of data where the keys are time indices and the values are the data at those indices. You can also specify a length for the time series, which will set the bounds for indexing. If no length is specified, the time series will be unbounded.\n\nBy default, Keyframed objects are unbounded and can be iterated indefinitely. However, you can also create a bounded Keyframed object by setting the `n` parameter when creating the object. \n\n```python\nfrom keyframed import Keyframed\n\n# create a Keyframed object with data at time indices 0 and 10\nk = Keyframed({0: 1, 10: 2})\n\n# create a Keyframed object with data at time indices 0 and 10 and a length of 20\nk = Keyframed({0: 1, 10: 2}, n=20)\n```\n\nYou can retrieve the data at a specific time index using the indexing operator ([]). If the index is not a keyframe (a time index with data stored at it), the data at the nearest keyframe will be interpolated. The default interpolation method is \"previous,\" which returns the data at the nearest keyframe before the index.\n\n```python\nk = Keyframed({0: 1, 10: 2})\n\n# The value at this index was set explicitly above\nprint(k[0]) # 1\n\n# Uses the default 'previous' interpolation method to return the data at the nearest keyframe before the requested index\nprint(k[5]) # 1\nprint(k[15]) # 2\n```\n\nYou can also set the value at a keyframe by using the square bracket operator with assignment, just like a dict:\n\n```python\nk = Keyframed({0: 10, 5: 20, 10: 30})\nk[15] = 40\n\nprint(k[15])  # 40\n```\n\n## Keyframes and Interpolation\n\nA keyframe is a time index with data stored at it. You can retrieve the set of keyframes for a Keyframed object using the keyframes property.\n\n\nTo get a list of all indices at which a data value has been concretely set and/or at which an interpolation method has been specified, access the `.keyframes` property:\n\n```python\nk = Keyframed({0: 1, 10: 2})\n\n# returns {0, 10}\nprint(k.keyframes)\n```\n\nYou can specify an interpolation method for data at indices between keyframes by passing a dictionary of interpolation methods to the `interp` argument when creating a `Keyframed` object. The keys of the dictionary are time indices and the values are the interpolation methods to use starting at those indices. Specification of interpolation method follows \"previous\" rules.\n\n```python\nk = Keyframed({0: 1, 10: 2}, interp={5: 'linear'})\n\n# returns the data at the nearest keyframe before the index (1)\nprint(k[2])\n\n# returns the linearly interpolated data between keyframes 4 (1) and 10 (2)\nprint(k[5]) # 1.1666\n\n# returns the data at the nearest keyframe after the index (2)\nprint(k[15])\n```\n\nYou can also set or change the interpolation method at any time by setting an index to a tuple of `(value, interpolation method)`.\n\n```python\nk[3] = 1, 'linear'\n```\n\nTo set an interpolation method without specifying the series value at that index, use `None` for the value.\n\n```python\nk[3] = None, 'linear'\n```\n\nTime indices at which an interpolation method has been specified are considered keyframes, whether or not a specific data value has also been set at that time index.\n\n```python\nk = Keyframed({0: 1, 10: 2}, interp={5: 'linear'})\nk[3] = None, 'linear'\nk.keyframes # [0, 3, 5, 10]\n```\n\n## Appending\n\nYou can append one Keyframed object to another using the append method. This will concatenate the data/interpolation/keyframes of the second object to the end of the first object, and will adjust the length accordingly.\n\n```python\nk1 = Keyframed({0: 1, 10: 2}, n=30)\nk2 = Keyframed({20: 3, 30: 4}, n=40)\n\nk3 = k1.append(k2) # Keyframed({0:1, 10:2, 50:3, 60:4})\nlen(k3) == len(k1) + len(k2) == 70\n```\n\n\n\nYou can append one Keyframed object to another using the append method. This will concatenate the data points and keyframes of the second object to the end of the first object, and will adjust the length of the first object accordingly.\n\nYou can also modify the keyframes and data points of a Keyframed object by setting new values using the indexing syntax. This will create a new keyframe at the specified index, with the given value and interpolation method. If you want to specify a different interpolation method than the default, you can pass a tuple containing the value and the interpolation method as the value when setting a keyframe.\n\nFinally, you can use the copy method to create a deep copy of the Keyframed object. This can be useful if you want to make changes to a Keyframed object without affecting the original.\n\n\n## Interpolation\n\n\nBy default, the Keyframed object will use `previous` interpolation to calculate values between keyframes, i.e. it will check the value for the previous frame and use that to fill the current frame. All interpolation methods supported by the 'kind' argument of [`scipy.interpolate.interp1d`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp1d.html) are supported out-of-the box, just ask for them by name. These include linear, quadratic, and cubic interpolation, as well as a number of other options.\n\n\nTo specify an interpolation method for a keyframe, you can use the interp parameter of the Keyframed class:\n\n```python\n# create a new Keyframed object with three keyframes, using quadratic interpolation for the data at keyframe 2\nkf = Keyframed(data={0: 0, 1: 1, 3: 9}, interp={2: 'quadratic'})\n\nkf[2] # 4\n```\n\n# Advanced Usage\n\n## Using Callables\n\nYou can specify a callable function as the value for a keyframe. This function should generally take two positional arguments: the index of the keyframe being accessed and the Keyframed object itself. The function can then use the values of other keyframes to calculate the value for the keyframe being accessed. For example:\n\n```python\n# define a callable data getter that computes the next value in the Fibonacci sequence\ndef fib_get(k, K):\n    return K[k-1] + K[k-2]\n\n# create a new Keyframed object with two initial values in the Fibonacci sequence\nfib_seq = Keyframed({0: 1, 1: 1})\n\n# use the callable data getter to compute the next value in the sequence\nfib_seq[2] = fib_get\n\n# the data at keyframe 2 should now be the sum of the data at keyframes 0 and 1\nassert fib_seq[2] == 2\n\n# The default 'previous' interpolation broadcasts the fib_get function forward\nprint(k[3])  # 3 \nprint(k[4])  # 5\n```\n\n## Context-aware callables\n\nAnother advanced feature of the Keyframed library is the ability to use context-aware callable data getters. These are functions that can be used to compute the data at a keyframe, but that have access to the data at a range of keyframes around the keyframe being evaluated. This can be useful when the data at a keyframe depends on the data at other keyframes in a specific context, such as a sliding window or an exponential moving average (EMA).\n\nTo use a context-aware callable data getter, you can use the frameContext decorator to specify the range of keyframes that the function should have access to. The decorator takes optional left and right parameters, which specify the number of keyframes to the left and right of the keyframe being evaluated. For example:\n\n```python\nfrom keyframed import frameContext\n\n# define a context-aware callable data getter that computes the average of the data in a sliding window of length 3\n@frameContext(left=1, right=1)\ndef windowed_avg(context, k, K: Keyframed, xs, ys):\n    # `context` is a list of keyframes in the specified range around the keyframe being evaluated\n    return sum([K[i] for i in context]) / len(context)\n\n# create a new Keyframed object with some initial data\nkf = Keyframed(data={0: 0, 1: 1, 3: 2, 5: 2, 6: 2, 8: 1})\n\n# use the context-aware callable data getter to compute the average of the data in a sliding window around keyframes 2, 4, and 7\nkf[2] = kf[4] = kf[7] = windowed_avg\n\n# the data at keyframes 2, 4, and 7 should now be the average of the data in the sliding window around those keyframes\nassert kf[2] == 1.5\nassert kf[4] == 2\nassert kf[7] == 1.5\n```\n\n# Looper\n\n## Introduction to Looping Keyframed Objects\n\nThe Looper class allows you to create an iterable that repeats a Keyframed object a certain number of times, with optional activation and deactivation points. This is useful for creating looping patterns such as LFOs (low-frequency oscillators).\n\nIn addition to the basic functionality described above, the Keyframed object also provides a Looper wrapper to facilitate using Keyframed objects to parameterize loops, such as Low-Frequency Oscillators (LFOs). The Looper wrapper takes a Keyframed object as its input and can be set to repeat the Keyframed sequence for a certain number of repetitions or indefinitely. The Looper can also be set to become active at a certain point in the sequence.\n\nTo create a Looper, you first need to create a Keyframed object with the desired sequence of keyframes and interpolation methods. Then, you can wrap the Keyframed object in a Looper object by calling the Looper constructor with the Keyframed object as its input. The Looper object has several optional arguments, including max_repetitions, activate_at, and deactivate_at, which allow you to specify the number of repetitions, the point at which the Looper becomes active, and the point at which the Looper becomes deactivated, respectively.\n\nHere is an example of creating a Looper object with a Keyframed object that has a sawtooth waveform and becomes active at the fifth repetition:\n\n```python\nfrom keyframed import Keyframed\nfrom keyframed.wrappers import Looper\n\n# Create a Keyframed object with a sawtooth waveform\nkeyframed = Keyframed({0: 0, 4: 10}, interp={0: 'linear'}, n=5)\n\n# Wrap the Keyframed object in a Looper object\nlooper = Looper(keyframed, max_repetitions=5, activate_at=5)\n\n# The Looper object returns 0 values until time index 5, at which point it becomes active and begins reading from the keyframed sequence\n# it was initiatlized with\nprint(looper[0])  # Output: 0\nprint(looper[5])  # Output: 0\nprint(looper[10])  # Output: 10\n\n# the sequence restarts\nprint(looper[11])  # Output: 0\nprint(looper[12])  # Output: 1\n\n# and continues for 5 repatitions before deactivating\nprint(looper[30])  # Output: 10\nprint(looper[31])  # Output: 0\nprint(looper[32])  # Output: 0\n```\n\nYou can also use the Looper.resolve() method to flatten the Looper object into a Keyframed object with the full sequence of values. This can be useful if you want to access the full sequence of values without the Looper's active and deactive behavior. Here is an example of using Looper.resolve() to flatten a Looper object:\n\n```python\nfrom keyframed import Keyframed\nfrom keyframed.wrappers import Looper\n\n# Create a Keyframed object with a sawtooth waveform\nkeyframed = Keyframed({0: 0, 4: 10}, interp={0: 'linear'}, n=5)\n\n# Wrap the Keyframed object in a Looper object\nlooper = Looper(keyframed, max_repetitions=5, activate_at=5)\n\n# Flatten the Looper object into a Keyframed object\nkeyframed_flattened = looper.resolve()\n\n# The Keyframed object now contains the full sequence of values from the Looper object\nprint(keyframed_flattened[0])  # Output: 0\nprint(keyframed_flattened[24])  # Output: 10\nprint(keyframed_flattened[25])  # Output: 0\n```\n\n## Using Looper\n\nTo use Looper, you will first need to create a Keyframed object and pass it to the Looper constructor. If the Keyframed object is unbounded, Looper will automatically set its length to the length of the Keyframed object.\n\n```python\nfrom keyframed import Keyframed\nfrom keyframed.wrappers import Looper\n\nK = Keyframed({0:1, 4:10})\nL = Looper(K)\n```\n\nYou can then iterate over the Looper object like any other iterable.\n\n```python\nfor i, value in enumerate(L):\n    print(i, value)\n```\n\nThis will print out the values of the Keyframed object indefinitely.\n\nYou can also specify the maximum number of repetitions that the Looper object should make using the max_repetitions argument.\n\n```python\nL = Looper(K, max_repetitions=5)\n```\n\nIn this case, the Looper object will only repeat the Keyframed object 5 times before raising a StopIteration exception.\n\nYou can also specify activation and deactivation points for the Looper object using the activate_at and deactivate_at arguments. These arguments accept either a single index or a list of indices.\n\n```python\nL = Looper(K, max_repetitions=5, activate_at=5, deactivate_at=15)\n```\n\nIn this case, the Looper object will only start repeating the Keyframed object at index 5 and will stop repeating it at index 15.\n\nIf you want to convert the Looper object back into a Keyframed object, you can use the resolve method. This will return a new Keyframed object that has the same values as the Looper object.\n\n```python\nK_resolved = L.resolve()\n```\n\n## Looper\n\nThe Looper is a class that wraps a Keyframed object and allows it to be used as a parameter in loops, such as low-frequency oscillators (LFOs). The Looper takes a Keyframed object as its input and adds a layer of behavior that allows the Keyframed object to be used in a loop.\n\n### Initialization\n\nTo create a Looper, you can simply pass a Keyframed object to its constructor. For example:\n\n```python\nK = Keyframed({0:1, 9:10}, interp={0:'linear'}, n=10)\nL = Looper(K)\n```\n\n\n\n## Adaptor\n\nIn addition to the Keyframed and Looper classes, the Keyframed library also provides an Adaptor class that allows you to adapt a Keyframed object to\n\nIn addition to the Keyframed and Looper classes, this library provides a number of utility functions and decorators that can be used to customize and extend the behavior of your keyframed objects.\n\nFor example, the frameContext decorator allows you to specify a window of keyframes around the current frame when defining a getter function. This can be useful when you want to use the values of several surrounding keyframes to calculate the value of the current frame.\n\nThe Adaptor class provides a way to transform the output of a keyframed object in a variety of ways, such as scaling, reversing, or looping. You can also use the Adaptor class to \"freeze\" the current state of a keyframed object by wrapping it in an adaptor and setting its freeze attribute to True.\n\n## Conclusion\n\nOverall, this library provides a flexible and intuitive way to create and manipulate keyframed data, making it a useful tool for a wide variety of applications. Whether you're working on a music or video project, creating animations, or just want to experiment with keyframing in general, this library is a great choice.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "keyframed",
            "package_url": "https://pypi.org/project/keyframed/",
            "platform": null,
            "project_url": "https://pypi.org/project/keyframed/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/keyframed/0.0.4/",
            "requires_dist": [
                "traces",
                "numexpr",
                "loguru",
                "scipy",
                "pytest ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16169471,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a423dc13949ac0b96c27b683780d3140",
                    "sha256": "6f3844a60a4782f53f158b3b3041eceb234fe43796acbd3d53469c0a98cdf0fd"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a423dc13949ac0b96c27b683780d3140",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 12898,
                "upload_time": "2022-12-21T04:28:27",
                "upload_time_iso_8601": "2022-12-21T04:28:27.913409Z",
                "url": "https://files.pythonhosted.org/packages/63/ed/42bde63a69f7284535986b48dd2f1dff9139e51295852f1c30fe0b695a65/keyframed-0.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "395583c674e8b187a7117f70aadb3e82",
                    "sha256": "90c327bc441b45a2053e9d938f9988a6fda5e699ff1076f147300e5fddb9c3db"
                },
                "downloads": -1,
                "filename": "keyframed-0.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "395583c674e8b187a7117f70aadb3e82",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16972,
                "upload_time": "2022-12-21T04:28:29",
                "upload_time_iso_8601": "2022-12-21T04:28:29.236894Z",
                "url": "https://files.pythonhosted.org/packages/75/16/fdc250ca38ad1dfc09e4c2ca483aaa9c5542ab777ab91ca45fc31d64a11b/keyframed-0.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
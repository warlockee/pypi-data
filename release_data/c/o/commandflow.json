{
    "0.1.0": {
        "info": {
            "author": "dwpeng",
            "author_email": "1732889554@qq.com",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "commandflow",
            "package_url": "https://pypi.org/project/commandflow/",
            "platform": null,
            "project_url": "https://pypi.org/project/commandflow/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/commandflow/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.9,<4.0",
            "summary": "",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16257910,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "967308d8f2a99e2d73becf60ab41472c",
                    "sha256": "8ca21515ad3bafff37f5a72c7ddc84bf636c2599bc8698d7ea15b6edbb31ad0f"
                },
                "downloads": -1,
                "filename": "commandflow-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "967308d8f2a99e2d73becf60ab41472c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9,<4.0",
                "size": 8981,
                "upload_time": "2022-12-27T09:25:26",
                "upload_time_iso_8601": "2022-12-27T09:25:26.174773Z",
                "url": "https://files.pythonhosted.org/packages/01/e6/f3e71f6f3dd207d445f89658d6c1d9854afbb6b93cb609102cc2610aa473/commandflow-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "dwpeng",
            "author_email": "1732889554@qq.com",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# commandflow\n\n## \u80cc\u666f\n\u5728\u5206\u6790\u6570\u636e\u7684\u65f6\u5019\uff0c\u7ecf\u5e38\u9700\u8981\u7f16\u5199shell\u811a\u672c\uff0c\u867d\u7136\u5f88\u591a\u65f6\u5019\u5199\u8d77\u6765\u5e76\u4e0d\u9ebb\u70e6\uff0c\u4f46\u662f\u603b\u6709\u9047\u5230\u5fd8\u8bb0\u67d0\u4e2a\u53c2\u6570\u662f\u4ec0\u4e48\u610f\u601d\u7684\u65f6\u5019\u3002\u6240\u4ee5\u5c31\u6709\u4e86\u901a\u8fc7Python\u53bb\u751f\u6210\u4e00\u4e32\u547d\u4ee4\u7684\u60f3\u6cd5\u3002\n\n## \u4f7f\u7528\u6307\u5357\n\n## Python\u7248\u672c\u8981\u6c42\n\u672c\u7a0b\u5e8f\u4f7f\u7528\u4e86\u7c7b\u578b\u6ce8\u91ca\uff0c\u8bf7\u786e\u4fddpython\u7248\u672c\u5927\u4e8e`3.7+`\uff0c\u63a8\u8350\u4f7f\u7528`3.9+`\n\n### \u5f00\u53d1\n\u672c\u7a0b\u5e8f\u4f7f\u7528`poetry\u4f5c\u4e3a\u5305\u7ba1\u7406\u5668`\uff0c\u6240\u4ee5\u8bf7\u786e\u4fdd\u4f60\u7684\u7535\u8111\u4e0a\u5b89\u88c5\u6709`poetry`\n```bash\npip install poetry\n```\n### \u5b89\u88c5\n\n#### \u4f7f\u7528pip\u5b89\u88c5\n```py\npip install commandflow\n```\n\n#### \u4f7f\u7528poetry\u6253\u5305\u5b89\u88c5\n\n\u5148\u4f7f\u7528`poetry build`\u8fdb\u884c\u6253\u5305\uff0c\u7136\u540e\u4f7f\u7528`pip install ./dist/*.whl`\u8fdb\u884c\u5b89\u88c5\n\n```bash\npoetry build\npip install .\\dist\\commandflow-0.1.0-py3-none-any.whl --force-reinstall\n```\n\n\n### \u9996\u5148\u7ee7\u627f\u7ee7\u627fCommand\u7c7b\n```py\nfrom commandflow import Command\nclass Fastp(Command):\n    # \u8bbe\u7f6e\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u540d\u5b57\n    # \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84\n    exe = 'fastp'\n    ...\n```\n\n`Command`\u4f7f\u7528`set_action`\u65b9\u6cd5\u8bbe\u7f6e\u53c2\u6570\uff0c\u8fd9\u91cc\u7684\u65b9\u6cd5\u8bbe\u8ba1\u7075\u611f\u6765\u81ea\u4e8e`argparse`\u8fd9\u4e2a\u6807\u51c6\u5e93\n\n\u65b9\u6cd5\u539f\u578b\n\n```py\ndef set_action(\n    self,\n    short_arg_name: Union[str, None] = None,\n    long_arg_name: Union[str, None] = None,\n    value: Union[str, bool, List, None] = None,\n    help: Union[str, None] = None,\n    positional: bool = False,\n    sep: str = ' ',\n    stdout: Union[str, None] = None\n):\n    ...\n```\n- short_arg_name\uff1a \u77ed\u53c2\u6570\u540d\n- long_arg_name\uff1a \u957f\u53c2\u6570\u540d\n- value\uff1a\u53c2\u6570\u503c\n- help\uff1a\u5bf9\u8be5\u6761\u53c2\u6570\u7684\u89e3\u91ca\u8bf4\u660e\n- positional\uff1a\u4f7f\u7528\u662f\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\n- sep\uff1a\u5f53\u4f20\u9012\u7684value\u662f\u4e00\u4e2alist\u7684\u65f6\u5019\uff0c\u6240\u6307\u5b9a\u7684\u8fde\u63a5\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\n- stdout\uff1a\u547d\u4ee4\u662f\u5426\u9700\u8981\u6307\u5b9a\u6807\u51c6\u8f93\u51fa\n\n`value`\u53ef\u4ee5\u63a5\u6536\u4ee5\u4e0b\u51e0\u79cd\u7684\u7c7b\u578b\u7684\u53c2\u6570\u503c\n- list\n- int\n- float\n- str\n- bool\n\n\n\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65b9\u6cd5\u6765\u7ec4\u5408\u53c2\u6570\n\n```py\nfrom commandflow import Command\nclass Fastp(Command):\n    # \u8bbe\u7f6e\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u540d\u5b57\n    # \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84\n    exe = 'fastp'\n\n    # \u8bbe\u7f6e\u4e86\u4e00\u4e2a\u7ec4\u5408\u65b9\u6cd5\n    # \u5185\u90e8\u4f7f\u7528set_action\u6765\u8bbe\u7f6e\u5177\u4f53\u7684\u53c2\u6570\n    def input(\n        self,\n        in1: str,\n        out1: str,\n        in2: str = None,\n        out2: str = None,\n        phred64: bool = True,\n        compression_level: int = 4,\n    ):\n        \"\"\" \u8f93\u5165\u8f93\u51fa \"\"\"\n        self.set_action('i', 'in1', in1)\n        self.set_action('o', 'out1', out1)\n\n        if in2 is not None and out2 is not None:\n            self.set_action('I', 'in2', in2)\n            self.set_action('O', 'out2', out2)\n\n        self.set_action('6', 'phred64', phred64)\n        self.set_action('z', 'compression', compression_level)\n```\n\n\u5bf9\u4e8e\u4e00\u4e2a\u76f8\u540c\u7684\u53c2\u6570\u800c\u8a00\uff0c\u91cd\u590d\u8bbe\u7f6e\u65f6\uff0c\u4ee5\u540e\u6765\u7684\u4e3a\u51c6\n```py\nself.set_action('i', 'in1', 'before')\nself.set_action('i', 'in1', 'after')  # in1 \u53c2\u6570\u503c\u4e3aafter\uff0c\u4e4b\u524d\u7684before\u88ab\u540e\u6765\u7684\u66ff\u6362\u6389\u4e86\n```\n\n\u4f7f\u7528`.command`\u6765\u83b7\u53d6\u62fc\u63a5\u597d\u7684\u5b8c\u6574\u547d\u4ee4\n```py\nfastp = Fastp()\nfastp.input('1.fq', '1.out.fq', '2.fq', '2.out.fq')\nprint(fastp.command)\n# fastp --in1 1.fq --out1 1.out.fq --in2 2.fq --out2 2.out.fq --phred64 --compression 4\n```\n\n## \u5177\u4f53\u7684\u4f8b\u5b50\n\n\u8fd9\u91cc\u4f7f\u7528commandflow\u7f16\u5199fastp\u7a0b\u5e8f\u5bf9\u5e94\u7684\u53c2\u6570\uff08\u5199\u4e86\u4e00\u90e8\u5206\uff09\n```txt\n\nr\"\"\"\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n  # I/O options\n  -i, --in1                          read1 input file name (string)\n  -o, --out1                         read1 output file name (string [=])\n  -I, --in2                          read2 input file name (string [=])\n  -O, --out2                           read2 output file name (string [=])\n      --unpaired1                      for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n      --unpaired2                      for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n      --failed_out                     specify the file to store reads that cannot pass the filters. (string [=])\n      --overlapped_out                 for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n  -m, --merge                          for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n      --merged_out                     in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n      --include_unmerged               in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n  -6, --phred64                      indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n  -z, --compression                  compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n      --stdin                          input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n      --stdout                         output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n      --interleaved_in                 indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n      --reads_to_process             specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n      --dont_overwrite               don't overwrite existing files. Overwritting is allowed by default.\n      --fix_mgi_id                     the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n\n  # adapter trimming options\n  -A, --disable_adapter_trimming     adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n  -a, --adapter_sequence               the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n      --adapter_sequence_r2            the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n      --adapter_fasta                  specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n      --detect_adapter_for_pe          by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data.\n    \n  # global trimming options\n  -f, --trim_front1                    trimming how many bases in front for read1, default is 0 (int [=0])\n  -t, --trim_tail1                     trimming how many bases in tail for read1, default is 0 (int [=0])\n  -b, --max_len1                       if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n  -F, --trim_front2                    trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n  -T, --trim_tail2                     trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n  -B, --max_len2                       if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n\n  # duplication evaluation and deduplication\n  -D, --dedup                          enable deduplication to drop the duplicated reads/pairs\n      --dup_calc_accuracy              accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n      --dont_eval_duplication          don't evaluate duplication rate to save time and use less memory.\n\n  # polyG tail trimming, useful for NextSeq/NovaSeq data\n  -g, --trim_poly_g                  force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n      --poly_g_min_len                 the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n  -G, --disable_trim_poly_g          disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n\n  # polyX tail trimming\n  -x, --trim_poly_x                    enable polyX trimming in 3' ends.\n      --poly_x_min_len                 the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n  \n  # per read cutting by quality options\n  -5, --cut_front                      move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n  -3, --cut_tail                       move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n  -r, --cut_right                      move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n  -W, --cut_window_size                the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n  -M, --cut_mean_quality               the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n      --cut_front_window_size          the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n      --cut_front_mean_quality         the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n      --cut_tail_window_size           the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n      --cut_tail_mean_quality          the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n      --cut_right_window_size          the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n      --cut_right_mean_quality         the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n  \n  # quality filtering options\n  -Q, --disable_quality_filtering    quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n  -q, --qualified_quality_phred      the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n  -u, --unqualified_percent_limit    how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n  -n, --n_base_limit                 if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n  -e, --average_qual                 if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\n  # length filtering options\n  -L, --disable_length_filtering     length filtering is enabled by default. If this option is specified, length filtering is disabled\n  -l, --length_required              reads shorter than length_required will be discarded, default is 15. (int [=15])\n      --length_limit                 reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n\n  # low complexity filtering\n  -y, --low_complexity_filter          enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n  -Y, --complexity_threshold           the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n\n  # filter reads with unwanted indexes (to remove possible contamination)\n      --filter_by_index1               specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n      --filter_by_index2               specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n      --filter_by_index_threshold      the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n\n  # base correction by overlap analysis options\n  -c, --correction                   enable base correction in overlapped regions (only for PE data), default is disabled\n      --overlap_len_require            the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n      --overlap_diff_limit             the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n      --overlap_diff_percent_limit     the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n\n  # UMI processing\n  -U, --umi                          enable unique molecular identifier (UMI) preprocessing\n      --umi_loc                      specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n      --umi_len                      if the UMI is in read1/read2, its length should be provided (int [=0])\n      --umi_prefix                   if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n      --umi_skip                       if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n\n  # overrepresented sequence analysis\n  -p, --overrepresentation_analysis    enable overrepresented sequence analysis.\n  -P, --overrepresentation_sampling    One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n\n  # reporting options\n  -j, --json                         the json format report file name (string [=fastp.json])\n  -h, --html                         the html format report file name (string [=fastp.html])\n  -R, --report_title                 should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n  \n  # threading options\n  -w, --thread                       worker thread number, default is 3 (int [=3])\n  \n  # output splitting options\n  -s, --split                        split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n  -S, --split_by_lines               split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n  -d, --split_prefix_digits          the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n  \n  # help\n  -?, --help                         print this message\n\"\"\"\n\n```\n\n## \u4ee3\u7801\n\n```py\nfrom typing import Literal\nfrom commandflow import Command\n\nclass Fastp(Command):\n    exe = 'fastp'\n\n    def input(\n        self,\n        in1: str,\n        out1: str,\n        in2: str = None,\n        out2: str = None,\n        phred64: bool = True,\n        compression_level: int = 4,\n    ):\n        \"\"\" \u8f93\u5165\u8f93\u51fa \"\"\"\n        self.set_action('i', 'in1', in1)\n        self.set_action('o', 'out1', out1)\n\n        if in2 is not None and out2 is not None:\n            self.set_action('I', 'in2', in2)\n            self.set_action('O', 'out2', out2)\n\n        self.set_action('6', 'phred64', phred64)\n        self.set_action('z', 'compression', compression_level)\n\n\n    def adapter_trim(\n        self,\n        enable: bool = True,\n        adapter_sequence: str = 'auto'\n    ):\n        \"\"\" \u63a5\u5934\u4fee\u526a \"\"\"\n        self.set_action('A', 'disable_adapter_trimming', enable)\n        self.set_action('a', 'adapter_sequence', adapter_sequence)\n\n    def global_trim(\n        self,\n        trim_front1: int = 0,\n        trim_tail1: int = 0,\n        max_len1: int = 0,\n        trim_front2: int = 0,\n        trim_tail2: int = 0,\n        max_len2: int = 0,\n    ):\n        \"\"\" \u5207\u5272\u53c2\u6570 \"\"\"\n        self.set_action('f', 'trim_front1', trim_front1)\n        self.set_action('t', 'trim_tail1', trim_tail1)\n        self.set_action('b', 'max_len1', max_len1)\n        \n        self.set_action('F', 'trim_front2', trim_front2)\n        self.set_action('T', 'trim_tail2', trim_tail2)\n        self.set_action('B', 'max_len2', max_len2)\n    \n    def thread(self, count: int = 3):\n        \"\"\" \u7ebf\u7a0b\u6570 \"\"\"\n        assert count > 0\n        self.set_action('w', 'thread', count)\n\n    def trim_polyg(\n        self,\n        enable: bool = True,\n        polyg_min_len: int = 10,\n    ):\n        \"\"\" poly G\u5c3e\u5df4\u5904\u7406 \"\"\"\n        if enable:\n            self.set_action('g', 'trim_poly_g', True)\n            self.set_action(None, 'poly_g_min_len', polyg_min_len)\n        else:\n            self.set_action('G', 'disable_trim_poly_g', True)\n\n    def quality(\n        self,\n        enable: bool = True,\n        qualified_quality_phred: int = 15,\n        unqualified_percent_limit: int = 40,\n        n_base_limit: int = 5,\n        average_qual: int = 0\n    ):\n        \"\"\" \u8d28\u91cf\u63a7\u5236 \"\"\"\n        if not enable:\n            self.set_action('Q', 'disable_quality_filtering', True)\n            return self\n\n        self.set_action('q', 'qualified_quality_phred', qualified_quality_phred)\n        self.set_action('u', 'unqualified_percent_limit', unqualified_percent_limit),\n        self.set_action('n', 'n_base_limit', n_base_limit),\n        self.set_action('e', 'average_qual', average_qual)\n\n    def report(\n        self,\n        json: str = 'report.json',\n        html: str = 'report.html'\n    ):\n        \"\"\" \u8f93\u51fa\u7684\u62a5\u544a\u5f62\u5f0f \"\"\"\n        self.set_action(None, 'html', html)\n        self.set_action(None, 'json', json)\n\n    def umi_processing(\n        self,\n        enable: bool = True,\n        umi_loc: Literal['index1', 'index2', 'read1',\n                         'read2', 'per_index', 'per_read' 'none'] = 'none',\n        umi_len: int = 0,\n        umi_prefix: str = 'UMI',\n        umi_skip: int = 0\n    ):\n        \"\"\" \u5904\u7406umi \"\"\"\n        self.set_action('U', 'umi', enable)\n        if umi_loc != 'none':\n            self.set_action(None, 'umi_loc', umi_loc)\n        if umi_loc in ['read1', 'read2']:\n            self.set_action(None, 'umi_len', umi_len)\n            self.set_action(None, 'umi_prefix', umi_prefix)\n            self.set_action(None, 'umi_skip', umi_skip)\n\n\n\nif __name__ == '__main__':\n    fastp = Fastp()\n    fastp.input('1.fq', '1.out.fq', '2.fq', '2.out.fq')\n    print(fastp.command)\n    fastp.input('3.fa', '111', 'sss', 'hhhh')\n    fastp.report()\n    fastp.stdout()\n    fastp.thread(100)\n    print(fastp.command)\n\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/dwpeng/commandflow",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "commandflow",
            "package_url": "https://pypi.org/project/commandflow/",
            "platform": null,
            "project_url": "https://pypi.org/project/commandflow/",
            "project_urls": {
                "Homepage": "https://github.com/dwpeng/commandflow",
                "Repository": "https://github.com/dwpeng/commandflow"
            },
            "release_url": "https://pypi.org/project/commandflow/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.7,<4.0",
            "summary": "Writing shell by python.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16257910,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8b600397209888f401fed5284ecacf0c",
                    "sha256": "892700654c567717fe5e02782c46cd5bf629ccf401ad2a1f111bec66eeb8c509"
                },
                "downloads": -1,
                "filename": "commandflow-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8b600397209888f401fed5284ecacf0c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<4.0",
                "size": 14510,
                "upload_time": "2022-12-30T13:16:29",
                "upload_time_iso_8601": "2022-12-30T13:16:29.696569Z",
                "url": "https://files.pythonhosted.org/packages/bd/7a/bcd898dd1e6f365368fe9212430877f275a7f9ce50868816e8db280851bf/commandflow-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
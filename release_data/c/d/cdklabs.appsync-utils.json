{
    "0.0.0": {
        "info": {
            "author": "Mitchell Valine<mitchellvaline@yahoo.com>",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved",
                "Operating System :: OS Independent",
                "Programming Language :: JavaScript",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Typing :: Typed"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cdklabs/awscdk-appsync-utils.git",
            "keywords": "",
            "license": "Apache-2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cdklabs.appsync-utils",
            "package_url": "https://pypi.org/project/cdklabs.appsync-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/cdklabs.appsync-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cdklabs/awscdk-appsync-utils.git",
                "Source": "https://github.com/cdklabs/awscdk-appsync-utils.git"
            },
            "release_url": "https://pypi.org/project/cdklabs.appsync-utils/0.0.0/",
            "requires_dist": [
                "aws-cdk-lib (<3.0.0,>=2.55.1)",
                "aws-cdk.aws-appsync-alpha (==2.55.1.a0)",
                "constructs (<11.0.0,>=10.0.5)",
                "jsii (<2.0.0,>=1.71.0)",
                "publication (>=0.0.3)",
                "typeguard (~=2.13.3)"
            ],
            "requires_python": "~=3.7",
            "summary": "Utilities for creating appsync apis using aws-cdk",
            "version": "0.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16189687,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "99d0ca8d55356753e240ac3e63bd9006",
                    "sha256": "6c185a59756acd81838cdecb3a1d6494fd6d61fe54ea3d1b1a7ae62aff24445a"
                },
                "downloads": -1,
                "filename": "cdklabs.appsync_utils-0.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "99d0ca8d55356753e240ac3e63bd9006",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": "~=3.7",
                "size": 105342,
                "upload_time": "2022-12-19T20:09:23",
                "upload_time_iso_8601": "2022-12-19T20:09:23.035864Z",
                "url": "https://files.pythonhosted.org/packages/ce/f5/60d2f690e358f806751db7a864a3e4f4b9cdab8780627d9088d8b341ccd1/cdklabs.appsync_utils-0.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9c829a923c98e0de60e356b9078175be",
                    "sha256": "d96fba75502c1d891d73d2bd1e42195f79287d6df491d0d88c80a38dfbd2f97b"
                },
                "downloads": -1,
                "filename": "cdklabs.appsync-utils-0.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "9c829a923c98e0de60e356b9078175be",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": "~=3.7",
                "size": 107919,
                "upload_time": "2022-12-19T20:09:24",
                "upload_time_iso_8601": "2022-12-19T20:09:24.540965Z",
                "url": "https://files.pythonhosted.org/packages/fa/0d/a59c706a8b973c9eb863f2df926a28ac359e966b056fafc00366b1f09f22/cdklabs.appsync-utils-0.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.1": {
        "info": {
            "author": "Mitchell Valine<mitchellvaline@yahoo.com>",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved",
                "Operating System :: OS Independent",
                "Programming Language :: JavaScript",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Typing :: Typed"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cdklabs/awscdk-appsync-utils.git",
            "keywords": "",
            "license": "Apache-2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cdklabs.appsync-utils",
            "package_url": "https://pypi.org/project/cdklabs.appsync-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/cdklabs.appsync-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cdklabs/awscdk-appsync-utils.git",
                "Source": "https://github.com/cdklabs/awscdk-appsync-utils.git"
            },
            "release_url": "https://pypi.org/project/cdklabs.appsync-utils/0.0.1/",
            "requires_dist": [
                "aws-cdk-lib (<3.0.0,>=2.55.1)",
                "aws-cdk.aws-appsync-alpha (==2.55.1.a0)",
                "constructs (<11.0.0,>=10.0.5)",
                "jsii (<2.0.0,>=1.72.0)",
                "publication (>=0.0.3)",
                "typeguard (~=2.13.3)"
            ],
            "requires_python": "~=3.7",
            "summary": "Utilities for creating appsync apis using aws-cdk",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16189687,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a6859a851da120eb5bfb090ebf77d5cf",
                    "sha256": "1cff49e99d74169c29cb7a4c61a1f814005ee8b55954aeea5b88efd20817c6fa"
                },
                "downloads": -1,
                "filename": "cdklabs.appsync_utils-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a6859a851da120eb5bfb090ebf77d5cf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": "~=3.7",
                "size": 108933,
                "upload_time": "2022-12-19T22:25:47",
                "upload_time_iso_8601": "2022-12-19T22:25:47.003956Z",
                "url": "https://files.pythonhosted.org/packages/fd/ae/fce04c4ca05eaf350a41bd67a0538a983d80a634f266f9ae1af95ad26b71/cdklabs.appsync_utils-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "da3288aa11675667b4e80b5af7a4a698",
                    "sha256": "991ab27fa31e0ebee79445d7a85b534cf46aeca96ee94d163a94eb3a31b57e87"
                },
                "downloads": -1,
                "filename": "cdklabs.appsync-utils-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "da3288aa11675667b4e80b5af7a4a698",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": "~=3.7",
                "size": 110876,
                "upload_time": "2022-12-19T22:25:48",
                "upload_time_iso_8601": "2022-12-19T22:25:48.825628Z",
                "url": "https://files.pythonhosted.org/packages/ec/e8/386eaeeae6c3b401d20f046a8c9bdf0867353c2b21b46228052974ce75f1/cdklabs.appsync-utils-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Mitchell Valine<mitchellvaline@yahoo.com>",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved",
                "Operating System :: OS Independent",
                "Programming Language :: JavaScript",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Typing :: Typed"
            ],
            "description": "# AWS CDK AppSync Utilities\n\nThis package contains various utilities for definining GraphQl Apis via AppSync using the [aws-cdk](https://github.com/aws/aws-cdk).\n\n## Code First Schema Definition\n\n`CodeFirstSchema` offers the ability to generate your schema in a code-first\napproach. A code-first approach offers a developer workflow with:\n\n* **modularity**: organizing schema type definitions into different files\n* **reusability**: removing boilerplate/repetitive code\n* **consistency**: resolvers and schema definition will always be synced\n\nThe code-first approach allows for **dynamic** schema generation. You can\ngenerate your schema based on variables and templates to reduce code\nduplication.\n\n```python\nimport { GraphqlApi } from '@aws-cdk/aws-appsync-alpha';\nimport { CodeFirstSchema } from 'awscdk-appsync-utils';\n\nconst schema = new CodeFirstSchema();\nconst api = new GraphqlApi(this, 'api', { name: 'myApi', schema });\n\nschema.addType(new ObjectType('demo', {\n  definition: { id: GraphqlType.id() },\n}));\n```\n\n### Code-First Example\n\nTo showcase the code-first approach. Let's try to model the following schema segment.\n\n```gql\ninterface Node {\n  id: String\n}\n\ntype Query {\n  allFilms(after: String, first: Int, before: String, last: Int): FilmConnection\n}\n\ntype FilmNode implements Node {\n  filmName: String\n}\n\ntype FilmConnection {\n  edges: [FilmEdge]\n  films: [Film]\n  totalCount: Int\n}\n\ntype FilmEdge {\n  node: Film\n  cursor: String\n}\n```\n\nAbove we see a schema that allows for generating paginated responses. For example,\nwe can query `allFilms(first: 100)` since `FilmConnection` acts as an intermediary\nfor holding `FilmEdges` we can write a resolver to return the first 100 films.\n\nIn a separate file, we can declare our object types and related functions.\nWe will call this file `object-types.ts` and we will have created it in a way that\nallows us to generate other `XxxConnection` and `XxxEdges` in the future.\n\n```python\nimport { GraphqlType, InterfaceType, ObjectType } from 'awscdk-appsync-utils';\nconst pluralize = require('pluralize');\n\nexport const args = {\n  after: GraphqlType.string(),\n  first: GraphqlType.int(),\n  before: GraphqlType.string(),\n  last: GraphqlType.int(),\n};\n\nexport const Node = new InterfaceType('Node', {\n  definition: { id: GraphqlType.string() }\n});\nexport const FilmNode = new ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: GraphqlType.string() }\n});\n\nexport function generateEdgeAndConnection(base: ObjectType) {\n  const edge = new ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: GraphqlType.string() }\n  });\n  const connection = new ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}\n```\n\nFinally, we will go to our `cdk-stack` and combine everything together\nto generate our schema.\n\n```python\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\n\nconst objectTypes = [ Node, FilmNode ];\n\nconst filmConnections = generateEdgeAndConnection(FilmNode);\n\napi.addQuery('allFilms', new ResolvableField({\n  returnType: filmConnections.connection.attribute(),\n  args: args,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n\napi.addType(Node);\napi.addType(FilmNode);\napi.addType(filmConnections.edge);\napi.addType(filmConnections.connection);\n```\n\nNotice how we can utilize the `generateEdgeAndConnection` function to generate\nObject Types. In the future, if we wanted to create more Object Types, we can simply\ncreate the base Object Type (i.e. Film) and from there we can generate its respective\n`Connections` and `Edges`.\n\nCheck out a more in-depth example [here](https://github.com/BryanPan342/starwars-code-first).\n\n## GraphQL Types\n\nOne of the benefits of GraphQL is its strongly typed nature. We define the\ntypes within an object, query, mutation, interface, etc. as **GraphQL Types**.\n\nGraphQL Types are the building blocks of types, whether they are scalar, objects,\ninterfaces, etc. GraphQL Types can be:\n\n* [**Scalar Types**](https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html): Id, Int, String, AWSDate, etc.\n* [**Object Types**](#Object-Types): types that you generate (i.e. `demo` from the example above)\n* [**Interface Types**](#Interface-Types): abstract types that define the base implementation of other\n  Intermediate Types\n\nMore concretely, GraphQL Types are simply the types appended to variables.\nReferencing the object type `Demo` in the previous example, the GraphQL Types\nis `String!` and is applied to both the names `id` and `version`.\n\n### Directives\n\n`Directives` are attached to a field or type and affect the execution of queries,\nmutations, and types. With AppSync, we use `Directives` to configure authorization.\nAppsync utils provide static functions to add directives to your CodeFirstSchema.\n\n* `Directive.iam()` sets a type or field's authorization to be validated through `Iam`\n* `Directive.apiKey()` sets a type or field's authorization to be validated through a `Api Key`\n* `Directive.oidc()` sets a type or field's authorization to be validated through `OpenID Connect`\n* `Directive.cognito(...groups: string[])` sets a type or field's authorization to be validated\n  through `Cognito User Pools`\n\n  * `groups` the name of the cognito groups to give access\n\nTo learn more about authorization and directives, read these docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/security.html).\n\n### Field and Resolvable Fields\n\nWhile `GraphqlType` is a base implementation for GraphQL fields, we have abstractions\non top of `GraphqlType` that provide finer grain support.\n\n### Field\n\n`Field` extends `GraphqlType` and will allow you to define arguments. [**Interface Types**](#Interface-Types) are not resolvable and this class will allow you to define arguments,\nbut not its resolvers.\n\nFor example, if we want to create the following type:\n\n```gql\ntype Node {\n  test(argument: string): String\n}\n```\n\nThe CDK code required would be:\n\n```python\nimport { Field, GraphqlType, InterfaceType } from 'awscdk-appsync-utils';\n\nconst field = new Field({\n  returnType: GraphqlType.string(),\n  args: {\n    argument: GraphqlType.string(),\n  },\n});\nconst type = new InterfaceType('Node', {\n  definition: { test: field },\n});\n```\n\n### Resolvable Fields\n\n`ResolvableField` extends `Field` and will allow you to define arguments and its resolvers.\n[**Object Types**](#Object-Types) can have fields that resolve and perform operations on\nyour backend.\n\nYou can also create resolvable fields for object types.\n\n```gql\ntype Info {\n  node(id: String): String\n}\n```\n\nThe CDK code required would be:\n\n```python\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst info = new ObjectType('Info', {\n  definition: {\n    node: new ResolvableField({\n      returnType: GraphqlType.string(),\n      args: {\n        id: GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n```\n\nTo nest resolvers, we can also create top level query types that call upon\nother types. Building off the previous example, if we want the following graphql\ntype definition:\n\n```gql\ntype Query {\n  get(argument: string): Info\n}\n```\n\nThe CDK code required would be:\n\n```python\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst query = new ObjectType('Query', {\n  definition: {\n    get: new ResolvableField({\n      returnType: GraphqlType.string(),\n      args: {\n        argument: GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n```\n\nLearn more about fields and resolvers [here](https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-overview.html).\n\n### Intermediate Types\n\nIntermediate Types are defined by Graphql Types and Fields. They have a set of defined\nfields, where each field corresponds to another type in the system. Intermediate\nTypes will be the meat of your GraphQL Schema as they are the types defined by you.\n\nIntermediate Types include:\n\n* [**Interface Types**](#Interface-Types)\n* [**Object Types**](#Object-Types)\n* [**Enum Types**](#Enum-Types)\n* [**Input Types**](#Input-Types)\n* [**Union Types**](#Union-Types)\n\n#### Interface Types\n\n**Interface Types** are abstract types that define the implementation of other\nintermediate types. They are useful for eliminating duplication and can be used\nto generate Object Types with less work.\n\nYou can create Interface Types ***externally***.\n\n```python\nconst node = new InterfaceType('Node', {\n  definition: {\n    id: GraphqlType.string({ isRequired: true }),\n  },\n});\n```\n\nTo learn more about **Interface Types**, read the docs [here](https://graphql.org/learn/schema/#interfaces).\n\n#### Object Types\n\n**Object Types** are types that you declare. For example, in the [code-first example](#code-first-example)\nthe `demo` variable is an **Object Type**. **Object Types** are defined by\nGraphQL Types and are only usable when linked to a GraphQL Api.\n\nYou can create Object Types in two ways:\n\n1. Object Types can be created ***externally***.\n\n   ```python\n   const schema = new CodeFirstSchema();\n   const api = new appsync.GraphqlApi(this, 'Api', {\n     name: 'demo',\n     schema,\n   });\n   const demo = new ObjectType('Demo', {\n     definition: {\n       id: GraphqlType.string({ isRequired: true }),\n       version: GraphqlType.string({ isRequired: true }),\n     },\n   });\n\n   schema.addType(demo);\n   ```\n\n   > This method allows for reusability and modularity, ideal for larger projects.\n   > For example, imagine moving all Object Type definition outside the stack.\n\n   `object-types.ts` - a file for object type definitions\n\n   ```python\n   import { ObjectType, GraphqlType } from 'awscdk-appsync-utils';\n   export const demo = new ObjectType('Demo', {\n     definition: {\n       id: GraphqlType.string({ isRequired: true }),\n       version: GraphqlType.string({ isRequired: true }),\n     },\n   });\n   ```\n\n   `cdk-stack.ts` - a file containing our cdk stack\n\n   ```python\n   declare const schema: CodeFirstSchema;\n   schema.addType(demo);\n   ```\n2. Object Types can be created ***externally*** from an Interface Type.\n\n   ```python\n   const node = new InterfaceType('Node', {\n     definition: {\n       id: GraphqlType.string({ isRequired: true }),\n     },\n   });\n   const demo = new ObjectType('Demo', {\n     interfaceTypes: [ node ],\n     definition: {\n       version: GraphqlType.string({ isRequired: true }),\n     },\n   });\n   ```\n\n   > This method allows for reusability and modularity, ideal for reducing code duplication.\n\nTo learn more about **Object Types**, read the docs [here](https://graphql.org/learn/schema/#object-types-and-fields).\n\n#### Enum Types\n\n**Enum Types** are a special type of Intermediate Type. They restrict a particular\nset of allowed values for other Intermediate Types.\n\n```gql\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n```\n\n> This means that wherever we use the type Episode in our schema, we expect it to\n> be exactly one of NEWHOPE, EMPIRE, or JEDI.\n\nThe above GraphQL Enumeration Type can be expressed in CDK as the following:\n\n```python\ndeclare const api: GraphqlApi;\nconst episode = new EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);\n```\n\nTo learn more about **Enum Types**, read the docs [here](https://graphql.org/learn/schema/#enumeration-types).\n\n#### Input Types\n\n**Input Types** are special types of Intermediate Types. They give users an\neasy way to pass complex objects for top level Mutation and Queries.\n\n```gql\ninput Review {\n  stars: Int!\n  commentary: String\n}\n```\n\nThe above GraphQL Input Type can be expressed in CDK as the following:\n\n```python\ndeclare const api: appsync.GraphqlApi;\nconst review = new InputType('Review', {\n  definition: {\n    stars: GraphqlType.int({ isRequired: true }),\n    commentary: GraphqlType.string(),\n  },\n});\napi.addType(review);\n```\n\nTo learn more about **Input Types**, read the docs [here](https://graphql.org/learn/schema/#input-types).\n\n#### Union Types\n\n**Union Types** are a special type of Intermediate Type. They are similar to\nInterface Types, but they cannot specify any common fields between types.\n\n**Note:** the fields of a union type need to be `Object Types`. In other words, you\ncan't create a union type out of interfaces, other unions, or inputs.\n\n```gql\nunion Search = Human | Droid | Starship\n```\n\nThe above GraphQL Union Type encompasses the Object Types of Human, Droid and Starship. It\ncan be expressed in CDK as the following:\n\n```python\ndeclare const api: appsync.GraphqlApi;\nconst string = GraphqlType.string();\nconst human = new ObjectType('Human', { definition: { name: string } });\nconst droid = new ObjectType('Droid', { definition: { name: string } });\nconst starship = new ObjectType('Starship', { definition: { name: string } }););\nconst search = new UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);\n```\n\nTo learn more about **Union Types**, read the docs [here](https://graphql.org/learn/schema/#union-types).\n\n### Query\n\nEvery schema requires a top level Query type. By default, the schema will look\nfor the `Object Type` named `Query`. The top level `Query` is the **only** exposed\ntype that users can access to perform `GET` operations on your Api.\n\nTo add fields for these queries, we can simply run the `addQuery` function to add\nto the schema's `Query` type.\n\n```python\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmConnection: InterfaceType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = GraphqlType.string();\nconst int = GraphqlType.int();\napi.addQuery('allFilms', new ResolvableField({\n  returnType: filmConnection.attribute(),\n  args: { after: string, first: int, before: string, last: int},\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n```\n\nTo learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-overview.html).\n\n### Mutation\n\nEvery schema **can** have a top level Mutation type. By default, the schema will look\nfor the `ObjectType` named `Mutation`. The top level `Mutation` Type is the only exposed\ntype that users can access to perform `mutable` operations on your Api.\n\nTo add fields for these mutations, we can simply run the `addMutation` function to add\nto the schema's `Mutation` type.\n\n```python\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmNode: ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = GraphqlType.string();\nconst int = GraphqlType.int();\napi.addMutation('addFilm', new ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n```\n\nTo learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-overview.html).\n\n### Subscription\n\nEvery schema **can** have a top level Subscription type. The top level `Subscription` Type\nis the only exposed type that users can access to invoke a response to a mutation. `Subscriptions`\nnotify users when a mutation specific mutation is called. This means you can make any data source\nreal time by specify a GraphQL Schema directive on a mutation.\n\n**Note**: The AWS AppSync client SDK automatically handles subscription connection management.\n\nTo add fields for these subscriptions, we can simply run the `addSubscription` function to add\nto the schema's `Subscription` type.\n\n```python\ndeclare const api: appsync.GraphqlApi;\ndeclare const film: InterfaceType;\n\napi.addSubscription('addedFilm', new Field({\n  returnType: film.attribute(),\n  args: { id: GraphqlType.id({ isRequired: true }) },\n  directives: [Directive.subscribe('addFilm')],\n}));\n```\n\nTo learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/real-time-data.html).\n\n## Contributing\n\nThis library leans towards high level and experimental features for appsync cdk users. If you have an idea for additional utilities please create an issue describing the feature.\n\nSee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.\n\n## License\n\nThis project is licensed under the Apache-2.0 License.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cdklabs/awscdk-appsync-utils.git",
            "keywords": "",
            "license": "Apache-2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cdklabs.appsync-utils",
            "package_url": "https://pypi.org/project/cdklabs.appsync-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/cdklabs.appsync-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cdklabs/awscdk-appsync-utils.git",
                "Source": "https://github.com/cdklabs/awscdk-appsync-utils.git"
            },
            "release_url": "https://pypi.org/project/cdklabs.appsync-utils/0.0.2/",
            "requires_dist": [
                "aws-cdk-lib (<3.0.0,>=2.55.1)",
                "aws-cdk.aws-appsync-alpha (==2.55.1.a0)",
                "constructs (<11.0.0,>=10.0.5)",
                "jsii (<2.0.0,>=1.72.0)",
                "publication (>=0.0.3)",
                "typeguard (~=2.13.3)"
            ],
            "requires_python": "~=3.7",
            "summary": "Utilities for creating appsync apis using aws-cdk",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16189687,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f6dcbb9e26c1d4445f371a93a0dbc098",
                    "sha256": "fcb299cca395c174d61a828b75c42245b4db261856e830ab115a0a3742c171b7"
                },
                "downloads": -1,
                "filename": "cdklabs.appsync_utils-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f6dcbb9e26c1d4445f371a93a0dbc098",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": "~=3.7",
                "size": 108932,
                "upload_time": "2022-12-22T20:32:51",
                "upload_time_iso_8601": "2022-12-22T20:32:51.009157Z",
                "url": "https://files.pythonhosted.org/packages/7f/1c/66f9e177fd8db490c9b21039fb8788da635aa8a0b05759ad67ca79731ca0/cdklabs.appsync_utils-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "21a5e59737547418298f6870639d83f8",
                    "sha256": "b05b7735551bbc2a804eaa7ad856926ac58e73ae9cfce7c18a70be92d0c793e1"
                },
                "downloads": -1,
                "filename": "cdklabs.appsync-utils-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "21a5e59737547418298f6870639d83f8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": "~=3.7",
                "size": 110872,
                "upload_time": "2022-12-22T20:32:53",
                "upload_time_iso_8601": "2022-12-22T20:32:53.322953Z",
                "url": "https://files.pythonhosted.org/packages/39/22/bedc8f0d6e62b0cae2a8fb6de4393405ce66b86ddede3ad5a8f7d5798940/cdklabs.appsync-utils-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
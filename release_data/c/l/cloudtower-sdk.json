{
    "1.10.0": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,Cloudtower APIs",
            "license": "ISC",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/1.10.0/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "cloudtower sdk for python",
            "version": "1.10.0",
            "yanked": true,
            "yanked_reason": "remove managementIp from witness"
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "1be1a988028622ed102511de0b36646163677f791bf07172b05d1ea6ea814e7e",
                    "md5": "03bd950239c7c20218fdd36af789a9fd",
                    "sha256": "c7505f4bb4b7a56b15b63a533635a49a23896cf0459eff01770e74c5f65688d2"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-1.10.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "03bd950239c7c20218fdd36af789a9fd",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 2817678,
                "upload_time": "2022-05-18T02:36:35",
                "upload_time_iso_8601": "2022-05-18T02:36:35.510348Z",
                "url": "https://files.pythonhosted.org/packages/1b/e1/a988028622ed102511de0b36646163677f791bf07172b05d1ea6ea814e7e/cloudtower_sdk-1.10.0-py2.py3-none-any.whl",
                "yanked": true,
                "yanked_reason": "remove managementIp from witness"
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "04a6d3c2d62c3ddf85604fa4ef6df2a8c3968f9778964c5e0e72d9147cc446dd",
                    "md5": "3b11124e96a08ffc64849741ddd52441",
                    "sha256": "82938810c08e51a21c60f11fae434581ef43174d3cc2c7e68885ea7b0396dd91"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-1.10.0.tar.gz",
                "has_sig": false,
                "md5_digest": "3b11124e96a08ffc64849741ddd52441",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1236231,
                "upload_time": "2022-05-18T02:36:39",
                "upload_time_iso_8601": "2022-05-18T02:36:39.378916Z",
                "url": "https://files.pythonhosted.org/packages/04/a6/d3c2d62c3ddf85604fa4ef6df2a8c3968f9778964c5e0e72d9147cc446dd/cloudtower-sdk-1.10.0.tar.gz",
                "yanked": true,
                "yanked_reason": "remove managementIp from witness"
            }
        ],
        "vulnerabilities": []
    },
    "1.10.0.post1": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,Cloudtower APIs",
            "license": "ISC",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/1.10.0.post1/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "cloudtower sdk for python",
            "version": "1.10.0.post1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "d67a329f2dc0aa251a539338049012de43ebe54fa504fd2cd87c6ad3a8f9cf14",
                    "md5": "a0c4c9abb5241dbedf35794f4e591bbd",
                    "sha256": "71a6dc5f64e5254c19035a670f4e7fa38ab5be0eb1807265e3ec9e180290b0f4"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-1.10.0.post1-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a0c4c9abb5241dbedf35794f4e591bbd",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 2796733,
                "upload_time": "2022-05-20T03:57:30",
                "upload_time_iso_8601": "2022-05-20T03:57:30.038651Z",
                "url": "https://files.pythonhosted.org/packages/d6/7a/329f2dc0aa251a539338049012de43ebe54fa504fd2cd87c6ad3a8f9cf14/cloudtower_sdk-1.10.0.post1-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "35259266d742a44be7f5f561a344df005e19a60389c6ab95538546bc33eb3936",
                    "md5": "3c7cdac8ff254ffc6f3ca40b3c13d5c2",
                    "sha256": "282f51b863e0aa1d4db096071caeffb7a664f5f948a375b6e193deb5783f96d6"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-1.10.0.post1.tar.gz",
                "has_sig": false,
                "md5_digest": "3c7cdac8ff254ffc6f3ca40b3c13d5c2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1230666,
                "upload_time": "2022-05-20T03:57:33",
                "upload_time_iso_8601": "2022-05-20T03:57:33.910680Z",
                "url": "https://files.pythonhosted.org/packages/35/25/9266d742a44be7f5f561a344df005e19a60389c6ab95538546bc33eb3936/cloudtower-sdk-1.10.0.post1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.9.0": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,Cloudtower APIs",
            "license": "ISC",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": "",
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/1.9.0/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "cloudtower sdk for python",
            "version": "1.9.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "096cf174339a9363df3575485de9f7453c4d282f5da3966c6a763b55db767364",
                    "md5": "af5bcaa41559289a8c3952503743db51",
                    "sha256": "246430222caa9e368d221d145be1d36fa7e82a752567f6acdce9f81f11dfe0d2"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-1.9.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "af5bcaa41559289a8c3952503743db51",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 3118522,
                "upload_time": "2022-02-15T11:17:50",
                "upload_time_iso_8601": "2022-02-15T11:17:50.148617Z",
                "url": "https://files.pythonhosted.org/packages/09/6c/f174339a9363df3575485de9f7453c4d282f5da3966c6a763b55db767364/cloudtower_sdk-1.9.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "3ecd2c633de1252445d1fcb8d654227b8ee40dca51002e68daa243838f46c0de",
                    "md5": "ef76a261266fc2ac72080d16c48a2792",
                    "sha256": "68033bb7fe3ca2ba25378de35d5a3bb6365ca1e7b62d21e152e01f38ee72063d"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-1.9.0.tar.gz",
                "has_sig": false,
                "md5_digest": "ef76a261266fc2ac72080d16c48a2792",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1418392,
                "upload_time": "2022-02-15T11:17:52",
                "upload_time_iso_8601": "2022-02-15T11:17:52.923496Z",
                "url": "https://files.pythonhosted.org/packages/3e/cd/2c633de1252445d1fcb8d654227b8ee40dca51002e68daa243838f46c0de/cloudtower-sdk-1.9.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.0": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,Cloudtower APIs",
            "license": "ISC",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/2.0.0/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "cloudtower sdk for python",
            "version": "2.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "0aea5b93556ab8daf3783a36412fa9fa31aae3f6bde8817078396a3550604177",
                    "md5": "f7f630762ca358807a52af619789399e",
                    "sha256": "bede32d9440624c7e4c752c9a4871e3c30e850ae5eea8afeb38572b5685f5eb8"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-2.0.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f7f630762ca358807a52af619789399e",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 2941663,
                "upload_time": "2022-05-20T09:30:34",
                "upload_time_iso_8601": "2022-05-20T09:30:34.511379Z",
                "url": "https://files.pythonhosted.org/packages/0a/ea/5b93556ab8daf3783a36412fa9fa31aae3f6bde8817078396a3550604177/cloudtower_sdk-2.0.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "c9bafce4e8ec5bb778ef6ac332e21ca73e083f1f5ed4ff0b9f9530a9fbd9cdbf",
                    "md5": "c05af9ba0913551291ab88c71e939b2f",
                    "sha256": "70407c3c09d72da6b1928b76d1d4a85f3f22f463f7d624a51f59a6f52c44cd37"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-2.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "c05af9ba0913551291ab88c71e939b2f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1294723,
                "upload_time": "2022-05-20T09:30:38",
                "upload_time_iso_8601": "2022-05-20T09:30:38.963143Z",
                "url": "https://files.pythonhosted.org/packages/c9/ba/fce4e8ec5bb778ef6ac332e21ca73e083f1f5ed4ff0b9f9530a9fbd9cdbf/cloudtower-sdk-2.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.1.0": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,Cloudtower APIs",
            "license": "ISC",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/2.1.0/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "cloudtower sdk for python",
            "version": "2.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "70e57492aa7de741804af928786789b84119a5a676a7bbd0febab5c39dbbf51d",
                    "md5": "cd3ac51005de28dcb56f8ec35eb65044",
                    "sha256": "7ac9db6b8347b3448375f7ee9996cfbe89e5cecc7ecbbbefbba9060bb2d11e87"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-2.1.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cd3ac51005de28dcb56f8ec35eb65044",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 3054547,
                "upload_time": "2022-07-08T10:08:05",
                "upload_time_iso_8601": "2022-07-08T10:08:05.714795Z",
                "url": "https://files.pythonhosted.org/packages/70/e5/7492aa7de741804af928786789b84119a5a676a7bbd0febab5c39dbbf51d/cloudtower_sdk-2.1.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "efc53fccc3ca4c2e9d31cbb7339abeb6b997d9ba5511f5a12c844d1f2fb69857",
                    "md5": "edad4cf6524267efd0e87762aca38d8c",
                    "sha256": "5878b6de33001585881247d96b652d8aa4a6e6c623aaab285c80fe830ce24a7f"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-2.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "edad4cf6524267efd0e87762aca38d8c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1302577,
                "upload_time": "2022-07-08T10:08:09",
                "upload_time_iso_8601": "2022-07-08T10:08:09.887947Z",
                "url": "https://files.pythonhosted.org/packages/ef/c5/3fccc3ca4c2e9d31cbb7339abeb6b997d9ba5511f5a12c844d1f2fb69857/cloudtower-sdk-2.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.2.0": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,CloudTower APIs",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/2.2.0/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "CloudTower APIs",
            "version": "2.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "69ce9640b1ca019f145b9b1e407c3229c1d58833763178b322a0437ddcad13ed",
                    "md5": "4ecbb98528fa544e0f6487d5d4b6b6a7",
                    "sha256": "1fef383a0961656058bd28b9b877ce14532eb05c11583f22f266bf6a0b6e6ff7"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-2.2.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4ecbb98528fa544e0f6487d5d4b6b6a7",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 3078573,
                "upload_time": "2022-08-16T02:48:29",
                "upload_time_iso_8601": "2022-08-16T02:48:29.283241Z",
                "url": "https://files.pythonhosted.org/packages/69/ce/9640b1ca019f145b9b1e407c3229c1d58833763178b322a0437ddcad13ed/cloudtower_sdk-2.2.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "1ca7af5653825745b49ac0852f0da4d3d635f73e3e2ebef6a7d08fb35bcdf8bb",
                    "md5": "76ef20bb2c6898fbdd5d093706042857",
                    "sha256": "f0f4b333550342734ef2126d5548b901f7bae9dea280faaf6308e53155420ead"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-2.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "76ef20bb2c6898fbdd5d093706042857",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1305911,
                "upload_time": "2022-08-16T02:48:33",
                "upload_time_iso_8601": "2022-08-16T02:48:33.069023Z",
                "url": "https://files.pythonhosted.org/packages/1c/a7/af5653825745b49ac0852f0da4d3d635f73e3e2ebef6a7d08fb35bcdf8bb/cloudtower-sdk-2.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.3.0": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,CloudTower APIs",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/2.3.0/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "CloudTower APIs",
            "version": "2.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "fe054d79480e7988c92a2a984cb091c7bcb99c23b57a32a166b1ad2d3b0935ce",
                    "md5": "77bbb6628e5ca195b5e572b025afa81c",
                    "sha256": "ba8ba142cea8e1dfdeba085a4531b3ee29d506469bb53fd47d20c02631edcc65"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-2.3.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "77bbb6628e5ca195b5e572b025afa81c",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 3016468,
                "upload_time": "2022-09-05T08:54:45",
                "upload_time_iso_8601": "2022-09-05T08:54:45.166762Z",
                "url": "https://files.pythonhosted.org/packages/fe/05/4d79480e7988c92a2a984cb091c7bcb99c23b57a32a166b1ad2d3b0935ce/cloudtower_sdk-2.3.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "ab82baca5a1aea835ea61f7ec3ed870ec4e1d4f2e563736bb0e930873f16e5b5",
                    "md5": "6ae5d6a0a942a651eaf4ff05d14c77d4",
                    "sha256": "233809f9e685741e6402731e3da26e2bfb1ea334b7f5120ead9fa00245f917c4"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-2.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "6ae5d6a0a942a651eaf4ff05d14c77d4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1308655,
                "upload_time": "2022-09-05T08:54:48",
                "upload_time_iso_8601": "2022-09-05T08:54:48.560762Z",
                "url": "https://files.pythonhosted.org/packages/ab/82/baca5a1aea835ea61f7ec3ed870ec4e1d4f2e563736bb0e930873f16e5b5/cloudtower-sdk-2.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.4.0": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,CloudTower APIs",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/2.4.0/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "CloudTower APIs",
            "version": "2.4.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "12427aebb3f0fb1d2aed0aec36e12a95fb13c18696303797c2e9b9b43df36b76",
                    "md5": "889e2a0a2636cdd06e0b9463bbc6f89d",
                    "sha256": "4c09fc9f1b5f1f80787c4ba279d8021ffa610b86cee0d7ce00377657dcc778a6"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-2.4.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "889e2a0a2636cdd06e0b9463bbc6f89d",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 3105068,
                "upload_time": "2022-11-18T08:54:17",
                "upload_time_iso_8601": "2022-11-18T08:54:17.721362Z",
                "url": "https://files.pythonhosted.org/packages/12/42/7aebb3f0fb1d2aed0aec36e12a95fb13c18696303797c2e9b9b43df36b76/cloudtower_sdk-2.4.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "ddf1437ae6b84a41d87f3f60c57ab6a37a2293b257e741ff0f3b1225c0cf8785",
                    "md5": "ad96222d266f919e6b15120c02bb72ab",
                    "sha256": "ebd28c1f288bcef585982618ade16117181c23c4e12ee1f4627aa289ba08f072"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-2.4.0.tar.gz",
                "has_sig": false,
                "md5_digest": "ad96222d266f919e6b15120c02bb72ab",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1344704,
                "upload_time": "2022-11-18T08:54:21",
                "upload_time_iso_8601": "2022-11-18T08:54:21.630651Z",
                "url": "https://files.pythonhosted.org/packages/dd/f1/437ae6b84a41d87f3f60c57ab6a37a2293b257e741ff0f3b1225c0cf8785/cloudtower-sdk-2.4.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.5.0": {
        "info": {
            "author": "Cloudtower developers",
            "author_email": "info@smartx.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Cloudtower Python SDK\n\nPython \u73af\u5883\u4e0b\u7684 Cloudtower SDK\uff0c\u9002\u7528\u4e8e 2.7 \u4e0e 3.4 \u4ee5\u4e0a\u7248\u672c\u3002\n\n- [\u6e90\u7801\u5730\u5740](https://github.com/smartxworks/cloudtower-python-sdk)\n- [\u4e0b\u8f7d\u5730\u5740](https://github.com/smartxworks/cloudtower-python-sdk/releases)\n- [\u901a\u7528\u6307\u5357](https://cloudtower-api-doc.vercel.app)\n\n## \u5b89\u88c5\n\n- ### whl\n\n  ```shell\n  pip install cloudtower_sdk-2.5.0-py2.py3-none-any.whl\n  ```\n\n- ### tar.gz\n\n  ```shell\n  tar xvzf cloudtower-sdk-2.5.0.tar.gz\n  cd cloudtower-sdk-2.5.0\n  python setup.py install\n  ```\n\n- ### git \u6e90\u7801\u5b89\u88c5\n\n  ```\n  git clone https://github.com/smartxworks/cloudtower-python-sdk.git\n  cd cloudtower-python-sdk\n  python setup.py install\n  ```\n\n- ### git pip \u5b89\u88c5\n\n  ```shell\n  pip install git+https://github.com/smartxworks/cloudtower-python-sdk.git\n  ```\n\n- ### pypi \u5b89\u88c5\n  ```shell\n  pip install cloudtower-sdk\n  ```\n\n## \u4f7f\u7528\n\n### \u521b\u5efa\u5b9e\u4f8b\n\n#### \u521b\u5efa `ApiClient` \u5b9e\u4f8b\n\n```python\nfrom cloudtower.configuration import Configuration\nfrom cloudtower import ApiClient\n# \u914d\u7f6e operation-api endpoint\nconfiguration = Configuration(host=\"http://192.168.96.133/v2/api\")\nclient = ApiClient(configuration)\n```\n\n> \u5982\u679c\u9700\u8981\u4f7f\u7528 https\uff0c\u53ef\u4ee5\u5b89\u88c5\u8bc1\u4e66\uff0c\u6216\u8005\u5ffd\u7565\u8bc1\u4e66\u9a8c\u8bc1\n\n```python\nconfiguration = Configuration(host=\"https://192.168.96.133/v2/api\")\nconfiguration.verify_ssl = False\nclient = ApiClient(configuration)\n```\n\n#### \u521b\u5efa\u5bf9\u5e94\u7684 API \u5b9e\u4f8b\n\n> \u6839\u636e\u4e0d\u540c\u7528\u9014\u7684\u64cd\u4f5c\u521b\u5efa\u76f8\u5173\u7684 API \u5b9e\u4f8b\uff0c\u4f8b\u5982\u865a\u62df\u673a\u76f8\u5173\u64cd\u4f5c\u9700\u8981\u521b\u5efa\u4e00\u4e2a `VmApi`\u3002\n\n```python\nfrom cloudtower.api.vm_api import VmApi\nvm_api = VmApi(client)\n```\n\n### \u9274\u6743\n\n> \u53ef\u4ee5\u901a\u8fc7 utils \u4e2d\u5c01\u88c5\u7684\u767b\u9646\u65b9\u6cd5\u6765\u9274\u6743 `ApiClient`\n\n```python\nfrom cloudtower.utils import wait_tasks, login\nconf = Configuration(host=\"http://api-test.dev-cloudtower.smartx.com/v2/api\")\napi_client = ApiClient(conf)\nlogin(api_client, \"your_username\", \"your_password\") # \u9ed8\u8ba4\u4f7f\u7528 LOCAL \u4f5c\u4e3a usersource\n```\n\n> \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 token \u5e94\u7528\u7f6e `configuration` \u7684 `api_key` \u4e2d\n\n```python\nfrom cloudtower.api.user_api import UserApi\nfrom cloudtower.models import UserSource\n# \u901a\u8fc7 UserApi \u4e2d\u7684 login \u65b9\u6cd5\u6765\u83b7\u5f97 token\u3002\nuser_api = UserApi(client)\nlogin_res = user_api.login({\n    \"username\": \"your_username\",\n    \"password\": \"your_password\",\n    \"source\": UserSource.LOCAL\n})\n# \u5c06 token \u914d\u7f6e\u5728 configuration.api_key[\"Authorization\"] \u4e2d\uff0c\n# \u8fd9\u6837\u6240\u6709\u4f7f\u7528\u5f53\u524d client \u7684 api \u90fd\u4f1a\u83b7\u5f97\u9274\u6743\u7684 token \u4fe1\u606f\u3002\nconfiguration.api_key[\"Authorization\"] = login_res.data.token\n```\n\n### \u53d1\u9001\u8bf7\u6c42\n\n#### \u83b7\u53d6\u8d44\u6e90\n\n```python\nvms = vm_api.get_vms({\n  \"where\": {\n    \"id\": \"vm_id\"\n  },\n  \"first\":1,\n})\n```\n\n#### \u66f4\u65b0\u8d44\u6e90\n\n> \u8d44\u6e90\u66f4\u65b0\u4f1a\u4ea7\u751f\u76f8\u5173\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5f53\u5f02\u6b65\u4efb\u52a1\u7ed3\u675f\u65f6\uff0c\u4ee3\u8868\u8d44\u6e90\u64cd\u4f5c\u5b8c\u6210\u4e14\u6570\u636e\u5df2\u66f4\u65b0\u3002\n\n```python\nstart_res = vm_api.start_vm({\n  \"where\": {\n    \"id\": \"stopped_vm_id\"\n  },\n})\n```\n\n> \u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u7684\u5de5\u5177\u65b9\u6cd5\u540c\u6b65\u7b49\u5f85\u5f02\u6b65\u4efb\u52a1\u7ed3\u675f\n\n```python\nfrom cloudtower.utils import wait_tasks\ntry:\n wait_tasks([res.task_id for res in start_res], api_client)\nexcept ApiException as e:\n # \u5904\u7406\u9519\u8bef\nelse:\n # task\u5b8c\u6210\u540e\u7684\u56de\u8c03\n```\n\n##### \u65b9\u6cd5\u53c2\u6570\u8bf4\u660e\n\n| \u53c2\u6570\u540d        | \u7c7b\u578b      | \u662f\u5426\u5fc5\u987b | \u8bf4\u660e                                                                                 |\n| ------------- | --------- | -------- | ------------------------------------------------------------------------------------ |\n| ids           | list[str] | \u662f       | \u9700\u67e5\u8be2\u7684 task \u7684 id \u5217\u8868                                                             |\n| api_client    | ApiClient | \u662f       | \u67e5\u8be2\u6240\u4f7f\u7528\u7684 ApiClient \u5b9e\u4f8b                                                          |\n| interval      | int       | \u5426       | \u8f6e\u8be2\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a 5s                                                            |\n| timeout       | int       | \u5426       | \u8d85\u65f6\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a 300s                                                                |\n| exit_on_error | bool      | \u5426       | \u662f\u5426\u5728\u5355\u4e2a Task \u51fa\u9519\u65f6\u7acb\u5373\u9000\u51fa\uff0c\u5426\u5219\u5219\u4f1a\u7b49\u5f85\u5168\u90e8 Task \u90fd\u5b8c\u6210\u540e\u518d\u9000\u51fa\uff0c\u9ed8\u8ba4\u4e3a False\u3002 |\n\n##### \u9519\u8bef\u8bf4\u660e\n\n| \u9519\u8bef\u7801 | \u8bf4\u660e             |\n| ------ | ---------------- |\n| 408    | \u8d85\u65f6             |\n| 500    | \u5f02\u6b65\u4efb\u52a1\u5185\u90e8\u9519\u8bef |\n\n#### \u81ea\u5b9a\u4e49 header\n\n> cloudtower api \u652f\u6301\u901a\u8fc7\u8bbe\u7f6e header \u4e2d\u7684 content-language \u6765\u8bbe\u7f6e\u8fd4\u56de\u4fe1\u606f\u7684\u8bed\u8a00, \u53ef\u9009\u503c `en-US`, `zh-CN`\u3002\u9ed8\u8ba4\u4e3a `en-US`\u3002\n\n##### \u901a\u8fc7 `ApiClient` \u7684 `set_default_header` \u65b9\u6cd5\n\n> \u53ef\u4ee5\u901a\u8fc7 `ApiClient` \u7684 `set_default_header` \u65b9\u6cd5\u8bbe\u7f6e\u9ed8\u8ba4\u7684 header \u4fe1\u606f\u3002\n\n```python\napi_client.set_default_header(\"content_language\",\"en-US\")\nalert_api = AlertApi(api_client)\n# \u6b64\u65f6\u5f97\u5230\u7684 alerts \u4e2d\u7684 message, solution, cause, impact \u5c06\u88ab\u8f6c\u6362\u4e3a\u82f1\u6587\u63cf\u8ff0\u3002\nalerts = alert_api.get_alerts(\n  {\n    \"where\": {\n      \"cluster\": {\n        \"id\": \"cluster_id\"\n      }\n    },\n    \"first\": 100\n  },\n)\n```\n\n##### \u901a\u8fc7\u8bbe\u7f6e\u8bf7\u6c42\u7684\u5173\u952e\u5b57\u53c2\u6570\n\n> \u4e5f\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8bf7\u6c42\u7684\u5173\u952e\u5b57\u53c2\u6570 `content_language` \u6765\u8bbe\u7f6e\u8fd4\u56de\u4fe1\u606f\u7684\u8bed\u8a00\u3002\n\n```python\nfrom cloudtower.api.user_api import AlertApi\n\nalert_api = AlertApi(api_client)\n# \u6b64\u65f6\u5f97\u5230\u7684 alerts \u4e2d\u7684 message, solution, cause, impact \u5c06\u88ab\u8f6c\u6362\u4e3a\u4e2d\u6587\u63cf\u8ff0\u3002\nalerts = alert_api.get_alerts(\n  {\n    \"where\": {\n      \"cluster\": {\n        \"id\": \"cluster_id\"\n      }\n    },\n    \"first\": 100\n  },\n  content_language=\"zh-CN\"\n)\n```\n\n#### \u5176\u4ed6\n\n##### \u53d1\u9001\u5f02\u6b65\u8bf7\u6c42\n\n> \u4e0a\u8ff0\u8bf7\u6c42\u7684\u53d1\u9001\u90fd\u662f\u540c\u6b65\u7684\u8bf7\u6c42\uff0c\u4f1a\u5835\u585e\u5f53\u524d\u8fdb\u7a0b\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u5f02\u6b65\u8bf7\u6c42\uff0c\u8bf7\u5728\u5bf9\u5e94\u8bf7\u6c42\u7684\u5173\u952e\u5b57\u53c2\u6570\u4e2d\u52a0\u4e0a `async_req=True`\u3002\n> \u901a\u8fc7\u8fd4\u56de\u7ed3\u679c `ApplyResult.get()` \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u7ed3\u679c\u3002\n\n```python\nvms = vm_api.get_vms(\n  {\n    \"where\": {\n      \"id\": \"vm_id\"\n    }\n  },\n  async_req=True\n)\nprint(vms.get()[0].name)\n```\n\n### \u4f7f\u7528\u5b8c\u6210\u540e\u9500\u6bc1 ApiClient \u5b9e\u4f8b\n\n```python\nclient.close()\n```\n\n## \u64cd\u4f5c\u793a\u4f8b\n\n### \u83b7\u53d6\u865a\u62df\u673a\n\n#### \u83b7\u53d6\u6240\u6709\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nvms = vm_api.get_vms({})\n```\n\n#### \u5206\u9875\u83b7\u53d6\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nvms_from_51_to_100 = vm_api.get_vms({\n  \"first\": 50,\n  \"skip\": 50,\n})\n```\n\n#### \u83b7\u53d6\u6240\u6709\u5df2\u5f00\u673a\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi, VmStatus\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nrunning_vms = vm_api.get_vms(\n    {\n        \"where\": {\n            \"status\": VmStatus.RUNNING\n        }\n    },\n)\n```\n\n#### \u83b7\u53d6\u540d\u79f0\u6216\u63cf\u8ff0\u4e2d\u5305\u542b\u7279\u5b9a\u5b57\u7b26\u4e32\u7684\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nvms_name_contains = vm_api.get_vms(\n    {\n        \"where\": {\n            \"name_contains\": \"string\"\n        }\n    },\n)\n```\n\n#### \u83b7\u53d6\u6240\u6709 vcpu > n \u7684\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nvms_has_4_more_vcpu = vm_api.get_vms(\n    {\n        \"where\": {\n            \"vcpu_gt\": 4\n        }\n    },\n)\n```\n\n### \u4ece\u6a21\u7248\u521b\u5efa\u865a\u62df\u673a\n\n#### \u4ec5\u6307\u5b9a id\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vms = vm_api.create_vm_from_template([\n    {\n        \"template_id\": \"template_id\",\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"is_full_copy\": False\n    }\n])\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nvm_ids = [\n    with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\ncreated_vms = vm_api.get_vms({\n    \"where\": {\n        \"id_in\": vm_ids\n    }\n})\n```\n\n#### \u914d\u7f6e\u4e0e\u6a21\u677f\u4e0d\u540c\u7684\u865a\u62df\u76d8\u53c2\u6570\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmCreateVmFromTemplateParamsDiskOperateModifyDisks,\n    VmDiskParams,\n    Bus,\n    VmVolumeElfStoragePolicyType\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.create_vm_from_template([\n    {\n        \"template_id\": \"template_id\",\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"is_full_copy\": False,\n        \"disk_operate\": {\n            \"remove_disks\": {\n                \"disk_index\": [2, 3]\n            },\n            \"modify_disks\":   [\n                {\n                    \"disk_index\": 0,\n                    \"vm_volume_id\": \"vm_volume_id\"\n                }\n            ],\n            \"new_disks\":   {\n                \"mount_cd_roms\": [\n                    {\n                        \"index\": 2,\n                        \"boot\": 0,\n                        \"elf_image_id\": \"elf_image_id\"\n                    }\n                ],\n                \"mount_disks\": [\n                    {\n                        \"index\": 3,\n                        \"bus\": Bus.VIRTIO,\n                        \"boot\": 1,\n                        \"vm_volume_id\": \"vm_volume_id\"\n                    }\n                ],\n                \"mount_new_create_disks\": [\n                    {\n                        \"vm_volume\": {\n                            \"elf_storage_policy\": VmVolumeElfStoragePolicyType._2_THIN_PROVISION,\n                            \"size\": 4*1024*1024*1024,\n                            \"name\": \"disk_name\",\n                        },\n                        \"bus\": Bus.IDE,\n                        \"boot\": 3,\n                    }\n                ]\n            }\n        }\n    }\n])\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nvm_ids = [\n    with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\ncreated_vms = vm_api.get_vms({\n    \"where\": {\n        \"id_in\": vm_ids\n    }\n})\n```\n\n#### \u914d\u7f6e\u4e0e\u6a21\u7248\u4e0d\u540c\u7684\u7f51\u5361\u53c2\u6570\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi, VmNicModel\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.create_vm_from_template([\n    {\n        \"template_id\": \"template_id\",\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"is_full_copy\": False,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n                \"enabled\": True,\n                \"model\": VmNicModel.E1000\n            }\n        ]\n    }\n])\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nvm_ids = [\n    with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\ncreated_vms = vm_api.get_vms({\n    \"where\": {\n        \"id_in\": vm_ids\n    }\n})\n```\n\n### \u521b\u5efa\u7a7a\u767d\u865a\u62df\u673a\n\n#### \u7b80\u5355\u521b\u5efa\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4*1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_cd_roms\": [{\n                \"boot\": 0,\n                \"index\": 0\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### \u521b\u5efa\u65f6\u914d\u7f6e\u865a\u62df\u76d8\n\n##### CD-ROM \u52a0\u8f7d ISO\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4*1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_cd_roms\": [{\n                \"index\": 0,\n                \"boot\": 0,\n                \"elf_image_id\": \"elf_image_id\"\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### \u6302\u8f7d\u865a\u62df\u5377\u4e3a\u865a\u62df\u76d8\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4*1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_disks\": [{\n                \"index\": 0,\n                \"boot\": 0,\n                \"bus\": Bus.VIRTIO,\n                \"vm_volume_id\": \"vm_volume_id\",\n                \"index\": 0,\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### \u65b0\u589e\u5e76\u6302\u8f7d\u865a\u62df\u76d8\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus,\n    VmVolumeElfStoragePolicyType\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4 * 1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_new_create_disks\": [{\n                \"boot\": 0,\n                \"bus\": Bus.VIRTIO,\n                \"vm_volume\": {\n                    \"elf_storage_policy\": VmVolumeElfStoragePolicyType._2_THIN_PROVISION,\n                    \"size\": 10 * 1024 * 1024 * 1024,\n                    \"name\": \"new_volume_name\"\n                }\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### \u521b\u5efa\u65f6\u914d\u7f6e\u865a\u62df\u7f51\u5361\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus,\n    VmNicModel,\n    VmVolumeElfStoragePolicyType\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name1\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4 * 1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n                \"mirror\": True,\n                \"model\": VmNicModel.VIRTIO\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_cd_roms\": [{\n                \"index\": 0,\n                \"boot\": 0,\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n### \u7f16\u8f91\u865a\u62df\u673a\n\n#### \u7f16\u8f91\u57fa\u672c\u4fe1\u606f\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.update_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"name\": \"new_name\",\n        \"description\": \"new_description\",\n        \"ha\": False,\n        \"vcpu\": 2 * 2,\n        \"cpu_cores\": 2,\n        \"cpu_sockets\": 2,\n        \"memory\": 1*1024*1024*1024,\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### CD-ROM \u7f16\u8f91\n\n##### \u6dfb\u52a0 CD-ROM\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.add_vm_cd_rom({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"vm_cd_roms\": [\n            {\n                \"elf_image_id\": \"elf_image_id\",\n                \"boot\": 0,\n                \"index\": 0\n            }\n        ]\n    }\n})[0]\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### \u5220\u9664 CD-ROM\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.remove_vm_cd_rom({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"cd_rom_ids\": [\"cd_rom_id_1\", \"cd_rom_id_2\"]\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### \u865a\u62df\u5377\u64cd\u4f5c\n\n##### \u6dfb\u52a0\u65b0\u865a\u62df\u5377\n\n```python\nfrom cloudtower import ApiClient, Configuration, Bus, VmVolumeElfStoragePolicyType, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.add_vm_disk({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"vm_disks\": {\n            \"mount_new_create_disks\": [\n                {\n                    \"vm_volume\": {\n                        \"elf_storage_policy\": VmVolumeElfStoragePolicyType._2_THIN_PROVISION,\n                        \"size\": 5*1024*1024*1024,\n                        \"name\": \"new_volume_name\"\n                    },\n                    \"boot\": 1,\n                    \"bus\": Bus.VIRTIO,\n                }\n            ]\n        }\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### \u6302\u8f7d\u5df2\u5b58\u5728\u865a\u62df\u5377\u4e3a\u865a\u62df\u76d8\n\n```python\nfrom cloudtower import ApiClient, Configuration, Bus, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.add_vm_disk({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"vm_disks\": {\n            \"mount_disks\": [\n                {\n                    \"index\": 0,\n                    \"vm_volume_id\": \"vm_volume_id\",\n                    \"boot\": 1,\n                    \"bus\": Bus.VIRTIO,\n                }\n            ]\n        }\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### \u5378\u8f7d\u865a\u62df\u76d8\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmVolumeElfStoragePolicyType, Bus, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.remove_vm_disk({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"disk_ids\": [\"vm_disk_id_1\", \"vm_disk_id_2\"]\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### \u7f51\u5361\u64cd\u4f5c\n\n##### \u6dfb\u52a0\u7f51\u5361\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi, VmNicModel\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.add_vm_nic({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n                \"enabled\": False,\n                \"model\": VmNicModel.VIRTIO,\n            },\n            {\n                \"connect_vlan_id\": \"vlan_id_2\",\n                \"enabled\": True,\n                \"mirror\": True,\n                \"model\": VmNicModel.VIRTIO,\n            }\n        ]\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### \u7f16\u8f91\u7f51\u5361\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.update_vm_nic({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"nic_index\": 0,\n        \"enabled\": False,\n        \"mirror\": False,\n        \"connect_vlan_id\": \"vlan_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### \u79fb\u9664\u7f51\u5361\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.remove_vm_nic({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"nic_index\": [0, 1]\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### \u865a\u62df\u673a\u8fc1\u79fb\n\n##### \u8fc1\u79fb\u81f3\u6307\u5b9a\u4e3b\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.mig_rate_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"host_id\": \"host_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n```\n\n##### \u81ea\u52a8\u8c03\u5ea6\u5230\u5408\u9002\u7684\u4e3b\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.mig_rate_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n```\n\n### \u865a\u62df\u673a\u7535\u6e90\u64cd\u4f5c\n\n#### \u865a\u62df\u673a\u5f00\u673a:\n\n##### \u6307\u5b9a\u865a\u62df\u673a\u5f00\u673a\uff0c\u81ea\u52a8\u8c03\u5ea6\u5230\u5408\u9002\u7684\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.start_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nopened_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### \u6279\u91cf\u865a\u62df\u673a\u5f00\u673a\uff0c\u81ea\u52a8\u8c03\u5ea6\u5230\u5408\u9002\u7684\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.start_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\n\nopened_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n##### \u5f00\u673a\u81f3\u6307\u5b9a\u4e3b\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.start_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"host_id\": \"host_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nopened_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n#### \u865a\u62df\u673a\u5173\u673a\n\n##### \u6307\u5b9a\u865a\u62df\u673a\u5173\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.shut_down_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nclosed_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### \u6279\u91cf\u865a\u62df\u673a\u5173\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.shut_down_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nclosed_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n##### \u5f3a\u5236\u5173\u673a\u6307\u5b9a\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.force_shut_down_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nclosed_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### \u5f3a\u5236\u5173\u673a\u6279\u91cf\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.force_shut_down_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\n\nclosed_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n#### \u865a\u62df\u673a\u91cd\u542f\n\n##### \u91cd\u542f\u6307\u5b9a\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.restart_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nrestarted_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### \u91cd\u542f\u6279\u91cf\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.restart_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nrestarted_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n##### \u5f3a\u5236\u91cd\u542f\u6307\u5b9a\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.force_restart_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nrestarted_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### \u5f3a\u5236\u91cd\u542f\u6279\u91cf\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.force_restart_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nrestarted_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n#### \u865a\u62df\u673a\u6682\u505c\n\n##### \u6682\u505c\u6307\u5b9a\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.suspend_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nsuspended_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### \u6682\u505c\u6279\u91cf\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.suspend_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nsuspended_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n#### \u865a\u62df\u673a\u6062\u590d\n\n##### \u6062\u590d\u6307\u5b9a\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.resume_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nresumed_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### \u6062\u590d\u6279\u91cf\u865a\u62df\u673a\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.resume_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nresumed_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n### \u5220\u9664\u865a\u62df\u673a\n\n#### \u56de\u6536\u7ad9\n\n##### \u79fb\u5165\u56de\u6536\u7ad9\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_delete_vms = vm_api.move_vm_to_recycle_bin({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_delete_vm.task_id for with_task_delete_vm in with_task_delete_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nvm_moved_to_recycle_bin = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n##### \u4ece\u56de\u6536\u7ad9\u6062\u590d\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_delete_vms = vm_api.recover_vm_from_recycle_bin({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_delete_vm.task_id for with_task_delete_vm in with_task_delete_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nrecovered_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n#### \u6c38\u4e45\u5220\u9664\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_delete_vms = vm_api.delete_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_delete_vm.task_id for with_task_delete_vm in with_task_delete_vms]\n\nwait_tasks(tasks, api_client)\n```\n\n## \u573a\u666f\u793a\u4f8b\n\n### \u865a\u62df\u673a\u5907\u4efd\n\n```python\nfrom cloudtower import ApiClient\nfrom cloudtower.api.vm_api import VmApi\nfrom cloudtower.api.vm_snapshot_api import VmSnapshotApi\nfrom cloudtower.api.iscsi_lun_snapshot_api import IscsiLunSnapshotApi\nfrom cloudtower.models import (\n    ConsistentType,\n    VmToolsStatus\n)\nfrom cloudtower.utils import wait_tasks\n\n\ndef create_vm_snapshot(\n    api_client: ApiClient,\n    target_vm_name: str,\n    target_snapshot_name: str,\n    consistent_type: ConsistentType\n):\n    vm_api = VmApi(api_client)\n    vm_snapshot_api = VmSnapshotApi(api_client)\n    iscsi_lun_snapshot_api = IscsiLunSnapshotApi(api_client)\n    # 1. \u83b7\u53d6\u6240\u9700\u5907\u4efd\u7684\u865a\u62df\u673a\u7684\u4fe1\u606f\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981vm\u7684id\u6765\u6784\u5efa\u521b\u5efasnapshot\u7684\u53c2\u6570\n    vm = vm_api.get_vms({\n        \"where\": {\n            \"name\": target_vm_name\n        },\n        \"first\": 1\n    })\n    # vm \u5df2\u5b89\u88c5\u5e76\u542f\u52a8 VMTools \u65f6\uff0cconsistent_type \u53ef\u4ee5\u4f7f\u7528 FILE_SYSTEM_CONSISTENT \u4ee3\u8868\u6587\u4ef6\u7cfb\u7edf\u4e00\u81f4\u6027\u5feb\u7167\n    if vm.vm_tools_status != VmToolsStatus.RUNNING and consistent_type == ConsistentType.FILE_SYSTEM_CONSISTENT:\n        consistent_type = ConsistentType.CRASH_CONSISTENT\n\n    # 2. \u521b\u5efa\u865a\u62df\u673a\u5feb\u7167\n    snapshots_with_task = vm_snapshot_api.create_vm_snapshot({\n        \"data\": [\n            {\n                \"vm_id\": vm.id,\n                \"name\": target_snapshot_name,\n                \"consistent_type\": consistent_type\n            }\n        ]\n    })\n\n    # 3. \u7b49\u5f85Task\u5b8c\u6210\n    wait_tasks([snapshots_with_task[0].task_id], api_client)\n\n    # 4. \u6839\u636e\u8fd4\u56de\u7684id\u67e5\u8be2\u751f\u6210\u7684\u865a\u62df\u673a\u5feb\u7167\n    snapshot = vm_snapshot_api.get_vm_snapshots({\n        \"where\": {\n            \"id\": snapshots_with_task.data.id\n        }\n    })[0]\n    # 5. \u6839\u636e\u8fd4\u56de\u7684snapshot\u4e2d\u7684vm_disks\u5305\u542b\u4e86\u5feb\u7167\u7684\u865a\u62df\u76d8\u4fe1\u606f\n    # type \u4e3a DISK \u8868\u793a\u5bf9\u5e94\u4e00\u4e2a\u5377\uff0c\u5176\u4e2d\u4f1a\u5305\u542b\u4e00\u4e2a snapshot_local_id \u5219\u8868\u793a\u8be5\u865a\u62df\u5377\u5bf9\u5e94\u7684lun\u5feb\u7167\u7684 local_id\n    # type \u4e3a CD-ROM\u5219\u4ee3\u8868\u4e3a\u88ab\u6302\u8f7d\u7684CD-ROM\uff0c\u4e0d\u4f1a\u4ea7\u751flun\u5feb\u7167\n    lun_snapshot_ids = []\n    for disk in snapshot.vm_disks:\n        if disk.type == \"DISK\":\n            lun_snapshot_ids.append(disk.snapshot_local_id)\n\n    lun_snapshots = iscsi_lun_snapshot_api.get_iscsi_lun_snapshots({\n        \"where\": {\n            \"name_in\": lun_snapshot_ids\n        }\n    })\n\n    return {\n        \"vm_snapshot\": snapshot,\n        \"lun_snapshots\": lun_snapshots\n    }\n\n```\n\n### Dashboard \u6784\u5efa\n\n#### \u5b9a\u4e49\u5de5\u5177\u65b9\u6cd5\n\n```python\nfrom functools import reduce\nfrom datetime import datetime, timedelta\nfrom cloudtower import ApiClient\nfrom cloudtower.configuration import Configuration\nfrom cloudtower.models import SeverityEnum, ClusterType, Hypervisor, DiskType, DiskUsageStatus, DiskHealthStatus\nfrom cloudtower.api import VmApi, ClusterApi, AlertApi, HostApi, DiskApi, ClusterSettingsApi, GlobalSettingsApi\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nbyte_units = [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\"]\nhz_units = [\"Hz\", \"KHz\", \"MHz\", \"GHz\", \"THz\"]\n\n\ndef format_unit(base: int, units, step=1024):\n    if not len(units):\n        raise Exception(\"no unit provided\")\n    if base <= 0:\n        return \"0\" + units[0]\n    for unit in units:\n        if base < step:\n            return \"{:.2f}{}\".format(base, unit)\n        base /= step\n    return \"{:.2f}{}\".format(base, units[-1])\n```\n\n#### \u6784\u5efa\u62a5\u8b66\u4fe1\u606f\n\n```python\ndef build_alerts(api_client: ApiClient, cluster_ids):\n    alert_api = AlertApi(api_client)\n    alerts = alert_api.get_alerts({\n        \"where\": {\n            \"ended\": False,\n            \"cluster\": {\n                \"id_in\": cluster_ids\n            },\n        }\n    })\n    critial_alerts = [\n        alert for alert in alerts if alert.severity == SeverityEnum.CRITICAL]\n    notice_alerts = [\n        alert for alert in alerts if alert.severity == SeverityEnum.NOTICE]\n    info_alerts = [\n        alert for alert in alerts if alert.severity == SeverityEnum.INFO]\n    return {\n        \"critical\": critial_alerts,\n        \"notice\": notice_alerts,\n        \"info\": info_alerts\n    }\n```\n\n#### \u6784\u5efa\u786c\u76d8\u4fe1\u606f\n\n> \u8fd9\u91cc\u4ee5\u673a\u68b0\u786c\u76d8\u4e3a\u4f8b\n\n```python\ndef build_hdd_info(api_client: ApiClient, cluster_ids):\n    disk_api = DiskApi(api_client)\n    disks = disk_api.get_disks({\n        \"where\": {\n            \"host\": {\n                \"cluster\": {\n                    \"id_in\": cluster_ids\n                }\n            }\n        }\n    })\n    hdd = {\n        \"healthy\": 0,\n        \"warning\": 0,\n        \"error\": 0,\n        \"total\": 0,\n    }\n    for disk in disks:\n        if disk.type == DiskType.HDD:\n            if disk.health_status in [DiskHealthStatus.UNHEALTHY, DiskHealthStatus.SUBHEALTHY, DiskHealthStatus.SMART_FAILED]:\n                hdd['error'] += 1\n            elif disk.usage_status in [DiskUsageStatus.UNMOUNTED, DiskUsageStatus.PARTIAL_MOUNTED]:\n                hdd['warning'] += 1\n            else:\n                hdd['healthy'] += 1\n            hdd['total'] += 1\n    return hdd\n```\n\n#### \u6784\u5efa\u6027\u80fd\u6307\u6807\n\n> \u83b7\u53d6\u6307\u5b9a\u96c6\u7fa4\u7684 CPU \u6838\u6570\uff0cCPU \u9891\u7387\u603b\u6570\uff0cCPU \u4f7f\u7528\u7387\uff0c\u5185\u5b58\u603b\u91cf\uff0c\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u5b58\u50a8\u8d44\u6e90\u603b\u91cf\uff0c\u5b58\u50a8\u8d44\u6e90\u5df2\u4f7f\u7528\u91cf\uff0c\u5b58\u50a8\u8d44\u6e90\u5931\u6548\u91cf\u4e0e\u5b58\u50a8\u8d44\u6e90\u53ef\u7528\u91cf\u3002\n\n```python\ndef build_metrics(api_client: ApiClient, clusters, cluster_ids):\n    result = {}\n    host_api = HostApi(api_client)\n    hosts = host_api.get_hosts({\n        \"where\": {\n            \"cluster\": {\n                \"id_in\": cluster_ids\n            }\n        }\n    })\n    cpu = {\n        \"total_cpu_cores\": 0,\n        \"total_cpu_hz\": 0,\n        \"used_cpu_hz\": 0,\n    }\n    memory = {\n        \"total_memory\": 0,\n        \"used_memory\": 0,\n    }\n    storage = {\n        \"total\": 0,\n        \"used\": 0,\n        \"invalid\": 0,\n        \"available\": 0\n    }\n\n    for host in hosts:\n        cluster = next(\n            cluster for cluster in clusters if cluster.id == host.cluster.id)\n        if cluster.hypervisor == Hypervisor.ELF:\n            memory['total_memory'] += 0 if host.total_memory_bytes is None else host.total_memory_bytes\n            memory['used_memory'] += (0 if host.running_pause_vm_memory_bytes is None else host.running_pause_vm_memory_bytes) + \\\n                (0 if host.os_memory_bytes is None else host.os_memory_bytes)\n\n    for cluster in clusters:\n        if cluster.type == ClusterType.SMTX_OS:\n            cpu[\"total_cpu_cores\"] += 0 if cluster.total_cpu_cores is None else cluster.total_cpu_cores\n            cpu[\"total_cpu_hz\"] += 0 if cluster.total_cpu_hz is None else cluster.total_cpu_hz\n            cpu[\"used_cpu_hz\"] += 0 if cluster.used_cpu_hz is None else cluster.used_cpu_hz\n            if cluster.hypervisor == Hypervisor.VMWARE:\n                memory[\"total_memory\"] += 0 if cluster.total_memory_bytes is None else cluster.total_memory_bytes\n                memory[\"used_memory\"] += 0 if cluster.used_memory_bytes is None else cluster.used_memory_bytes\n        storage[\"total\"] += 0 if cluster.total_data_capacity is None else cluster.total_data_capacity\n        storage[\"used\"] += 0 if cluster.used_data_space is None else cluster.used_data_space\n        storage[\"invalid\"] += 0 if cluster.failure_data_space is None else cluster.failure_data_space\n    if len([cluster for cluster in clusters if cluster.type != ClusterType.SMTX_ZBS]) > 1:\n        cpu[\"cpu_usage\"] = \"{:.2f}%\".format(\n            cpu[\"used_cpu_hz\"] / cpu[\"total_cpu_hz\"])\n        cpu[\"total_cpu_hz\"] = format_unit(cpu[\"total_cpu_hz\"], hz_units, 1000)\n        cpu[\"used_cpu_hz\"] = format_unit(cpu[\"used_cpu_hz\"], hz_units, 1000)\n        result['cpu'] = cpu\n        memory[\"memory_usage\"] = \"{:.2f}%\".format(\n            memory[\"used_memory\"] / memory[\"total_memory\"])\n        memory[\"total_memory\"] = format_unit(\n            memory[\"total_memory\"], byte_units)\n        memory[\"used_memory\"] = format_unit(\n            memory[\"used_memory\"], byte_units)\n        result[\"memory\"] = memory\n    storage[\"available\"] = format_unit(\n        storage[\"total\"] - storage[\"used\"] - storage[\"invalid\"], byte_units)\n    storage[\"total\"] = format_unit(storage[\"total\"], byte_units)\n    storage[\"used\"] = format_unit(storage[\"used\"], byte_units)\n    storage[\"invalid\"] = format_unit(storage[\"invalid\"], byte_units)\n    result[\"storage\"] = storage\n    return result\n```\n\n#### \u6784\u5efa Dashboard\n\n```python\ndef build_dashboard(api_client: ApiClient, datacenter_id: str = None, cluster_id: str = None):\n    result = {}\n    cluster_api = ClusterApi(api_client)\n    clusters = cluster_api.get_clusters({\n        \"where\": {\"id\": cluster_id} if cluster_id is not None else {\"datacenters_some\": {\"id\": datacenter_id}} if datacenter_id is not None else None\n    })\n    cluster_ids = [cluster.id for cluster in clusters]\n\n    result[\"alerts\"] = build_alerts(api_client, cluster_ids)\n    result[\"hdd\"] = build_hdd_info(api_client, cluster_ids)\n    metric = build_metrics(api_client, clusters, cluster_ids)\n    if \"cpu\" in metric:\n        result[\"cpu\"] = metric[\"cpu\"]\n    if \"memory\" in metric:\n        result[\"memory\"] = metric[\"memory\"]\n    if \"storage\" in metric:\n        result[\"storage\"] = metric[\"storage\"]\n    return result\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
            "keywords": "OpenAPI,OpenAPI-Generator,CloudTower APIs",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cloudtower-sdk",
            "package_url": "https://pypi.org/project/cloudtower-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cloudtower-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
            },
            "release_url": "https://pypi.org/project/cloudtower-sdk/2.5.0/",
            "requires_dist": [
                "urllib3 (>=1.25.3)",
                "six (>=1.10)",
                "python-dateutil"
            ],
            "requires_python": "",
            "summary": "CloudTower APIs",
            "version": "2.5.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16286101,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "f2d0a24ebb7351b01263bef88a5d8b59cf18e3c60419b00bc6f516339dd3b88c",
                    "md5": "8f42c3d9c22ef1910565385166b7babd",
                    "sha256": "e490cd38b9854d656bdad066d9e76a160442b6f21f3d5681e39e15310e9ba925"
                },
                "downloads": -1,
                "filename": "cloudtower_sdk-2.5.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8f42c3d9c22ef1910565385166b7babd",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 3120940,
                "upload_time": "2023-01-03T06:32:41",
                "upload_time_iso_8601": "2023-01-03T06:32:41.593071Z",
                "url": "https://files.pythonhosted.org/packages/f2/d0/a24ebb7351b01263bef88a5d8b59cf18e3c60419b00bc6f516339dd3b88c/cloudtower_sdk-2.5.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "3fd333fc9ef67e3911930aeff8618f260930ba57f74515505fc5ccb8b7cd17e1",
                    "md5": "dda0712e132587dfd45f4be19421c6ea",
                    "sha256": "5b25809a9743497c801ac2d724f8e769bd8202373bd1c5fe974798839534c651"
                },
                "downloads": -1,
                "filename": "cloudtower-sdk-2.5.0.tar.gz",
                "has_sig": false,
                "md5_digest": "dda0712e132587dfd45f4be19421c6ea",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1349277,
                "upload_time": "2023-01-03T06:32:44",
                "upload_time_iso_8601": "2023-01-03T06:32:44.659179Z",
                "url": "https://files.pythonhosted.org/packages/3f/d3/33fc9ef67e3911930aeff8618f260930ba57f74515505fc5ccb8b7cd17e1/cloudtower-sdk-2.5.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
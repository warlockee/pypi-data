{
    "0.0.1": {
        "info": {
            "author": "Raphael Reme",
            "author_email": "raphaelreme-dev@protonmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/raphaelreme/torch-resnet",
            "keywords": "Deep Learning,PyTorch,Resnet",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "torch-resnet",
            "package_url": "https://pypi.org/project/torch-resnet/",
            "platform": null,
            "project_url": "https://pypi.org/project/torch-resnet/",
            "project_urls": {
                "Homepage": "https://github.com/raphaelreme/torch-resnet"
            },
            "release_url": "https://pypi.org/project/torch-resnet/0.0.1/",
            "requires_dist": [
                "torch"
            ],
            "requires_python": ">=3.6",
            "summary": "Resnet implementation in pytorch",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16315240,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "83cccb08e7bf11d68463cb2d3354eda365ca97fd69e1b7300dac00f45e137023",
                    "md5": "53c771bf14c99cb31ccbaebd08f91c26",
                    "sha256": "cc6b972a76131322752dc21b3e432c462a6d0b071f73f1b608271ce40d3602c6"
                },
                "downloads": -1,
                "filename": "torch_resnet-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "53c771bf14c99cb31ccbaebd08f91c26",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 10195,
                "upload_time": "2022-11-21T17:17:05",
                "upload_time_iso_8601": "2022-11-21T17:17:05.989648Z",
                "url": "https://files.pythonhosted.org/packages/83/cc/cb08e7bf11d68463cb2d3354eda365ca97fd69e1b7300dac00f45e137023/torch_resnet-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "5dcbf9346b3ce876d45349fa6a7684e75d02da6c88b93f58caa67090c2c4daf2",
                    "md5": "f44c0552525b3244c5c8f56ea99fb979",
                    "sha256": "b059b03ea12a4f8c1aafcca55cbfdc2bd22fecf5fb674c5a80d8ffdecf5305a0"
                },
                "downloads": -1,
                "filename": "torch-resnet-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "f44c0552525b3244c5c8f56ea99fb979",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 7990,
                "upload_time": "2022-11-21T17:17:07",
                "upload_time_iso_8601": "2022-11-21T17:17:07.651541Z",
                "url": "https://files.pythonhosted.org/packages/5d/cb/f9346b3ce876d45349fa6a7684e75d02da6c88b93f58caa67090c2c4daf2/torch-resnet-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2.dev0": {
        "info": {
            "author": "Raphael Reme",
            "author_email": "raphaelreme-dev@protonmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/raphaelreme/torch-resnet",
            "keywords": "Deep Learning,PyTorch,Resnet",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "torch-resnet",
            "package_url": "https://pypi.org/project/torch-resnet/",
            "platform": null,
            "project_url": "https://pypi.org/project/torch-resnet/",
            "project_urls": {
                "Homepage": "https://github.com/raphaelreme/torch-resnet"
            },
            "release_url": "https://pypi.org/project/torch-resnet/0.0.2.dev0/",
            "requires_dist": [
                "torch"
            ],
            "requires_python": ">=3.6",
            "summary": "Resnet implementation in pytorch",
            "version": "0.0.2.dev0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16315240,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "b8289d8c289dc0e82169b00ce2a1a011c319e2c2a625fb5110f5052f463eb26a",
                    "md5": "4868921bf0ff2efc280401d5cefefb7b",
                    "sha256": "3c6c02da09a330b1160db68ff6c3b3e06abed9f03e2f0d87e6fc7885b93a2e07"
                },
                "downloads": -1,
                "filename": "torch_resnet-0.0.2.dev0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4868921bf0ff2efc280401d5cefefb7b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 13953,
                "upload_time": "2022-12-05T10:44:40",
                "upload_time_iso_8601": "2022-12-05T10:44:40.603312Z",
                "url": "https://files.pythonhosted.org/packages/b8/28/9d8c289dc0e82169b00ce2a1a011c319e2c2a625fb5110f5052f463eb26a/torch_resnet-0.0.2.dev0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "43156910189b7bb7980f0bf06c64ee5afa06f9190398baea0ed630aac840622b",
                    "md5": "8282dc515cb5402a8f21c641a925627e",
                    "sha256": "b9a1e071aab643a1db97455f7b1d6b2486b49fb03d0d785880bcaa565857400a"
                },
                "downloads": -1,
                "filename": "torch-resnet-0.0.2.dev0.tar.gz",
                "has_sig": false,
                "md5_digest": "8282dc515cb5402a8f21c641a925627e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 13771,
                "upload_time": "2022-12-05T10:44:42",
                "upload_time_iso_8601": "2022-12-05T10:44:42.615092Z",
                "url": "https://files.pythonhosted.org/packages/43/15/6910189b7bb7980f0bf06c64ee5afa06f9190398baea0ed630aac840622b/torch-resnet-0.0.2.dev0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2.dev1": {
        "info": {
            "author": "Raphael Reme",
            "author_email": "raphaelreme-dev@protonmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# torch-resnet\n\nUnified torch implementation of resnets with or without pre-activation/width.\n\nWe implement (pre-act) resnets for ImageNet for each size described in [1] and [2] (18, 34, 50, 101, 152, 200).\nWe also implement (pre-act) resnets for Cifar for each size described in [1] and [2] (20, 32, 44, 56, 110, 164, 1001, 1202).\n\nFollowing what is used in the literature we also propose a version of the ImageNet resnets for Cifar10 (See SimClr paper https://arxiv.org/pdf/2002.05709.pdf). To adapt the architectures\nto smaller images (32x32), the initial layers conv 7x7 and max_pool are replaced by a simple conv 3x3. The other layers/parameters are kept, resulting in a variant of wide-resnets for Cifar.\n\nFinally, we implement wide resnets (with or without pre-activation) for Cifar and ImageNet following [3].\n\nAdditional models can easily be created using the default class ResNet or PreActResNet.\nIt is also possible to create your own block following the same model as those implemented.\n\nWe use by default projection shortcuts whenever they are required (option B from [1]) but we have also implemented option A (IdentityShortcut) and C (FullProjectionShortcut), and more can be added following the same template. For instance we introduce our own shortcut: ConvolutionShortcut. It does a 3x3 convolution on the shortcut path when dimensions do not match (vs the 1x1 conv of the ProjectionShortcut).\n\nWe have validated our implementation by testing it on Cifar10/Cifar100 (See Results).\n\n## Install\n\n```bash\n$ pip install torch-resnet\n```\n\n\n## Getting started\n\n```python\nimport torch\n\nimport torch_resnet\nfrom torch_resnet.utils import count_layer, count_parameters\n\nmodel = torch_resnet.PreActResNet50()  # Build a backbone Resnet50 with pre-activation for ImageNet\nmodel.set_head(nn.Linear(model.out_planes, 1000))  # Set a final linear head\n\ncount_layers(model)  # -> 54 (In the original paper they do not count shortcut/downsampling layers)\ncount_parameters(model) / 10**6  # Nb. parameters in millions\n\nout = model(torch.randn(1, 3, 224, 224))\n```\n\nSee `example/example.py` for a more complete example.\n\n## Results\n\nResults obtained with `example/example.py` following closely papers indications. Most are reported as mean $\\pm$ std (on 5 runs with different seed). If a single number is reported, only a single run has been done due to computational time. All training are done with Automatique Mixed Precision.\n\nFor all resnets and pre-act resnets, the learning rate is scheduled following [1] and [2] with a warm-up in the 400 first iterations at 0.01. The initial learning rate is then set at 0.1 and decreased by 10 at 32k and 48k\niterations. Training is stopped after 160 epochs (~62.5k iterations).\n\nContrary to [1], the training set is not split in 45k/5k to perform validation, and we directly took the final model to evaluate the performances on the\ntest set (No validation is done). Also on Cifar [1] is using option A (Identity shortcut), whereas we use the default option B (Projection shortcut when required).\n\nFollow the link to access the training curves for each model and each seed used (111, 222, 333, 444, 555). (Upload in coming...)\n\n\n|Model                |Params|Cifar10                                                                         |Cifar10 (paper)    |Cifar100                                                                      |Cifar100 (paper)    |\n|:-                   |:---- |:-----                                                                          |:-----             |:-----                                                                        |:----               |\n|ResNet20             |0.3M  |[8.64 $\\pm$ 0.16](https://tensorboard.dev/experiment/Wp0BnqgsQAiNlda6jbHyNw)    |8.75 [1]           |33.23 $\\pm$ 0.32                                                              |xxx                 |\n|ResNet32             |0.5M  |[7.64 $\\pm$ 0.23](https://tensorboard.dev/experiment/jS3iZpYnSXe0JWbmdmsJRg)    |7.51 [1]           |31.64 $\\pm$ 0.54                                                              |xxx                 |\n|ResNet44             |0.7M  |[7.47 $\\pm$ 0.19](https://tensorboard.dev/experiment/Vp32WK2GTEu6EkyTdAc9gg)    |7.17 [1]           |30.88 $\\pm$ 0.22                                                              |xxx                 |\n|ResNet56             |0.9M  |[7.04 $\\pm$ 0.26](https://tensorboard.dev/experiment/I6RV0GFqQni9LnWxRnBFWw)    |6.97 [1]           |30.15 $\\pm$ 0.29                                                              |xxx                 |\n|ResNet110            |1.7M  |[6.60 $\\pm$ 0.09](https://tensorboard.dev/experiment/oh0WxpW0Sw6Yrq5vRBWbVg)    |6.61 $\\pm$ 0.16 [1]|28.99 $\\pm$ 0.22                                                              |xxx                 |\n|ResNet164            |1.7M  |[**5.97** $\\pm$ 0.20](https://tensorboard.dev/experiment/obTXYd9NSx2xErmzvHwzjw)|xxx                |**25.79** $\\pm$ 0.51                                                          |25.16 [2]           |\n|ResNet1001*          |10.3M |[7.95](https://tensorboard.dev/experiment/pZCAbqaoQR2I2T9mLGZZzg)               |xxx                |29.94                                                                         |27.82 [2]           |\n|ResNet1202           |19.4M |[7.90](https://tensorboard.dev/experiment/dUMT2GoDR7GgDgnun6oDLA)               |7.93 [1]           |33.20                                                                         |xxx                 |\n|PreActResNet20       |0.3M  |[8.61 $\\pm$ 0.23](https://tensorboard.dev/experiment/RlKrhoLnRA6ptZcns3R7fA)    |xxx                |33.40 $\\pm$ 0.30                                                              |xxx                 |\n|PreActResNet32       |0.5M  |[7.76 $\\pm$ 0.10](https://tensorboard.dev/experiment/LcNVsEdzSBKeZJygGBTpEw)    |xxx                |xx.xx $\\pm$ x.xx                                                              |xxx                 |\n|PreActResNet44       |0.7M  |[7.63 $\\pm$ 0.10](https://tensorboard.dev/experiment/I4yJquNxQ8eDdgKcxUDE7A)    |xxx                |30.78 $\\pm$ 0.17                                                              |xxx                 |\n|PreActResNet56       |0.9M  |[7.42 $\\pm$ 0.13](https://tensorboard.dev/experiment/XdcNemL8Ta2WbVXWq1aTeg)    |xxx                |30.18 $\\pm$ 0.39                                                              |xxx                 |\n|PreActResNet110      |1.7M  |[6.79 $\\pm$ 0.12](https://tensorboard.dev/experiment/TpDZKZmqTlS6NyFVL1ebAQ)    |xxx                |28.45 $\\pm$ 0.25                                                              |xxx                 |\n|PreActResNet164      |1.7M  |[5.61 $\\pm$ 0.16](https://tensorboard.dev/experiment/L4V78FG7T2a4OYxAGnN7jQ)    |5.46 [2]           |25.23 $\\pm$ 0.21                                                              |24.33 [2]           |\n|PreActResNet1001     |10.3M |[**4.92**](https://tensorboard.dev/experiment/VUM0SW35Rc24wasG8S79GA)           |4.89 $\\pm$ 0.14 [2]|**23.18**                                                                     |22.68 $\\pm$ 0.22 [2]|\n|PreActResNet1202     |19.4M |[6.66](https://tensorboard.dev/experiment/e7WPBDcbRwuZRJReQsoPFg)               |xxx                |27.65                                                                         |xxx                 |\n|ResNet18-small       |11.2M |[5.88 $\\pm$ 0.15](https://tensorboard.dev/experiment/CeMWgwkzSwOsgQK79422sg)    |xxx                |26.74 $\\pm$ 0.42                                                              |xxx                 |\n|ResNet34-small       |21.3M |[5.50 $\\pm$ 0.17](https://tensorboard.dev/experiment/kIDACG9AQreEGmQWNy9BgA)    |xxx                |25.34 $\\pm$ 0.29                                                              |xxx                 |\n|ResNet50-small       |23.5M |[5.86 $\\pm$ 0.30](https://tensorboard.dev/experiment/5aybpi2SRgqNyyqk6G31yw)    |xxx                |25.20 $\\pm$ 0.89                                                              |xxx                 |\n|ResNet101-small      |42.5M |[**5.45** $\\pm$ 0.14](https://tensorboard.dev/experiment/oCVDgyw6QE2Te14IBg73HA)|xxx                |**23.93** $\\pm$ 0.56                                                          |xxx                 |\n|PreActResNet18-small |11.2M |[5.65 $\\pm$ 0.12](https://tensorboard.dev/experiment/0vnxKYlFR3yTPXaueKgyOg)    |xxx                |25.46 $\\pm$ 0.34                                                              |xxx                 |\n|PreActResNet34-small |21.3M |[5.29 $\\pm$ 0.17](https://tensorboard.dev/experiment/eC8EEvTmSa6AQzNP7rRAnQ)    |xxx                |24.75 $\\pm$ 0.31                                                              |xxx                 |\n|PreActResNet50-small |23.5M |[5.83 $\\pm$ 0.47](https://tensorboard.dev/experiment/Nv6afoQgT1u29nwIE7S7QQ)    |xxx                |23.97 $\\pm$ 0.36                                                              |xxx                 |\n|PreActResNet101-small|42.5M |[**5.18** $\\pm$ 0.11](https://tensorboard.dev/experiment/ExFlD37jSPuguDQnjBS5gQ)|xxx                |**23.69** $\\pm$ 0.41                                                          |xxx                 |\n\n\\* ResNet1001 cannot be trained with AMP (due to training instability) thus it was trained without AMP. Also, please note that AMP usually leads to slightly worst performances, therefore most of our results here are probably underestimated.\n\nNote that in [2] and in most github implementation, the test set is used as a validation set (taking the max acc reached on it as the final result, as done in the [official implem](https://github.com/facebookarchive/fb.resnet.torch) [2]), obviously leading to falsely better performances.  When dropping AMP and taking the max value rather than the last value, we also reach better performances. (We only tested on PreActResNet164 and PreActResNet1001 where results where slighlty behind the paper).\n\n|Model (No Amp, best)|Params|Cifar100                                                                      |Cifar100 (paper)    |\n|:-                  |:---- |:-----                                                                        |:----               |\n|PreActResNet164     |1.7M  |24.83 $\\pm$ 0.16                                                              |24.33 [2]           |\n|PreActResNet1001    |10.3M |22.86                                                                         |22.68 $\\pm$ 0.22 [2]|\n\n\nWe quickly tried our implementations for shortcuts (with AMP and last model evalutation)\n\n\n|Model                    |Params|Cifar10                                                                      |Cifar100             |\n|:-                       |:---- |:-----                                                                       |:-                   |\n|ResNet20 (Proj)          |0.27M |[8.64 $\\pm$ 0.16](https://tensorboard.dev/experiment/Wp0BnqgsQAiNlda6jbHyNw) |xxx                  |\n|ResNet20-Id              |0.27M |8.65 $\\pm$ 0.08                                                              |xxx                  |\n|ResNet20-FullProj        |0.28M |8.22 $\\pm$ 0.14                                                              |xxx                  |\n|ResNet20-Conv            |0.29M |8.41 $\\pm$ 0.19                                                              |xxx                  |\n|PreActResNet164 (Proj)   |1.70M |[5.61 $\\pm$ 0.16](https://tensorboard.dev/experiment/L4V78FG7T2a4OYxAGnN7jQ) |25.23 $\\pm$ 0.21     |\n|PreActResNet164-Id       |1.68M |5.52 $\\pm$ 0.14                                                              |24.71 $\\pm$ 0.12     |\n|PreActResNet164-FullProj |3.19M |Failed (90.0)                                                                |Failed (99.0)        |\n|PreActResNet164-Conv     |2.06M |5.55 $\\pm$ 0.18                                                              |23.86 $\\pm$ 0.16     |\n\nMore works are needed to fully investigate shortcuts but intuitevely and from the few experiments we've done, it seems that they all work correctly. FullProjectionShortcut\nshould not be used as it increases instability (no more true shortcuts) when training. The introduced convolutional shortcut (3x3 conv instead of 1x1) seems to\nhelp on Cifar100. Finally it seems that with Identity shortcut for PreActResNet164 (+ No Amp and best model evaluation) as in [2], we would reach around the same\nperformances of 24.33 on Cifar100.\n\n## References\n\n* [1] Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun\n    Deep Residual Learning for Image Recognition. https://arxiv.org/pdf/1512.03385\n* [2] Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun\n    Identity Mappings in Deep Residual Networks. https://arxiv.org/pdf/1603.05027\n* [3] Sergey Zagoruyko, Nikos Komodakis\n    Wide Residual Networks. https://arxiv.org/pdf/1605.07146\n\n## Build and Deploy\n\n```bash\n$ python -m build\n$ python -m twine upload dist/*\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/raphaelreme/torch-resnet",
            "keywords": "Deep Learning,PyTorch,Resnet",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "torch-resnet",
            "package_url": "https://pypi.org/project/torch-resnet/",
            "platform": null,
            "project_url": "https://pypi.org/project/torch-resnet/",
            "project_urls": {
                "Homepage": "https://github.com/raphaelreme/torch-resnet"
            },
            "release_url": "https://pypi.org/project/torch-resnet/0.0.2.dev1/",
            "requires_dist": [
                "torch"
            ],
            "requires_python": ">=3.6",
            "summary": "Resnet implementation in pytorch",
            "version": "0.0.2.dev1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16315240,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "2d0d07cce553e19deac23b9fc73e135fb2915c4a9d5003e60901e37751db638e",
                    "md5": "fdf383de173dea8c3bebc23939c23c36",
                    "sha256": "f7bf94221e1314aded5b79527d45d8d9b8f8e3e772aba0b9c9e1389bc3482246"
                },
                "downloads": -1,
                "filename": "torch_resnet-0.0.2.dev1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fdf383de173dea8c3bebc23939c23c36",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 14685,
                "upload_time": "2023-01-05T11:26:20",
                "upload_time_iso_8601": "2023-01-05T11:26:20.224671Z",
                "url": "https://files.pythonhosted.org/packages/2d/0d/07cce553e19deac23b9fc73e135fb2915c4a9d5003e60901e37751db638e/torch_resnet-0.0.2.dev1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "5987b630e05b66e2e2e6b0dc2120bbaa87084c5f08ee9c822eebea0d22025f16",
                    "md5": "53efe75638aaa721ab38c821d56d629c",
                    "sha256": "4b4f6e7962c30d35790313eb14930ab8e6c7c082be9a5278c6723f274b355504"
                },
                "downloads": -1,
                "filename": "torch-resnet-0.0.2.dev1.tar.gz",
                "has_sig": false,
                "md5_digest": "53efe75638aaa721ab38c821d56d629c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 15106,
                "upload_time": "2023-01-05T11:26:21",
                "upload_time_iso_8601": "2023-01-05T11:26:21.389837Z",
                "url": "https://files.pythonhosted.org/packages/59/87/b630e05b66e2e2e6b0dc2120bbaa87084c5f08ee9c822eebea0d22025f16/torch-resnet-0.0.2.dev1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
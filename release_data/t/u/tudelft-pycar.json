{
    "0.0.1.dev0": {
        "info": {
            "author": "",
            "author_email": "Anne Stijns <anstijns@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# EPO4 Python\n\nThis repository contains Python abstractions, serial, and audio handlers for EPO4.\n\n\n## Python Environment\n\nPython environments / virtual environments are used for project isolation and dependency management.\nThey can be set up as to specify a specific Python version to the project, and install packages locally to the virtual\nenvironment directory. Consequently, the dependencies (or packages) are isolated from the global environment, avoiding \nconflicts between dependency requirements of different project and allowing for the installation of a specific \ndependency's version.\n\nThere exist several Python tools performing all or part of these function, most notably `virtualenv`, `pyenv`, and \n`pipenv`; `virtualenv` allows of packages in a virtual environment, `pyenv` allows for several Python versions to be \ninstalled and run, `pipenv` is a merge between the preceding two tools. More introductory information is found on \n*Flimm's* thread titled [What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, \netc?](https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe). \nIt is highly recommended becoming familiar with some of these tools as they are highly used in academic and private settings.\n\nIn the EPO4 project, the `pipenv` tool is used. When an environment is created, two files named `Pipfile` and \n`Pipfile.lock` are also created in the project's directory. A third file named `requirements.txt` can be used to create \nan environment, however, `Pipfile` always precedes the requirements file and will be used in the creation of an \nenvironment if available in the target directory. `Pipfile` has a `[[source]]` section specifying the repository \ncontaining the Python packages, a `[packages]` section specifying the packages and their respective version requirements,\n, a `[dev-packages]` section specifying packages for development (not installed on the machines of package users), and \na `[requires]` section specifying Python's version. `Pipfile.lock` contains information regarding the installed packages\nand package dependencies. The environment is created in a directory outside the project. For more information on `pipenv` \nread [Pipenv: Python Dev Workflow for Humans](https://pipenv.pypa.io/en/latest/) and \n[Basic Usage of Pipenv](https://pipenv.pypa.io/en/latest/basics/).\n\n### Pipenv Setup (Windows)\nFirst, open a command prompt and make sure `pip` is installed.\n```\n>pip --version\n```\nNote that if `pip` is not recognized, it is possible that `pip3` is installed (with Python 3); run the same command but \nuse `pip3` instead. In case `pip3` is also not recognized then install it.\n\nNext, install `pipenv` (note that if `pip3` is installed it should be used instead of `pip`).\n```\n>pip install --user pipenv\n```\n\nNavigate to the repository's directory and install environment.\n```\n>pipenv install\n```\n\nAfter completing these steps, the project's python environment should be installed with the specified Python version\nand required packages.\n\nTo use the environment (run scripts / install additional packages), it should be first activated using the `pipenv` \nshell command.\n```\n>pipenv shell\n```\nA string containing `(epo4-python-'hash')` is appended before the directory. Scripts should be run from inside the \nenvironment.\n\n### Pipenv Setup (MacOS)\nTODO: Write instructions for MacOS.\n\n### Pipenv Setup (Linux)\nTODO: Write instructions for Linux.\n\n### PyCharm Setup\nTo run scripts directly from PyCharm (and for additional functionality). The environment's interpreter can be chosen as\nthe default interpreter for the project. Open a command prompt and navigate to the project's directory. Use the `pipenv` \ncommand to get the installation directory of the environment.\n```\n>pipenv --venv\n```\nCopy the directory's location, and in PyCharm go to **File - Settings - Project: epo4-python - Python Interpreter**; \nthen go to the drop-down menu, **Show All**, go to the plus sign, **Pipenv Environment**, at the **Base Interpreter** \nselect the navigation option, go to the directory you copied earlier, enter **Scripts**, select **python.exe**, click \n**OK**, and deselect **Install packages from Pipfile**; save the settings.\n\n### Package Dependencies\nThe EPO4 project uses Python 3.10; the following packages are specified in the `Pipfile`.\n\n| Package     | Version |\n|-------------|---------|\n| pyqt5       | 5.15.7  |\n| pyqt5-stubs | 5.15.6  |\n| matplotlib  |         |\n| numpy       |         |\n| pyaudio     | 0.2.12  |\n| pyserial    | 3.5     |\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "tudelft-pycar",
            "package_url": "https://pypi.org/project/tudelft-pycar/",
            "platform": null,
            "project_url": "https://pypi.org/project/tudelft-pycar/",
            "project_urls": {
                "Bug Tracker": "https://gitlab.com/dstijns/epo4-python/-/issues",
                "Homepage": "https://gitlab.com/dstijns/epo4-python/"
            },
            "release_url": "https://pypi.org/project/tudelft-pycar/0.0.1.dev0/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Support library for the 'EPO-4: \"KITT\" autonomous driving challenge' at Delft University of Technology",
            "version": "0.0.1.dev0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16279029,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6ebca9c56a1e24c32e0089702e2391e1",
                    "sha256": "e3cd8e4f73f6a24d631c70373ea6d623fd893ed4213bdfed54b8c9d10b038a07"
                },
                "downloads": -1,
                "filename": "tudelft_pycar-0.0.1.dev0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6ebca9c56a1e24c32e0089702e2391e1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 3995,
                "upload_time": "2023-01-02T13:19:07",
                "upload_time_iso_8601": "2023-01-02T13:19:07.323129Z",
                "url": "https://files.pythonhosted.org/packages/0a/94/071712e45e09e05ba9f63c7a9b8fc3beab628203be40030be7d273ae7f61/tudelft_pycar-0.0.1.dev0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5ad428730781954b2d276b0438343cfc",
                    "sha256": "bd6a33b7593f7b5df075e9530d3b90938cfc8b038e04f018808303a43157784d"
                },
                "downloads": -1,
                "filename": "tudelft_pycar-0.0.1.dev0.tar.gz",
                "has_sig": false,
                "md5_digest": "5ad428730781954b2d276b0438343cfc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8412452,
                "upload_time": "2023-01-02T13:19:10",
                "upload_time_iso_8601": "2023-01-02T13:19:10.172852Z",
                "url": "https://files.pythonhosted.org/packages/af/22/5300860fd88b7015aeb75d97f43d82838779ff2eb3c668a6ba7b6cf89cc6/tudelft_pycar-0.0.1.dev0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
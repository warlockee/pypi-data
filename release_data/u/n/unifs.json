{
    "1.0.0": {
        "info": {
            "author": "candidtim",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: End Users/Desktop",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Desktop Environment :: File Managers",
                "Topic :: System :: Filesystems",
                "Topic :: Utilities"
            ],
            "description": "# unifs\n\nUnified FS-like CLI for S3, GCS, ADLS, HDFS, SMB, Dropbox, Google Drive, and\ndozens of other [fsspec](https://github.com/fsspec)-supported \"file systems\".\n\n    unifs conf use my-s3-bucket  # or a dropbox acount, an ftp server, etc.\n    unifs ls -l /\n    unifs mv /foo.txt /bar.txt\n    unifs download /bar.txt ~/Downloads/local.copy.txt\n\n`unifs` uses the term \"file system\" in an open sense for anything that can be\nrepresented as a file storage and be manipulated with the commands one would\nusually expect, such as `ls`, `cat`, and `mv` for example, as well as commands\nto upload and download the data when working with remote back-ends (e.g., a\ncloud-based BLOB storage).\n\n`unifs` supports multiple back-ends, such as a local file system, (S)FTP,\nGoogle Drive, various blob storage such as S3, GCS, ADLS, and dozens of other\nimplementations. It is based on `fsspec` and it supports any available `fsspec`\nimplementation. Use `unifs impl list` to list supported protocols, but know\nthat other protocols can be added, including any custom implementations users\nmay provide.\n\n`unifs` is different from FUSE implementations in that it doesn't mount a file\nsystem. Instead, it provides a unified CLI that uses target back-end API to\nexecute the issued commands.\n\n## Installation\n\n`unifs` is a Python package:\n\n    pip install unifs\n\nDefault `unifs` installation only supports a few basic protocols (e.g., a local\nfile system). To support other protocols you may need to install their\nimplementation packages. Because there are too many, `unifs` doesn't install\nthem for you by default, but it will tell which packages are missing if you\nattempt to use a protocol that is not supported out of the box.\n\nFor example, to add the support for the GCS:\n\n    pip install gcsfs\n\nMake sure to install the additional packages to the same (virtual) environment\nwhere `unifs` is installed.\n\nTo list known implementations and their prerequisites, use:\n\n    unifs impl list\n    unifs impl info NAME\n\nTo avoid conflicts with other Python packages, it is recommended to install\nthis application into a dedicated virtual environment. For example, you may use\n`pipx`, or create a virtual environment manually. At very least, install with a\n`--user` option (`pip install --user unifs`).\n\n## Quick start\n\nBy default, `unifs` will use the local file system and will behave much like\nissuing the similar commands directly in the shell:\n\n    unifs ls -l /\n    unifs cat /tmp/foo.txt\n    unifs mv /tmp/foo.tx /tmp/bar.txt\n    unifs --help\n\nYou need to configure `unifs` to let it know about other file systems you will\nuse.\n\n## Configuration\n\nYou may either modify the configuration file, or use `unifs conf` command to\nmanipulate it.\n\n### Using `unifs conf`\n\nGet the list of configured file systems (currently active one is highlighted):\n\n    unifs conf list\n\nSet the active file system:\n\n    unifs conf use NAME\n\n### Configuration file\n\n`unifs` configuration is stored in the default OS configuration directory. You\ncan obtain a config file path with:\n\n    unifs conf path\n\nIf you didn't change your defualt OS settings, most likely it will\nbe:\n\n    ~/.config/unifs/config.toml  # Linux\n    ~/Library/Application Support/unifs/config.toml  # MacOS\n    ~\\AppData\\Local\\unifs\\Config\\config.toml # Windows\n\nConfiguration file is a TOML file that consists of:\n\n - a single `[unifs]` section where the currently active file system is set\n - any number of `[unifs.fs.NAME]` sections that declare the file systems\n\nExample:\n\n    [unifs]\n    fs = local\n\n    [unifs.fs.local]\n    protocol = file\n    auto_mkdir = false\n\nFile system configuration is a set of key-value pairs that correspond exactly\nto the key-worded arguments expected by the `fsspec` implementation. `protocol`\nvalue is mandatory and is used to select the implementation, all other values\nare passed to the specific implementation. Use `unifs impl info NAME` to the\nlist of accepted parameters for any protocol.\n\nFor example, for a GCS bucket:\n\n    [unifs.fs.my-gcs-bucket]\n    protocol = gcs\n    project = \"my-gcp-project\"\n    token = \"/path/to/token.json\"\n\n## Status\n\nAvailable `unifs` features are considered stable. `unifs` is being actively\ndeveloped and more features are coming.\n\n## Word of caution\n\nBeware that `unifs` may change data in the target back-end. Among other things,\nit can move or remove (erase, without a possibility to restore) the data, if it\nis instructed to do so by a user. Remember that `unifs` is only a command-line\nlayer between you as a user and the target file storage, and `unifs` only does\nwhat the user instructs it to do.\n\n`unifs` tries its best to prevent errors (e.g., uses interactive confirmations\nfor some commands), but ultimately **the user is responsible** for the\noperations performed on files or BLOBs. Use at your own risk.\n\n`unifs` is designed to be used on a workstation in an interactive shell, not on\na server, not in headless mode.\n\n## License\n\nMIT License. See the LICENSE document in the root of the source code\nrepository.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "fs,shell",
            "license": "MIT License  Copyright (c) 2023 candidtim  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
            "maintainer": "",
            "maintainer_email": "",
            "name": "unifs",
            "package_url": "https://pypi.org/project/unifs/",
            "platform": null,
            "project_url": "https://pypi.org/project/unifs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/unifs/1.0.0/",
            "requires_dist": [
                "click (<9,>=8.1.3)",
                "fsspec (>=2022.11)",
                "tomli-w (<2,>=1)",
                "appdirs (<2,>=1.4.4)",
                "tomli (<3,>=2.0.1) ; python_version < \"3.11\"",
                "pytest (<8,>=7) ; extra == 'dev'",
                "pytest-cov (<5,>=4) ; extra == 'dev'",
                "coverage (<8,>=7) ; extra == 'dev'",
                "flake8 (<5,>=4) ; extra == 'dev'",
                "black (<23,>=22.6.0) ; extra == 'dev'",
                "isort (<6,>=5.10.1) ; extra == 'dev'",
                "pyright (<2,>=1.1.286) ; extra == 'dev'"
            ],
            "requires_python": ">=3.7",
            "summary": "Unified FS-like CLI for S3, GCS, ADLS, HDFS, SMB, Dropbox, Google Drive, and dozens of other fsspec-supported file systems",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16309706,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "ec1bb66ae2b9c1b2b5795347e31671a0080a4dd4171bc56a85abf6e3f900c971",
                    "md5": "cf117d0ce9243b79e7d6f3868c2573d5",
                    "sha256": "428276a7e267a619c731b316d3c08d9fa014b9485364ff4c79543bc34c543814"
                },
                "downloads": -1,
                "filename": "unifs-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cf117d0ce9243b79e7d6f3868c2573d5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 9020,
                "upload_time": "2023-01-04T23:41:00",
                "upload_time_iso_8601": "2023-01-04T23:41:00.153596Z",
                "url": "https://files.pythonhosted.org/packages/ec/1b/b66ae2b9c1b2b5795347e31671a0080a4dd4171bc56a85abf6e3f900c971/unifs-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
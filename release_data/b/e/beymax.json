{
    "0.0.1": {
        "info": {
            "author": "Aaron Graubert",
            "author_email": "aaron@graubert.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Framework :: AsyncIO",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3 :: Only",
                "Topic :: Communications :: Chat",
                "Topic :: Internet",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Topic :: Utilities"
            ],
            "description": "# Beymax API\n\nA high-level, functional-focused wrapper to [discord.py](https://discordpy.readthedocs.io/en/stable/)\n\n## About\n\nThis package started off as a personal discord bot, but as it grew in scope, I found the need to add my own utilities\non top of the wonderful [discord.py](https://discordpy.readthedocs.io/en/stable/) by GitHub user Rapptz.\nBeymax aims to reduce the amount of boilerplate needed to create a functioning Discord bot, while also exposing\nan API which is familiar to those used to writing event-driven code.\n\n## Differences from discord.py\n\n* Essentially _everything_ runs as an event listener. This includes tasks, commands, and context menus\n\t* Events now have 3 phases: For an event called `event`, subscribers to `before:event` are run first, then `event`, and finally `after:event`.\n\t* Events can be cancelled: Any listener to an event can call `event.cancel()` which will prevent any listeners in subsequent phases from being invoked.\n\tIt does abort any listeners which have already ben called, such as other listeners to the current phase\n* Client differences:\n\t* Events can be scheduled in the future with `Client.dispatch_future()`. This adds an entry to the database, so the scheduled event will persist through restarts.\n\t`.dispatch_future()` guarantees precision within at least 30s of the scheduled time.\n\t* Key-value storage: Reduces boilerplate for storing/retreiving arbitrary small data points. `Client.set_value()` and `Client.get_value()` can be used to\n\tstore & retreive small strings from the database\n\t* Database migrations: `Client.migration()` allows schema migrations to be added in code. Migrations are called only the first time the bot starts up after\n\ta new migration is added.\n\t* Special message handlers: A small convenience layer over `Client.wait_for()`, `Client.add_special()` allows a coroutine to be invoked any time a message\n\tis received which meets user-defined criteria\n\t* Native database integration: Beymax natively supports [SQLAlchemy](https://www.sqlalchemy.org/) for interacting with databases in your bot.\n* Cogs -> Suites: discord.py's concept of a `cog` is essentially the same as a Beymax `suite`. Suites group together a set of commands, context menus, event listeners, database tables, etc which logically relate to each other. Suites can define their own interdependencies, ensuring that if a suite is loaded by your bot, all of its dependencies are also loaded.\n* UI Differences: discord.py's ui library follows an imperative style, where UI elements are defined in advance via subclassing. Beymax overrides this interface to provide a functionally-oriented style where UI elements are defined dynamically at runtime using function decorators.\n* Argument parsing and command definition: Beymax mostly follows discord.py's style of defining command/context arguments via function annotations. Beymax extends this\nby allowing all argument metadata to be set in the annotations, including parameter descriptions.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.graubert.com/agraubert/beymax",
            "keywords": "discord async asyncio sql sqlalchemy utilities",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beymax",
            "package_url": "https://pypi.org/project/beymax/",
            "platform": null,
            "project_url": "https://pypi.org/project/beymax/",
            "project_urls": {
                "Homepage": "https://gitlab.graubert.com/agraubert/beymax"
            },
            "release_url": "https://pypi.org/project/beymax/0.0.1/",
            "requires_dist": [
                "discord.py (==2.1.0)",
                "requests",
                "PyYAML",
                "editdistance",
                "aiohttp",
                "emoji",
                "python-dateutil",
                "sqlalchemy"
            ],
            "requires_python": "",
            "summary": "A high-level, functional programming wrapper to discord.py",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16310789,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "0388758c564c6abfebabd0ac0e0c398e7d1d175a45f1bba20052c4ab6ef6e940",
                    "md5": "a01498b402ecba7d6f3b47be22a4227b",
                    "sha256": "988a07547475dc4b62a9665d45bc337d1459718b7d296d7bee24a250b09d90cd"
                },
                "downloads": -1,
                "filename": "beymax-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a01498b402ecba7d6f3b47be22a4227b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 27281,
                "upload_time": "2023-01-05T01:02:06",
                "upload_time_iso_8601": "2023-01-05T01:02:06.044944Z",
                "url": "https://files.pythonhosted.org/packages/03/88/758c564c6abfebabd0ac0e0c398e7d1d175a45f1bba20052c4ab6ef6e940/beymax-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "82ff4be553fecbd3adb76f7919a53c8c781823ef2e3315aeb5705a649b563f9b",
                    "md5": "9a54c795b6ead670c84079efba399a88",
                    "sha256": "56ef0c1bf946e67b2558bd3fc62807940b8cb48029abc5a9a2f86e3a879671b7"
                },
                "downloads": -1,
                "filename": "beymax-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "9a54c795b6ead670c84079efba399a88",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 26959,
                "upload_time": "2023-01-05T01:02:07",
                "upload_time_iso_8601": "2023-01-05T01:02:07.225758Z",
                "url": "https://files.pythonhosted.org/packages/82/ff/4be553fecbd3adb76f7919a53c8c781823ef2e3315aeb5705a649b563f9b/beymax-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
{
    "0.1.0": {
        "info": {
            "author": "Shay Vargaftik and Yaniv Ben-Itzhak",
            "author_email": "shayv@vmware.com, vargaftik@gmail.com, ybenitzhak@vmware.com, yaniv.benizhak@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Structured Random Rotation-based Compression (srrcomp)\n\n`srrcomp` provides structured random rotation based compression techniques with strong theoretical guarantees, as described in the following publications:\n\n- Shay Vargaftik, Ran Ben-Basat, Amit Portnoy, Gal Mendelson, Yaniv Ben-Itzhak, and Michael Mitzenmacher. [\"DRIVE: One-bit Distributed Mean Estimation.\"](https://proceedings.neurips.cc/paper/2021/hash/0397758f8990c1b41b81b43ac389ab9f-Abstract.html) Advances in Neural Information Processing Systems 34 (2021): 362-377.\n\n- Shay Vargaftik, Ran Ben Basat, Amit Portnoy, Gal Mendelson, Yaniv Ben Itzhak, and Michael Mitzenmacher. [\"EDEN: Communication-Efficient and Robust Distributed Mean Estimation for Federated Learning.\"](https://proceedings.mlr.press/v162/vargaftik22a.html) In International Conference on Machine Learning, pp. 21984-22014. PMLR, 2022.\n\nAlso, see the following blog for a high-level overview: \n[\"Pushing the Limits of Network Efficiency for Federated Machine Learning\"](https://octo.vmware.com/pushing-the-limits-of-network-efficiency-for-federated-learning/)\n\nIn particular, srrcomp can be used for: \n\n- Fast and efficient lossy compression.\n- Unbiased estimates.\n- Distributed mean estimation.\n- Compressing gradient updates in distributed and federated learning.\n\nThe implementation is torch-based and thus supports CPU and GPU.\n\nThe compression and decompression are being executed over the device in which the corresponding vector is stored in.\n\n`srrcomp` currently contains the implementation of [EDEN](https://proceedings.mlr.press/v162/vargaftik22a.html).\n\n## CUDA acceleration\n\nsrrcomp offers some functions in CUDA for faster execution (up to an order of magnitude). This acceleration requires local compilation with `nvcc`/`torch`/`python` compatible versions. \n\nThe 'gpuacctype' argument (GPU acceleration type) is set by default to 'cuda', and can be set to 'torch' to use the torch-based implementation. \n\nThe torch-based implementation is used, in case the CUDA acceleration is unavailable (e.g., when the verctor in CPU, or local CUDA compilation has not been done). \n\n## Pre-requisites\n\n`torch` \n\n`numpy`\n\n[Optional] `nvcc` for compiling the aforementioned CUDA functions for faster execution\n\n\n## Installation\n\n`$ pip install srrcomp`\n\nIf the message \"Using torch implementation for Hadamard and bit packing\" appears when importing srrcomp on a GPU machine, try installing `srrcomp` from source by:\n\n`$ python setup.py install`\n\n## Testing\n\n### Basic\n\nExecute from \\tests folder:\n`$ python basic_test.py`\n\n`dim`, `bits`, and `seed` variables can be modified within the script.\n\n\n### Distributed Mean Estimation (DME)\n\nExecute from \\tests folder:\n`$ python dme_test.py`\n\nUse `$ python dme_test.py -h` to get the test options \n\n## The team\n\nShay Vargaftik (VMware Research), shayv@vmware.com; vargaftik@gmail.com.\n\nYaniv Ben-Itzhak (VMware Research), ybenitzhak@vmware.com; yaniv.benizhak@gmail.com\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shayvar/structured-random-rotation-based-compression",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "srrcomp",
            "package_url": "https://pypi.org/project/srrcomp/",
            "platform": null,
            "project_url": "https://pypi.org/project/srrcomp/",
            "project_urls": {
                "Homepage": "https://github.com/shayvar/structured-random-rotation-based-compression"
            },
            "release_url": "https://pypi.org/project/srrcomp/0.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Structured random rotation (srr) based compression tools",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16214428,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f70e5d9f33564daa9f591830cbd15460",
                    "sha256": "7133881dbc091b68ebcf6e0fef057a891c4078a35975012bb86b6dafaa8567d5"
                },
                "downloads": -1,
                "filename": "srrcomp-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "f70e5d9f33564daa9f591830cbd15460",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16188,
                "upload_time": "2022-12-26T09:28:16",
                "upload_time_iso_8601": "2022-12-26T09:28:16.205047Z",
                "url": "https://files.pythonhosted.org/packages/c6/e7/46e5fa065f968e38f9276db59bd9d7f1745e4626fc1bc74732ad05bdfddc/srrcomp-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
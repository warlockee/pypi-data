{
    "1.3.10": {
        "info": {
            "author": "Michael Costa, Florent Chevalier",
            "author_email": "michael.costa@mcos.nc, florent.chevalier@gouv.nc",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Libraries :: Application Frameworks"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://codeberg.org/scrippy/scrippy-core",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "scrippy-core",
            "package_url": "https://pypi.org/project/scrippy-core/",
            "platform": null,
            "project_url": "https://pypi.org/project/scrippy-core/",
            "project_urls": {
                "Bug Tracker": "https://codeberg.org/scrippy/scrippy-core/issues",
                "Homepage": "https://codeberg.org/scrippy/scrippy-core"
            },
            "release_url": "https://pypi.org/project/scrippy-core/1.3.10/",
            "requires_dist": [
                "argcomplete (>=1.10.0)",
                "coloredlogs (>=10.0)",
                "prettytable (>=0.7.2)",
                "filelock (>=3.0.12)",
                "PyYAML (>=5.3)",
                "rich (>=10.16.2)",
                "twine ; extra == 'dev'",
                "wheel (>=0.37.0) ; extra == 'dev'",
                "flake8 (>=4.0.1) ; extra == 'dev'",
                "flake8-breakpoint (>=1.1.0) ; extra == 'dev'",
                "flake8-builtins (>=1.5.3) ; extra == 'dev'",
                "flake8-print (>=4.0.0) ; extra == 'dev'",
                "flake8-return (>=1.1.3) ; extra == 'dev'",
                "pep8-naming (>=0.8.2) ; extra == 'dev'",
                "pytest (>=6.2.2) ; extra == 'dev'",
                "pytest-cov (>=3.0.0) ; extra == 'dev'",
                "bump2version (>=1.0.1) ; extra == 'dev'",
                "setuptools (>=60.9.2) ; extra == 'dev'",
                "pypirc-chappers (>=1.0.8) ; extra == 'dev'",
                "pylint (>=2.12.2) ; extra == 'dev'"
            ],
            "requires_python": ">=3.8",
            "summary": "\"Module principal du cadriciel Scrippy\"",
            "version": "1.3.10",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16264957,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "26d6a2cc8cd1df30e190d3c8a2232b06",
                    "sha256": "211f98f801d9b564a64173c08ec98381775b51cf63c1b9865b6237519a00f9e5"
                },
                "downloads": -1,
                "filename": "scrippy_core-1.3.10-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "26d6a2cc8cd1df30e190d3c8a2232b06",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 30326,
                "upload_time": "2022-12-31T06:12:43",
                "upload_time_iso_8601": "2022-12-31T06:12:43.266024Z",
                "url": "https://files.pythonhosted.org/packages/e0/f4/7a73192503fde7a90083121eff68f771b3f1569a55156e1a2d34ac0d7970/scrippy_core-1.3.10-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3e86bb9dd745c66df36979673e041bf6",
                    "sha256": "69a517e3ec91257dd52b417c754bfbd1c276fb2409101a39e78c9a7ce49936ca"
                },
                "downloads": -1,
                "filename": "scrippy-core-1.3.10.tar.gz",
                "has_sig": false,
                "md5_digest": "3e86bb9dd745c66df36979673e041bf6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 46946,
                "upload_time": "2022-12-31T06:12:44",
                "upload_time_iso_8601": "2022-12-31T06:12:44.987546Z",
                "url": "https://files.pythonhosted.org/packages/81/04/f3d68edb8182f20d1c23568d088a5cae318bb153ef8a302449562095f28f/scrippy-core-1.3.10.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.3.9": {
        "info": {
            "author": "Michael Costa, Florent Chevalier",
            "author_email": "michael.costa@mcos.nc, florent.chevalier@gouv.nc",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Libraries :: Application Frameworks"
            ],
            "description": "![Build Status](https://drone.mcos.nc/api/badges/scrippy/scrippy-core/status.svg) ![License](https://img.shields.io/static/v1?label=license&color=orange&message=MIT) ![Language](https://img.shields.io/static/v1?label=language&color=informational&message=Python)\n\n\n![Scrippy, mon ami le scrangourou](./scrippy-core.png \"Scrippy, mon ami le scrangourou\")\n\n# `scrippy_core`\n\n`scrippy_core` est le module _Python3_ principal du cadriciel [`Scrippy`](https://codeberg.org/scrippy) permettant la normalisation de l'\u00e9criture de scripts _Python_.\n\nCe module apporte l'ensemble des fonctionnalit\u00e9s de base telles que la gestion des fichiers de configuration, de logs, d'historiques d'ex\u00e9cution, le contr\u00f4le d'acc\u00e8s aux scripts, la gestion des ex\u00e9cution concurrentielles, etc.\n\n## Pr\u00e9requis\n\n### Syst\u00e8me\n\n#### Debian et d\u00e9riv\u00e9es\n\n- python3\n- python3-pip\n- python-dev\n- build-essential\n\n### Modules Python\n\n#### Liste des modules n\u00e9cessaires\n\nLes modules list\u00e9s ci-dessous seront automatiquement install\u00e9s.\n\n- prettytable\n- coloredlogs\n- argcomplete\n- filelock\n\n## Installation\n\n### Manuelle\n\n```bash\ngit clone https://codeberg.org/scrippy/scrippy-core.git\ncd scrippy-core\nsudo python3 -m pip install -r requirements.txt\nsudo python3 ./setup.py build install\n```\n\n### Avec `pip`\n\n```bash\nsudo pip install scrippy-core\n```\n\n### Configuration de l'environnement\n\n1. Le fichier de configuration de _Scrippy_ `/etc/scrippy/scrippy.yml` doit d\u00e9finir un certain nombres de r\u00e9pertoires qui seront utiles aux scripts reposant sur _Scrippy_.\n\n| Clef                  | Utilit\u00e9                                                                  | Variable associ\u00e9e                |\n| --------------------- | ------------------------------------------------------------------------ | -------------------------------- |\n| `env::logdir`         | R\u00e9pertoire des journaux d'ex\u00e9cution des scripts bas\u00e9s sur _Scrippy_      | scrippy_core.SCRIPPY_LOGDIR      |\n| `env::histdir`        | R\u00e9pertoire des fichiers d'historisation des ex\u00e9cutions                   | scrippy_core.SCRIPPY_HISTDIR     |\n| `env::reportdir`      | R\u00e9pertoire des fichiers de rapports                                      | scrippy_core.SCRIPPY_REPORTDIR   |\n| `env::tmpdir`         | R\u00e9pertoire temporaire des scripts bas\u00e9s sur _Scrippy_                    | scrippy_core.SCRIPPY_TMPDIR      |\n| `env::templatedirdir` | R\u00e9pertoire des fichiers mod\u00e8les                                          | scrippy_core.SCRIPPY_TEMPLATEDIR |\n| `env::confdir`        | R\u00e9pertoire des fichiers de configuration des scripts bas\u00e9s sur _Scrippy_ | scrippy_core.SCRIPPY_CONFDIR     |\n| `env::datadir`        | r\u00e9pertoire des donn\u00e9es utilis\u00e9es par les scripts bas\u00e9s sur _Scrippy_     | scrippy_core.SCRIPPY_DATADIR     |\n\nMod\u00e8le de fichier de configuration de l'environnement d'ex\u00e9cution _Scrippy_:\n\n```yaml\nenv:\n  logdir: /var/log/scrippy\n  histdir: /var/lib/scrippy/hist\n  reportdir: /var/lib/scrippy/reports\n  tmpdir: /var/tmp/scrippy\n  datadir: /var/lib/scrippy/data\n  templatedir: /var/lib/scrippy/templates\n  confdir: /etc/scrippy/conf\n```\n\n2. Cr\u00e9ation des r\u00e9pertoires d\u00e9finis dans le fichier de configuration `/etc/scrippy/scrippy.yml` par l'utilisateur _root_ (ou via `sudo`)\n\nScript python de cr\u00e9ation des r\u00e9pertoires n\u00e9cessaires :\n\n```python\nimport os\nimport yaml\n\nconf_file = \"/etc/scrippy/scrippy.yml\"\nwith open(conf_file, \"r\") as conf:\n  scrippy_conf = yaml.load(conf, Loader=yaml.FullLoader)\n  for rep in scrippy_conf[\"env\"]:\n    os.makedirs(scrippy_conf[\"env\"][rep], 0o0775)\n```\n\n### Activation de l'auto-compl\u00e9tion (facultatif)\n\nSi votre shell dispose de la commande `whence`, le _parser_ des arguments (argparse) pourra \u00eatre utilis\u00e9 pour alimenter l'auto-compl\u00e9tion. Voir la [documentation d'`argcomplete`](https://argcomplete.readthedocs.io/en/latest/).\n\nPour l'activer lancer la commande suivante (install\u00e9e avec le module python `argcomplete`) :\n\n```bash\nsudo activate-global-python-argcomplete\n```\n\nRafra\u00eechissez votre environnement _Bash_.\n\n```bash\nsource /etc/profile\n```\n\n---\n\n## Formalisme\n\nLes scripts utilisant le module `scrippy_core` doivent r\u00e9pondre \u00e0 un certain formalisme afin de garantir une harmonisation de leur format tout en facilitant la prise en charge de certaines fonctionnalit\u00e9s avanc\u00e9es telles que le contr\u00f4le de la validit\u00e9 de la configuration ou la gestion des param\u00e8tres optionnels.\n\nAinsi chaque script doit comporter dans sa [_doc string_](https://www.python.org/dev/peps/pep-0257/) un cartouche d\u00e9claratif et un ensemble de _sections_ pr\u00e9d\u00e9finies.\n\nUne fonction `main()` doit **imp\u00e9rativement**:\n\n- \u00catre d\u00e9finie dans la section `D\u00e9finition des fonctions et classes`\n- \u00catre appel\u00e9e dans la section `Point d'entr\u00e9e`\n- Directement encadr\u00e9e son contenu par `with scrippy_core.ScriptContext(__file__, workspace=True) as _context:` qui g\u00e8re et active l'ensemble des fonctionnalit\u00e9s des scripts \u00e9crit \u00e0 partir du module `scrippy_core`.\n\n```python\ndef main():\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    # Code principal\n\nif __name__ == '__main__':\n  # gestion des arguments si il y en a\n  main()\n```\n\n### Mod\u00e8le de base\n\nLe mod\u00e8le de base ci-dessous peut servir de base \u00e0 un extrait de code (_snippet_):\n\n```python\n#!/bin/env python3\n\"\"\"\n--------------------------------------------------------------------------------\n  @author         : <Auteur>\n  @date           : <Date de la version actuelle du script>\n  @version        : <X.Y.Z>\n  @description    : <Br\u00e8ve description (une ligne) de l'utilit\u00e9 du script>\n\n--------------------------------------------------------------------------------\n  Mise a jour :\n  <X.Y.Z>  <Date> - <Auteur> - <Raison>: <Description de la mise \u00e0 jour>\n\n--------------------------------------------------------------------------------\n  Liste des utilisateurs ou groupe autoris\u00e9s:\n    @user:<nom d'utilisateur>\n    @group:<nom du groupe>\n\n--------------------------------------------------------------------------------\n  Ex\u00e9cutions concurrentes :\n    @max_instance: <INT>\n    @timeout: <INT>\n    @exit_on_wait: <BOOL>\n    @exit_on_timeout: <BOOL>\n\n--------------------------------------------------------------------------------\n  Liste des param\u00e8tres de configuration obligatoires:\n    @conf:<section>|<cl\u00e9>|<type>|<secret>\n\n--------------------------------------------------------------------------------\n  Liste des param\u00e8tres des options et arguments d'ex\u00e9cution:\n  @args:<nom>|<type>|<aide>|<nombre arguments>|<valeur par d\u00e9faut>|<conflit>|<implique>|<requis>|<secret>\n\n--------------------------------------------------------------------------------\n  Fonctionnement:\n  ---------------\n    <Description d\u00e9taill\u00e9e du script>\n...\n\"\"\"\n#-------------------------------------------------------------------------------\n#  Initialisation de l\u2019environnement\n#-------------------------------------------------------------------------------\nimport logging\nimport scrippy_core\n\n#-------------------------------------------------------------------------------\n#  D\u00e9finition des fonctions et classes\n#-------------------------------------------------------------------------------\n\nclass <Class>(<object>):\n  def __init__(self, [<param>, ...]):\n  [...]\n\ndef <fonction>([<param>, ...]):\n  [...]\n\n#-------------------------------------------------------------------------------\n#  Traitement principal\n#-------------------------------------------------------------------------------\n\ndef main(args):\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    # recup\u00e9ration de la config si necessaire\n    config = _context.config\n\n    [...]\n\n#-------------------------------------------------------------------------------\n#  Point d'entr\u00e9e\n#-------------------------------------------------------------------------------\n\nif __name__ == '__main__':\n  # gestion des arguments si il y en a. Les arguments sont accessibles avec la variable 'scrippy_core.args'\n  main(scrippy_core.args)\n```\n\n### \u00c9l\u00e9ments du cartouche\n\nLes \u00e9l\u00e9ments `@author`, `@date`, `@version`, `@description` sont **obligatoires** et seront automatiquement affich\u00e9s par l'option `--help`.\n\n#### Version:\n\nLe num\u00e9ro de version d'un script est au format X.Y.Z avec:\n\n- `X`, l\u2019identifiant de version majeure\n- `Y` est l\u2019identifiant de version mineure\n- `Z`, l\u2019identifiant de version de correction\n\n**Version majeure X**: Il vaut \"0\" lors du d\u00e9veloppement, le script est consid\u00e9r\u00e9 non valide et ne devrait ni \u00eatre appel\u00e9 par d\u2019autres scripts ni \u00eatre utilis\u00e9 en production.\n\nUne fois le script valid\u00e9 la version doit \u00eatre 1.0.0 (premi\u00e8re version stable).\n\n`X` doit \u00eatre incr\u00e9ment\u00e9 si des changements dans le code n\u2019assure plus la r\u00e9tro-compatibilit\u00e9.\n\nLes identifiants de version mineure `Y` et de correction `Z` doivent \u00eatre remis \u00e0 z\u00e9ro lorsque l\u2019identifiant de version majeure `X` est incr\u00e9ment\u00e9.\n\n**Version mineure Y**: Doit \u00eatre incr\u00e9ment\u00e9 lors de l\u2019ajout de nouvelles fonctionnalit\u00e9s ou d\u2019am\u00e9lioration du code qui n\u2019ont pas d\u2019impact sur la r\u00e9tro-compatibilit\u00e9.\n\nL\u2019identifiant de version de correction `Z` doit \u00eatre remis \u00e0 z\u00e9ro lorsque l\u2019identifiant de version mineure est incr\u00e9ment\u00e9.\n\n**Version de correction Z**: Doit \u00eatre incr\u00e9ment\u00e9 si seules des corrections r\u00e9tro-compatibles sont introduites.\n\nUne correction est d\u00e9finie comme un changement interne qui corrige un comportement incorrect (Bug).\n\n`Z` peut \u00eatre incr\u00e9ment\u00e9 lors de correction typographique ou grammaticale.\n\n#### Mise \u00e0 jour:\n\nEn plus du num\u00e9ro de version, de la date de modification et de l'auteur de la modification chaque ligne de l'historique du script doit indiquer la raison de la modification.\n\n`<Raison>` peut prendre l'une des valeurs suivantes:\n\n- `cre`: Cr\u00e9ation du script\n- `evo`: \u00c9volution du script (ajout de fonctionnalit\u00e9, am\u00e9lioration du code, etc)\n- `bugfix`: Correction de comportement inattendu (bug)\n- `typo`: Correction de faute de frappe, ajout de commentaires et toute action n'apportant aucune modification au code.\n\n## Utilisateurs et groupes autoris\u00e9s\n\nLe module `scrippy_core` ajoute une couche de v\u00e9rification quant \u00e0 l'ex\u00e9cution du script permettant de s'assurer qu'un script est ex\u00e9cut\u00e9 par un utilisateur sp\u00e9cifique ou un utilisateur appartenant \u00e0 un groupe sp\u00e9cifique.\n\nPlac\u00e9e dans le cartouche, une ligne telle que `@user:harry.fink` emp\u00eachera l\u2019ex\u00e9cution par tout utilisateur autre que `harry.fink`.\n\nIl est possible de d\u00e9finir plusieurs utilisateurs autoris\u00e9s en multipliant les d\u00e9clarations:\n\n```\n@user:harry.fink\n@user:luiggi.vercotti\n```\n\nIl est \u00e9galement possible d'autoriser des groupes d'utilisateurs avec une ligne telle que `@group:monty` qui assurera que seul un utilisateur du groupe `monty` ex\u00e9cute le script.\n\nDe la m\u00eame mani\u00e8re que pour les utilisateurs il est possible de multiplier les d\u00e9clarations de groupe:\n\n```\n@group:monty\n@group:python\n```\n\nEn cas d'absence de ligne d\u00e9clarative `@user` et `@group` les permissions sur le fichier font foi et dans tous les cas les permissions sur les fichiers sont pr\u00e9valentes.\n\n**Attention**: Si un groupe et un utilisateur sont d\u00e9clar\u00e9s, **les deux conditions doivent \u00eatre remplies** pour que l'utilisateur soit autoris\u00e9 \u00e0 ex\u00e9cuter le script.\n\n## Gestion des ex\u00e9cutions concurrentes\n\nLes d\u00e9clarations optionnelles `@max_instance`, `@timeout`, `@exit_on_wait` et `@exit_on_timeout` permettent de d\u00e9finir le nombre d'ex\u00e9cution concurrentes d'un m\u00eame script ainsi que le comportement du script le cas \u00e9ch\u00e9ant:\n\n| D\u00e9claration        | Type                        | Utilit\u00e9                                                                                                          | Valeur par d\u00e9faut |\n| ------------------ | --------------------------- | ---------------------------------------------------------------------------------------------------------------- | ----------------- |\n| `@max_instance`    | Nombre entier               | Nombre maximum d'ex\u00e9cutions parall\u00e8les                                                                           | 0 (infini)        |\n| `@timeout`         | Nombre entier               | D\u00e9lai d'attente maximum exprim\u00e9 en secondes si `@exit_on_timeout` est positionn\u00e9e \u00e0 vrai                         | 0 (infini)        |\n| `@exit_on_timeout` | bool\u00e9en (`true`, `1`, `on`) | Fait sortir le script en erreur lorsque le d\u00e9lai d'attente est atteint                                           | False             |\n| `@exit_on_wait`    | bool\u00e9en (`true`, `1`, `on`) | Fait imm\u00e9diatement sortir le script en erreur en cas d'attente y compris si le d\u00e9lai d'attente n'est pas atteint | False             |\n\nLes occurrences mises en attente d'ex\u00e9cution sont ex\u00e9cut\u00e9es s\u00e9quentiellement dans l'ordre de leur inscription dans la file d'ex\u00e9cution.\n\nDans l'exemple suivant, deux occurrences du script sont permises. Une troisi\u00e8me ex\u00e9cution sera mise en attente 10 secondes, d\u00e9lai au del\u00e0 duquel le script sortira en erreur s'il n'a pas peu obtenir un cr\u00e9neau d'ex\u00e9cution.\n\n```\n  @max_instance: 2\n  @timeout: 10\n  @exit_on_wait: false\n  @exit_on_timeout: true\n```\n\n## Gestion et v\u00e9rification des param\u00e8tres de configuration obligatoires\n\nUn fichier de configuration est un fichier simple fichier _ini_ d\u00e9coup\u00e9 en autant de sections que n\u00e9cessaire:\n\nPour \u00eatre charg\u00e9 un tel fichier de configuration doit simplement se trouver dans le r\u00e9pertoire d\u00e9fini par la constante `scrippy_core.SCRIPPY_CONFDIR` et avoir le m\u00eame nom que le script qui doit le charger d\u00e9barrass\u00e9 de son extension et suffix\u00e9 de l'extension `.conf`.\n\nDe cette mani\u00e8re le script `exp_test_logs.py` chargera automatiquement le fichier de configuration `exp_test_logs.conf`.\n\n```ini\n[log]\nlevel = ERROR\n[database]\nhost = srv.flying.circus\nport = 5432\nuser = arthur.pewtey\nbase = ministry_of_silly_walks\npassword = parrot\n# La section comporte des espaces\n[ma section]\n  # un commentaire indent\u00e9\n  ma variable = ma valeur\n```\n\nDans un tel fichier:\n\n- L'indentation est possible\n- Une ligne commen\u00e7ant par `#` ou `;` est consid\u00e9r\u00e9e comme un commentaire, y compris si elle est indent\u00e9e.\n- Toutes les valeurs sont des cha\u00eenes de caract\u00e8res:\n  - Il appartient au d\u00e9veloppeur de convertir la valeur des variables dans le type d\u00e9sir\u00e9 lors du traitement (voir **_R\u00e9cup\u00e9ration d\u2019une valeur d\u2019un type particulier_**).\n  - Les espaces sont accept\u00e9s que se soit dans le nom des section, dans le nom d'une cl\u00e9 ou dans une valeur.\n\n### Contr\u00f4le de la validit\u00e9 du fichier de configuration\n\nAfin de valider le fichier de configuration le script doit comporter dans sa [_docstring_](https://www.python.org/dev/peps/pep-0257/) un ensemble de lignes commen\u00e7ant par `@conf` et d\u00e9crivant le fichier de configuration tel qu'il est attendu.\n\nLes lignes de d\u00e9clarations du format de configuration doivent respecter le formalisme suivant:\n\n```\n@conf:<section>|<cl\u00e9>|<type_valeur>[|<secret>]\n```\n\n`<type_valeur>` doit \u00eatre l'un des types reconnus suivants:\n\n- `str` (cha\u00eene de caract\u00e8res)\n- `int` (entier)\n- `float` (nombre \u00e0 virgule flottante)\n- `bool` (bool\u00e9en)\n\n`secret` est **optionnel** et s'il est d\u00e9fini doit prendre la valeur `true` ou `false`.\n\nSi `secret` est d\u00e9fini et a pour valeur `true`, la valeur de param\u00e8tre de configuration sera consid\u00e9r\u00e9e comme un _secret_ et appara\u00eetra masqu\u00e9e dans les fichiers de journalisations.\n\nExemple:\n\n\u00c0 partir de la d\u00e9claration suivante:\n\n```\n@conf:log|level|str\n@conf:database|port|int\n@conf:sql|verbose|boolean\n@conf:sql|database|str|false\n@conf:sql|password|str|true\n```\n\nLe fichier de configuration suivant sera v\u00e9rifi\u00e9:\n\n```\n[log]\n  level = error\n[database]\n  port = 5432\n[sql]\n  verbose = True\n  database = monty\n  password = d34dp4rr0t\n```\n\nToutes les occurrences du mot de passe `d34dp4rr0t` seront remplac\u00e9 par `*******` dans les fichiers de journalisations comme sur la sortie standard.\n\nAucun contr\u00f4le des valeurs des param\u00e8tres n'est effectu\u00e9, il n'est donc pas utile de les indiquer. Seule la structure de la configuration et le type des cl\u00e9s sont v\u00e9rifi\u00e9s.\n\nLors du contr\u00f4le de la configuration et si le niveau de journalisation est positionn\u00e9 \u00e0 `debug`, la configuration charg\u00e9e sera affich\u00e9e sur la sortie standard et dans le journal (attention \u00e0 la pr\u00e9sence de mots de passe dans la configuration lors de l'utilisation du niveau de journalisation `debug`).\n\n```python\n\"\"\"\n@conf:database|port|int\n@conf:database|base|str\n@conf:database|host|str\n@conf:database|password|str\n@conf:database|user|str\n@conf:local|dir|str\n@conf:src|port|int\n@conf:src|host|str\n@conf:src|dir|str\n@conf:src|user|str\n@conf:dst|port|int\n@conf:dst|host|str\n@conf:dst|dir|str\n@conf:dst|user|str\n\"\"\"\nimport scrippy_core\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  # recup\u00e9ration de la configuration\n  config = _context.config\n```\n\nSi l'une des sections ou l'une des cl\u00e9s d\u00e9crites par `@conf` est absente du fichier de configuration ou que le type d\u00e9crit pour une cl\u00e9 ne correspond pas au type trouv\u00e9 dans le fichier de configuration pour cette cl\u00e9 alors une erreur critique est lev\u00e9e et le script sort imm\u00e9diatement en erreur.\n\nLes sections ou cl\u00e9s surnum\u00e9raires trouv\u00e9es dans le fichier de configuration et non d\u00e9clar\u00e9es seront simplement ignor\u00e9es lors de la v\u00e9rification mais resteront utilisables par le script.\n\nAinsi dans l'exemple ci-dessus la section `[mail]` n'\u00e9tant pas d\u00e9finie dans `@conf` ni sa pr\u00e9sence ni sa validit\u00e9 ne seront contr\u00f4l\u00e9es.\n\n### R\u00e9cup\u00e9ration de la valeur d'un param\u00e8tre de configuration\n\nLa r\u00e9cup\u00e9ration de la valeur d'un param\u00e8tre du fichier de configuration se fait par l'interm\u00e9diaire de la m\u00e9thode `_context.config.get()`.\n\n```python\n\"\"\"\n@conf:database|port|int\n@conf:database|base|str\n@conf:database|host|str\n@conf:database|password|str\n@conf:database|user|str\n\"\"\"\nimport logging\nimport scrippy_core\n\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  config = _context.config\n  logging.info(config.get('database', 'host'))\n```\n\nDans l'exemple ci-dessus, la valeur de la cl\u00e9 `host` de la section `database` sera affich\u00e9 \u00e0 l'\u00e9cran.\n\nSi la section ou la cl\u00e9 n'existe pas, une erreur est lev\u00e9e et **le script l\u00e8vera imm\u00e9diatement une erreur critique**.\n\n#### R\u00e9cup\u00e9ration d'une valeur d'un type particulier\n\n\u00c0 moins que le param\u00e8tre 'param_type' soit positionn\u00e9 \u00e0 l'une des valeurs autoris\u00e9es (`str` (d\u00e9faut), `int`, `float` ou `bool`), le type renvoy\u00e9 est syst\u00e9matiquement une cha\u00eene de caract\u00e8re.\n\nAppeler la m\u00e9thode `Config.get()` avec le mauvais type l\u00e8vera une erreur et **le script l\u00e8vera imm\u00e9diatement une erreur critique**.\n\n```python\n\"\"\"\n@conf:log|level|str\n@conf:database|port|int\n@conf:database|base|str\n@conf:database|host|str\n@conf:database|password|str\n@conf:database|user|str\n\"\"\"\nimport logging\nimport scrippy_core\n\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  config = _context.config\n  logging.info(config.get('database', 'port', 'int'))\n```\n\n### Sections et cl\u00e9s r\u00e9serv\u00e9es:\n\nCertaines sections et cl\u00e9s sont automatiquement lues et interpr\u00e9t\u00e9es lors de l'import du module `scrippy_core`.\n\nCes cl\u00e9s de configuration sont facultatives, tout comme le fichier de configuration.\n\n- Niveau de journalisation, lu et appliqu\u00e9 automatiquement\n\n```ini\n[log]\n  level = <str>\n```\n\n- Activation de la journalisation et d'historisation (True par d\u00e9faut)\n\n```ini\n[log]\n  file = <bool>\n```\n\nPlus de d\u00e9tails dans la section **Gestion des journaux d'ex\u00e9cution**\n\n### Exemples\n\nTous les exemples de cette documentation se basent sur tout ou partie du fichier de configuration suivant:\n\n```ini\n[log]\n  level = info\n  file = true\n[database]\n  host = srv.flying.circus\n  port = 5432\n  user = arthur.pewtey\n  base = ministry_of_silly_walks\n  password = dead parrot\n[local]\n  dir = /tmp/transfert\n[src]\n  host = srv.source.circus\n  port = 22\n  user = harry.fink\n  dir = /home/harry.fink/data\n[dst]\n  host = srv.destination.circus\n  port = 22\n  user = luigi.vercotti\n  dir = /home/luigi.vercotti/received\n[mail]\n  host = srv.mail.circus\n  port = 25\n  from = Luiggi Vercotti\n  from_addr = luiggi.vercotti@circus.com\n  to = Harry Fink\n  to_addr = harry.fink@circus.com\n  subject =  Compte rendu d'ex\u00e9cution\n```\n\n## Gestion des options d'ex\u00e9cution\n\nLa gestion des options d'un script se fait au moyen de d\u00e9clarations dans sa [_docstring_](https://www.python.org/dev/peps/pep-0257/).\n\nLa d\u00e9claration d'une option est compos\u00e9e de 8 champs dont certains sont obligatoires:\n\n```\n@args:<nom>|<type>|<aide>|<nombre arguments>|<valeur par d\u00e9faut>|<conflit>|<implique>|<requis>|<secret>\n```\n\navec:\n\n- **nom**: Le nom de l'option (obligatoire)\n- **type**: Une des valeurs suivantes: `str`, `int`, `float`, `choice`, `bool` (d\u00e9faut: str). Si le type est `choice`, la liste des choix possibles doit \u00eatre saisie dans le champs **valeur par d\u00e9faut** sous forme de liste de mots s\u00e9par\u00e9s par des virgules.\n- **aide**: Une cha\u00eene de caract\u00e8res r\u00e9sumant l'objectif de cette option (obligatoire).\n- **nombre arguments**: Le nombre d'arguments que prend l'option. Ce champs est obligatoire pour tous les types sauf `bool` ou le nombre d'arguments d\u00e9clar\u00e9s est ignor\u00e9. Sa valeur est g\u00e9n\u00e9ralement un nombre entier mais peut prendre la valeur `+` lorsque le nombre d'arguments est sup\u00e9rieur \u00e0 1 mais n'est pas connu \u00e0 l'avance ou `?` lorsque le nombre d'argument peut \u00eatre \u00e9gal \u00e0 z\u00e9ro.\n- **valeur par d\u00e9faut**: La valeur par d\u00e9faut de l'option (optionnel). Les option de type `bool` prennent `true` comme valeur par d\u00e9faut.\n- **conflit**: La liste des options qui entrent en conflit avec l'option courante (optionnel, liste d'options s\u00e9par\u00e9s par des virgules).\n- **implique**: La liste des options induites par l'option courante (optionnel, liste d'options s\u00e9par\u00e9s par des virgules).\n- **requis**: Un bool\u00e9en (`true` ou `false`) indiquant si l'option est obligatoire ou non.\n- **secret**: Un bool\u00e9en (`true` ou `false`) indiquant si la valeur de l'option doit \u00eatre gard\u00e9e secr\u00e8te.\n\nLa valeur d'une option dont l'attribut _secret_ est positionn\u00e9 \u00e0 `true` sera automatiquement masqu\u00e9e dans les fichiers de journalisations comme sur la sortie standard.\n\nLa d\u00e9claration des options g\u00e9n\u00e9rera automatiquement l'aide du script accessible avec l'option `--help`.\n\nLes options suivantes seront \u00e9galement automatiquement g\u00e9n\u00e9r\u00e9es:\n\n- `--version`: Affiche le num\u00e9ro de version du script \u00e0 partir des informations contenues dans le cartouche.\n- `--source-code`: Affiche le code source du script.\n- `--hist [NB_EXECUTION (default:10)]`: Affiche l'historique des ex\u00e9cutions du script.\n- `--log [SESSION]`: Affiche le contenu du fichier log correspondant \u00e0 la session dont l'identifiant est pass\u00e9 en argument. Par d\u00e9faut la derni\u00e8re session est affich\u00e9e.\n- `--debug`: Force le niveau de journalisation \u00e0 DEBUG (Les changements de niveau de log au cours de l'ex\u00e9cution sont alors ignor\u00e9s).\n- `--nolog`: D\u00e9sactive totalement la journalisation \u00e0 l'exception des niveaux de journalisation `error` et `critical`.\n- `--no-log-file`: Emp\u00eache la cr\u00e9ation des fichiers de journalisation et d'historisation.\n\nLes options `--help`, `--version`, `--hist`, `--log`, `--debug` et `--no-log-file` ne doivent donc pas \u00eatre d\u00e9clar\u00e9es.\n\n### Exemples\n\nLe script suivant pourra \u00eatre appel\u00e9 avec les options et arguments suivants:\n\n- `--env`: Obligatoire. Accepte l'une des valeurs suivantes: qualif, preprod ou prod\n- `--appname`: Optionnelle. Une cha\u00eene de caract\u00e8res libre ayant pour valeur par d\u00e9faut \"aviva\"\n- `--now`: Option bool\u00e9enne. Si utilis\u00e9e sa valeur sera _true_ (false par d\u00e9faut) et l'option `--date` ne pourra pas \u00eatre utilis\u00e9e.\n- `--date`: Une suite de 3 entiers \u00e0 partir de laquelle une date sera cr\u00e9\u00e9e (ie. 24 02 2019). Cette option entre en conflit avec l'option `--now`.\n- `--email`: Une cha\u00eene de caract\u00e8re libre. Cette option est obligatoire si l'option `--now` est utilis\u00e9e.\n\n```python\n#!/bin/env python3\n\"\"\"\n--------------------------------------------------------------------------------\n  @author         : Florent Chevalier\n  @date           : 27-07-2019\n  @version        : 1.0.0\n  @description    : test des options\n\n--------------------------------------------------------------------------------\n  Mise a jour :\n  1.0.0  27/07/2019   - Florent Chevalier   - Cre : Mise en production\n--------------------------------------------------------------------------------\n  Liste des utilisateurs ou groupe autoris\u00e9s:\n    @user:asr\n    @group:asr\n--------------------------------------------------------------------------------\n  Liste des param\u00e8tres des options et arguments d'ex\u00e9cution:\n    nom|type|help|num_args|defaut|conflit|implique|requis\n\n    @args:appname|str|Nom de l'application|1|aviva|||false\n    @args:date|int|Date de plannification (jour, mois, annee)|3||now|email|false\n    @args:email|str|Email de notification|1||||false\n    @args:now|bool|Appliquer immediatement||false|date||false\n    @args:env|choice|Environnement||qualif,preprod,prod|||true\n--------------------------------------------------------------------------------\n\"\"\"\nimport logging\nimport datetime\nimport scrippy_core\n\ndef print_contact(email):\n  logging.info(\" - Contact: {}\".format(email))\n\ndef print_appname(appname):\n  logging.info(\" - Application: {}\".format(appname))\n\ndef print_env(env):\n  logging.info(\" - Environnement: {}\".format(env))\n\ndef print_date(date):\n  logging.info(\" - Date: {}\".format(date))\n\ndef main(args):\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    if args.date:\n      date = \"{}/{}/{}\".format(args.date[0], args.date[1], args.date[2])\n    if args.now:\n      date = datetime.datetime.now().strftime('%d/%m/%Y')\n    logging.info(\"[+] Rapport:\")\n    print_date(date)\n    print_appname(args.appname)\n    print_env(args.env)\n    print_contact(args.email)\n\nif __name__ == '__main__':\n  main(scrippy_core.args)\n```\n\n## Gestion des journaux d'ex\u00e9cution\n\nLa journalisation d'ex\u00e9cution s'effectue \u00e0 partir du [module `logging` de la biblioth\u00e8que standard](https://docs.python.org/3/library/logging.html).\n\nDeux types de journaux sont simultan\u00e9ment disponibles:\n\n- **La sortie standard**: Affichage en couleurs vers `sys.stdout`\n- **Le fichier journal**: Un fichier situ\u00e9 dans `scrippy_core.SCRIPPY_LOGDIR` dont le nom est extrapol\u00e9 du nom du script de la mani\u00e8re suivante: `<nom_du_script>_<timestamp>_<pid>.log`.\n\nPlusieurs niveaux de journalisation sont disponibles (Voir la [documentation](https://docs.python.org/3/library/logging.html#logging-levels)) et le niveau de log par d\u00e9faut est `INFO`.\n\nSi un fichier de configuration existe pour le script et qu'il contient une section `[log]` indiquant un niveau de log avec la clef `level` alors le niveau de journalisation indiqu\u00e9 est automatiquement appliqu\u00e9.\n\nSi le fichier de configuration contient une section `[log]` ayant une clef `file` dont la valeur est `false` alors aucun fichier de journalisation ne sera cr\u00e9\u00e9 et seule la sortie standard recevra le journal.\n\n### D\u00e9finition du niveau de journalisation par fichier configuration:\n\n```\n[log]\n  level = warning\n```\n\nLa valeur du niveau de journalisation dans le fichier de configuration est insensible \u00e0 la casse.\n\nLes niveaux de log disponibles sont, du moins verbeux au plus verbeux, [les niveaux de journalisation du module standard logging](https://docs.python.org/3/library/logging.html#logging-levels)\n\n- `critical`\n- `error`\n- `warning`\n- `info`\n- `debug`\n\n\u00c0 noter que le niveau de journalisation `DEBUG` affiche l'int\u00e9gralit\u00e9 du fichier de configuration ainsi que d'autres d\u00e9tails qui pourraient s'av\u00e9rer \u00eatre une source de fuite d'information. Il est d\u00e9conseill\u00e9 de l'utiliser en production.\n\nTous les scripts \u00e9crits \u00e0 partir du module `scrippy_core` dans le r\u00e8gles de l'art disposent des options de journalisation suivantes:\n\n- `--no-log-file`: Lorsque cette option est utilis\u00e9e, aucun journal d'ex\u00e9cution n'est enregistr\u00e9 sur le disque. Cette option n\u2019emp\u00eache pas l'affichage \u00e0 l'\u00e9cran.\n- `--debug`: Lorsque cette option est utilis\u00e9e, le niveau de journalisation est forc\u00e9 \u00e0 `DEBUG`. Dans ce cas le script ne tient pas compte d'un \u00e9ventuel param\u00e8tres de configuration indiquant le contraire.\n\nCes deux options peuvent \u00eatre cumul\u00e9es.\n\n### Changer le niveau de log:\n\nLe niveau de log peut \u00eatre modifi\u00e9 en cours d'ex\u00e9cution du script \u00e0 l'aide de la m\u00e9thode `logging.getLogger().setLevel(<LEVEL>)`\n\n### Exemple\n\nEn plus d'accepter naturellement un param\u00e8tre de configuration d\u00e9finissant le niveau de journalisation, le script suivant dispose d'une option `--loglevel` permettant de surcharger le niveau de journalisation \u00e0 l'ex\u00e9cution.\n\nSi l'option `--debug` est utilis\u00e9e, l'option `--loglevel` n'aura aucun effet.\n\n```python\n\"\"\"\n@args:loglevel|str|Le niveau de log|1||||false\n\"\"\"\nimport logging\nimport scrippy_core\n\ndef change_loglevel(level):\n  \"\"\"\n  Passe le niveau de journalisation \u00e0 <level>\n  \"\"\"\n  try:\n    logging.getLogger().setLevel(level.upper())\n  except ValueError:\n    logging.error(\"Niveau de log inconnu: {}\".format(level.upper()))\n\ndef main(args):\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    # recup\u00e9ration de la configuration du script\n    config = _context.config\n    if args.loglevel:\n      # L'option --loglevel a re\u00e7u un argument\n      change_loglevel(args.loglevel)\n    logging.debug(\"Nobody expects the Spanish Inquisition!\")\n    logging.info(\"And now for something completely different...\")\n    logging.error(\"It\u2019s not pinin\u2019! It\u2019s passed on! This parrot is no more!\")\n\nif __name__ == '__main__':\n  main(scrippy_core.args)\n```\n\n## Gestion des erreurs\n\nLe _wrapper_ `with scrippy_core.ScriptContext(__file__) as _context:` intercepte les exceptions pour n'afficher que le type et le message sans la _stack trace_.\n\nEn cas d'exception intercept\u00e9e, le socle d\u00e9clenche un `sys.exit(1)`.\n\nPour afficher la _stack trace_ il faut que le log level soit \u00e0 `DEBUG`\n\n## Gestion de l'historisation des ex\u00e9cutions\n\nLe fichier d'historisation des ex\u00e9cutions situ\u00e9 dans `scrippy_core.SCRIPPY_HISTDIR` sera cr\u00e9\u00e9 et nomm\u00e9 `<nom_du_script>.db` \u00e0 la premi\u00e8re ex\u00e9cution du script.\nCe fichier est une base de donn\u00e9es _sqlite3_ qui recense l'ensemble des ex\u00e9cutions d'un script et pour chacune des ex\u00e9cution les informations suivantes:\n- identifiant de session\n- Date de d\u00e9but de l'ex\u00e9cution\n- Date de fin de l'ex\u00e9cution\n- Dur\u00e9e de l'ex\u00e9cution\n- Utilisateur \u00e0 l'origine de l'ex\u00e9cution\n- Utilisateur ayant effectivement ex\u00e9cut\u00e9 le script (cas de sudo)\n- Code de retour de l'ex\u00e9cution (0 si Ok, autre valeur si KO)\n- Ensemble des param\u00e8tres pass\u00e9s en arguments au script\n- Nom de l'erreur si l'ex\u00e9cution ne s'est pas termin\u00e9e correctement (0 dans le cas contraire)\n\nSi le fichier d'historisation est pr\u00e9existant \u00e0 l'ex\u00e9cution il sera mis \u00e0 jour avec les param\u00e8tres de la nouvelle ex\u00e9cution.\n\nL'historisation est activ\u00e9e automatiquement par l'encadrement de l'appel de la fonction `main` avec la d\u00e9claration `with scrippy_core.ScriptContext(__file__, workspace=True) as _context:`\n\n```python\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  main()\n```\n\n\u00c0 chaque ex\u00e9cution d'un script est attribu\u00e9e une session permettant d'identifier chaque ex\u00e9cution de mani\u00e8re unique.\n\nCette session est compos\u00e9e:\n\n- d'un _timestamp_ repr\u00e9sentant l'heure d'ex\u00e9cution\n- de l'identifiant du processus (PID)\n\n```txt\n1568975414.6954327_10580\n```\n\nCet identifiant de session est report\u00e9 dans la colonne `Session` de l'historique et permet de retrouver le log correspondant (Voir l'option `--log` dans **_Gestion des options d'ex\u00e9cution_**).\n\n### R\u00e9tention\n\nLe nombre d'ex\u00e9cutions conserv\u00e9es dans le fichier d'historisation est de **50** par d\u00e9faut.\n\nIl est possible de surcharger cette valeur en pr\u00e9cisant le nombre de r\u00e9tention souhait\u00e9 \u00e0 l'aide de la d\u00e9claration `with scrippy_core.ScriptContext(__file__, retention=100) as _context:`\n\n```python\nwith scrippy_core.ScriptContext(__file__, workspace=True, retention=100) as _context:\n  main()\n```\n\n### Affichage de l'historique d'ex\u00e9cution\n\nTous les scripts bas\u00e9 sur le module `scrippy_core` disposent automatiquement d'une option `--hist` permettant l'affichage des derni\u00e8res ex\u00e9cutions.\n\n```shell\nexp_test_script.py --hist\n```\n\nLe nombre d'ex\u00e9cutions \u00e0 afficher peut \u00eatre pr\u00e9cis\u00e9 par le passage d'un param\u00e8tre (int) \u00e0 l'option `--hist`\n\n```shell\nexp_test_script.py --hist 2\n```\n\nPour chacune des ex\u00e9cutions d'un script l'historique d'ex\u00e9cution enregistre les informations suivantes:\n\n- La date d'ex\u00e9cution\n- L'utilisateur d'origine\n- L'utilisateur effectif (_sudo_)\n- L'identifiant unique de session\n- Le code de sortie (0 par d\u00e9faut)\n- La liste des options et arguments pass\u00e9s au script\n\n## Espace de travail temporaire\n\nLa d\u00e9claration `with scrippy_core.ScriptContext(__file__, workspace=True) as _context:` cr\u00e9e automatiquement un espace de travail temporaire dont le chemin est r\u00e9cup\u00e9rable \u00e0 l'aide de l'attribut `workspace_path` du contexte d'ex\u00e9cution `_context`.\n\n```python\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  workspace_path = _context.workspace_path\n  ...\n```\n\nDans l'exemple pr\u00e9c\u00e9dent la variable `workspace_path` contiendra le chemin vers le r\u00e9pertoire temporaire de travail dont le nom sera construit de la mani\u00e8re suivante: `scrippy_core.SCRIPPY_TMPDIR/<NOM DU SCRIPT>_<SESSION ID>`\n\n**Ex**:\n\n```bash\n/var/tmp/scrippy/exp_transfert_ftp_1574391960.6696503_102257\n```\n\nCet espace de travail temporaire, qui sera _automatiquement d\u00e9truit avec son contenu \u00e0 la fin du script_, est un r\u00e9pertoire qui pourra \u00eatre utilis\u00e9 pour y cr\u00e9er des fichiers.\n\n```python\n#!/bin/env python3\nimport logging\nimport scrippy_core\n\ndef create_file(workspace_path):\n  tmp_file = \"fichier.tmp\"\n  logging.info(\"[+] Cr\u00e9ation du fichier temporaire: {}\".format(os.path.join(workspace_path, tmp_file)))\n  with open(os.path.join(workspace_path, tmp_file), 'a') as tmpfile:\n    logging.info(\"[+] \u00c9criture dans le fichier temporaire\")\n    tmpfile.write(\"Nobody expects the Spanish inquisition !\")\n\ndef main(args):\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    config = _context.config\n    create_file(_context.workspace_path)\n\nif __name__ == '__main__':\n  main(scrippy_core.args)\n```\n\n## Conseils et lignes directrices\n\n- Un log n'est **jamais trop verbeux**\n- Utiliser plusieurs niveaux de log afin de s\u00e9parer ce qui est utile \u00e0 l'exploitation de ce qui est utile au d\u00e9verminage\n- **Privil\u00e9gier la lisibilit\u00e9** et la maintenabilit\u00e9 plut\u00f4t que la compacit\u00e9 et la technicit\u00e9\n- D\u00e9composer le code en **petites fonctions**\n- **Chaque fonction doit logger son point d'entr\u00e9e** et lorsque cela est possible les param\u00e8tres qu'elle re\u00e7oit\n- **Variabiliser au maximum** et d\u00e9porter le maximum de variables dans le fichier de configuration ou les options d\u2019ex\u00e9cution.\n- **Simplifier l'algorithme** du programme principal \u00e0 sa plus simple expression\n- **G\u00e9rer les erreurs le plus finement possible** et au plus pr\u00e8s possible\n- **Limiter autant que possible les variables globales**\n- **Minimiser la fuite d'information dans les fichiers de journalisation** en utilisant les attributs `secret` des options et arguments dont les valeurs sont des informations sensibles (login, mot de passe, serveur de connexion, etc)\n- Cr\u00e9er **imp\u00e9rativement** une fonction `main()` qui contiendra l'algorithme principal du script\n- Cr\u00e9er l'environnement (objets et variables utilis\u00e9es au niveau global) dans la section `Point d'entr\u00e9e`.\n\n## Modules compl\u00e9mentaires\n\nLe cadriciel _Scrippy_ dont `scrippy-core` est le noyau dispose de modules facilitant l'\u00e9criture de scripts _Python_ \u00e9volu\u00e9s dans le respect des principes de base de _Scrippy_.\n\n| Module             | Utilit\u00e9                                                       |\n| ------------------ | ------------------------------------------------------------- |\n| `scrippy-template` | Gestion de fichier mod\u00e8les (bas\u00e9 sur _Jinja2_)                |\n| `scrippy-remote`   | Impl\u00e9mentation des protocoles _SSH/SFTP_ et _FTP_             |\n| `scrippy-mail`     | Impl\u00e9mentation des protocoles _SMTP_, _POP_ et _Spamassassin_ |\n| `scrippy-git`      | Gestion de d\u00e9p\u00f4ts _Git_                                       |\n| `scrippy-db`       | Gestion de base de donn\u00e9es (_PostgreSQL_ et _Oracle_)         |\n| `scrippy-api`      | Utilisation d'_API ReST_ (bas\u00e9 sur _resquets_)                |\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://codeberg.org/scrippy/scrippy-core",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "scrippy-core",
            "package_url": "https://pypi.org/project/scrippy-core/",
            "platform": null,
            "project_url": "https://pypi.org/project/scrippy-core/",
            "project_urls": {
                "Bug Tracker": "https://codeberg.org/scrippy/scrippy-core/issues",
                "Homepage": "https://codeberg.org/scrippy/scrippy-core"
            },
            "release_url": "https://pypi.org/project/scrippy-core/1.3.9/",
            "requires_dist": [
                "argcomplete (>=1.10.0)",
                "coloredlogs (>=10.0)",
                "prettytable (>=0.7.2)",
                "filelock (>=3.0.12)",
                "PyYAML (>=5.3)",
                "rich (>=10.16.2)",
                "twine ; extra == 'dev'",
                "wheel (>=0.37.0) ; extra == 'dev'",
                "flake8 (>=4.0.1) ; extra == 'dev'",
                "flake8-breakpoint (>=1.1.0) ; extra == 'dev'",
                "flake8-builtins (>=1.5.3) ; extra == 'dev'",
                "flake8-print (>=4.0.0) ; extra == 'dev'",
                "flake8-return (>=1.1.3) ; extra == 'dev'",
                "pep8-naming (>=0.8.2) ; extra == 'dev'",
                "pytest (>=6.2.2) ; extra == 'dev'",
                "pytest-cov (>=3.0.0) ; extra == 'dev'",
                "bump2version (>=1.0.1) ; extra == 'dev'",
                "setuptools (>=60.9.2) ; extra == 'dev'",
                "pypirc-chappers (>=1.0.8) ; extra == 'dev'",
                "pylint (>=2.12.2) ; extra == 'dev'"
            ],
            "requires_python": ">=3.8",
            "summary": "\"Module principal du cadriciel Scrippy\"",
            "version": "1.3.9",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16264957,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "38a70f7425728132f27c57a16d0c426e",
                    "sha256": "23ab3a5e15fd8b36a0e32c832be8e2bcf35b33462ad3be8d313a26bb81f74d29"
                },
                "downloads": -1,
                "filename": "scrippy_core-1.3.9-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "38a70f7425728132f27c57a16d0c426e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 30313,
                "upload_time": "2022-12-31T01:59:02",
                "upload_time_iso_8601": "2022-12-31T01:59:02.196378Z",
                "url": "https://files.pythonhosted.org/packages/22/cb/b8529c4ca2a8e7fa6c51fcecc8fe4bc06d701f1e36ec5b27c8bee5999f1a/scrippy_core-1.3.9-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c5299a811e01a07d5e7e0187ecfc06aa",
                    "sha256": "c6ce2f6141b871f1dda397db5eda2f18f9ce77744409a0b464dc8574b367e36f"
                },
                "downloads": -1,
                "filename": "scrippy-core-1.3.9.tar.gz",
                "has_sig": false,
                "md5_digest": "c5299a811e01a07d5e7e0187ecfc06aa",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 46946,
                "upload_time": "2022-12-31T01:59:04",
                "upload_time_iso_8601": "2022-12-31T01:59:04.281474Z",
                "url": "https://files.pythonhosted.org/packages/14/37/69fc51e5663183f95f5f3bee348da8c92700030236a2f78dd215fc870f1c/scrippy-core-1.3.9.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
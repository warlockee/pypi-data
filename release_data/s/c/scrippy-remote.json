{
    "2.0.7": {
        "info": {
            "author": "Michael Costa, Florent Chevalier",
            "author_email": "michael.costa@mcos.nc, florent.chevalier@gouv.nc",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Libraries :: Application Frameworks"
            ],
            "description": "![Build Status](https://drone.mcos.nc/api/badges/scrippy/scrippy-remote/status.svg) ![License](https://img.shields.io/static/v1?label=license&color=orange&message=MIT) ![Language](https://img.shields.io/static/v1?label=language&color=informational&message=Python)\n\n![Scrippy, mon ami le scrangourou](./scrippy-remote.png \"Scrippy, mon ami le scrangourou\")\n\n# `scrippy_remote`\n\nClient _SSH/SFTP/FTP_ pour le cadriciel [`Scrippy`](https://codeberg.org/scrippy).\n\n## Pr\u00e9requis\n\n### Modules Python\n\n#### Liste des modules n\u00e9cessaires\n\nLes modules list\u00e9s ci-dessous seront automatiquement install\u00e9s.\n\n- paramiko\n\n## Installation\n\n### Manuelle\n\n```bash\ngit clone https://codeberg.org/scrippy/scrippy-remote.git\ncd scrippy-remote\nsudo python3 -m pip install -r requirements.txt\nmake install\n```\n\n### Avec `pip`\n\n```bash\npip3 install scrippy-remote\n```\n\n### Utilisation\n\n### `scrippy_remote`\n\nCe module offre l'ensemble des objets, m\u00e9thodes et fonctions permettant les op\u00e9rations sur les h\u00f4tes distants accessibles via _SSH/SFTP_ ou _FTP_:\n- Ex\u00e9cution de commandes sur h\u00f4te distant\n- Copie de r\u00e9pertoires/fichiers sur h\u00f4te distant\n- Suppression de r\u00e9pertoires/fichiers sur h\u00f4te distant\n- Copie de fichiers entre h\u00f4tes distants (la machine locale agissant comme tampon)\n- ...\n\n**Attention:** Il appartient au d\u00e9veloppeur du script de penser \u00e0 fermer la connexion apr\u00e8s usage.\n\nLe module `scrippy_remote.remote` fournit plusieurs objets pour transf\u00e9rer des fichiers via _SFTP_, _FTP(es)_ ou _CIFS_ pour transf\u00e9rer des fichiers et _SSH_ pour l'ex\u00e9cution distante de commandes.\n\nLe code source du module `scrippy_remote.remote` et de ses sous-modules est \u00e9galement largement comment\u00e9 et reste la meilleure source de documentation.\n\n#### SSH/SFTP\n##### Ex\u00e9cuter une commande sur un h\u00f4te distant:\n\n```python\nimport logging\nfrom scrippy_remote import remote\n\nremote_host = \"srv.flying.circus\"\nremote_port = 22\nremote_user = \"luigi.vercotti\"\nkey_filename = \"/home/luigi.vercotti/.ssh/id_rsa\"\npassword = \"dead_parrot\"\n\nwith remote.Ssh(username=remote_user,\n                hostname=remote_host,\n                port=remote_port,\n                key_filename=key_filename,\n                password=password) as host:\n  stdout = host.exec_command(\"ls /home/luigi.vercotti\", return_stdout=True)\n  if stdout[\"exit_code\"] == 0:\n    for line in stdout[\"stdout\"]:\n      logging.info(line)\n```\n\n##### R\u00e9cup\u00e9rer un fichier distant:\n\n```python\nimport logging\nfrom scrippy_remote.remote import Ssh\nfrom scrippy_remote import ScrippyRemoteError\n\nremote_host = \"srv.flying.circus\"\nremote_port = 22\nremote_user = \"luigi.vercotti\"\nremote_path = \"/home/luigi.vercotti/piranha_brothers_files\"\nkey_filename = \"/home/luigi.vercotti/.ssh/id_rsa\"\npassword = \"dead_parrot\"\nlocal_path = \"/home/harry.fink\"\npattern = \".*\"\nrecursive = True\ndelete = False\nexit_on_error = True\n\nwith remote.Ssh(username=remote_user,\n                hostname=remote_host,\n                port=remote_port,\n                key_filename=key_filename,\n                password=password) as host:\n  try:\n    err = host.sftp_get(remote_path=remote_path,\n                        local_path=local_path,\n                        pattern=pattern,\n                        recursive=recursive,\n                        delete=delete,\n                        exit_on_error=exit_on_error)\n    logging.info(\"Errors: {}\".format(err))\n  except ScrippyRemoteError as e:\n    logging.critical(\"{}\".format(e))\n```\n\n##### Transf\u00e9rer des fichiers vers un h\u00f4te distant:\n\n```python\nfrom scrippy_remote.remote import Ssh\nfrom scrippy_remote import ScrippyRemoteError\n\nremote_host = \"srv.flying.circus\"\nremote_port = 22\nremote_user = \"luigi.vercotti\"\nremote_path = \"/home/luigi.vercotti\"\nkey_filename = \"/home/luigi.vercotti/.ssh/id_rsa\"\npassword = \"dead_parrot\"\nlocal_path = \"/home/harry.fink\"\npattern = \".*\"\nrecursive = True\ndelete = True\nexit_on_error = True\n\nwith Ssh(username=remote_user,\n         hostname=remote_host,\n         port=remote_port,\n         key_filename=key_filename) as host:\n  try:\n    err = host.sftp_put(local_path=local_path,\n                        remote_path=remote_path,\n                        pattern=pattern,\n                        recursive=recursive,\n                        delete=delete,\n                        exit_on_error=exit_on_error)\n    logging.info(\"Errors: {}\".format(err))\n  except ScrippyRemoteError as e:\n    logging.critical(\"{}\".format(e))\n```\n\n#### FTP\n\n##### Envoi de fichier\n\n```python\nremote_host = \"srv.flying.circus\"\nremote_port = 21\nremote_user = \"luiggi.vercotti\"\nlocal_file = \"/home/luiggi.vercotti/parrot.txt\"\nremote_dir = \"dead/parrot\"\npassword = \"d34dp4rr0t\"\nftp_tls = True\nftp_explicit_tls = True\nftp_ssl_verify = False\n# Si `ftp_create_dir` vaut `True`, l'arborescence locale sera recr\u00e9e sur l'h\u00f4te distant\nftp_create_dir = True\n\n# Copie le fichier local \"/home/luiggi.vercotti/parrot.txt\" dans\n# le r\u00e9pertoire distant \"dead/parrot/home/luiggi.vercotti\"\nwith Ftp(username=remote_user,\n          hostname=remote_host,\n          port=remote_port,\n          password=password,\n          tls=ftp_tls,\n          explicit=ftp_explicit_tls,\n          ssl_verify=ftp_ssl_verify) as host:\n  host.put_file(local_file=local_file,\n                remote_dir=remote_dir,\n                create_dir=ftp_create_dir)\n```\n\n##### Lister les fichiers d'un r\u00e9petoire distant\n\n```python\nremote_host = \"srv.flying.circus\"\nremote_port = 21\nremote_user = \"luiggi.vercotti\"\nremote_dir = \"dead/parrot\"\npassword = \"d34dp4rr0t\"\n# Pattern est une expression r\u00e9guli\u00e8re\npattern = \".*\\.txt\"\nftp_tls = True\nftp_explicit_tls = True\nftp_ssl_verify = False\n\n# Liste tous les fichiers *.txt du r\u00e9pertoire distant \"dead/parrot\"\nwith Ftp(username=remote_user,\n           hostname=remote_host,\n           port=remote_port,\n           password=password,\n           tls=ftp_tls,\n           explicit=ftp_explicit_tls,\n           ssl_verify=ftp_ssl_verify) as host:\n    files = host.list(remote_dir=remote_dir,\n                      pattern=pattern)\n```\n\n\n##### R\u00e9cup\u00e8re un fichier distant\n\n```python\nremote_host = \"srv.flying.circus\"\nremote_port = 21\nremote_user = \"luiggi.vercotti\"\nremote_dir = \"dead/parrot\"\npassword = \"d34dp4rr0t\"\nremote_file = \"parrot.txt\"\nlocal_dir = \"/home/luiggi.vercotti\"\n# Si `ftp_create_dir` vaut `True`, l'arborescence distante sera recr\u00e9e sur l'h\u00f4te local\nftp_create_dir = True\nftp_tls = True\nftp_explicit_tls = True\nftp_ssl_verify = False\n\nwith Ftp(username=remote_user,\n          hostname=remote_host,\n          port=remote_port,\n          password=password,\n          tls=ftp_tls,\n          explicit=ftp_explicit_tls,\n          ssl_verify=ftp_ssl_verify) as host:\n  remote_file = os.path.join(remote_dir, remote_file)\n  host.get_file(remote_file=remote_file,\n                local_dir=local_dir,\n                create_dir=ftp_create_dir)\n```\n\n##### Supression d'un fichier distant\n\n```python\nremote_host = \"srv.flying.circus\"\nremote_port = 21\nremote_user = \"luiggi.vercotti\"\nremote_dir = \"dead/parrot\"\npassword = \"d34dp4rr0t\"\nremote_file = \"parrot.txt\"\nftp_tls = True\nftp_explicit_tls = True\nftp_ssl_verify = False\n\nwith Ftp(username=remote_user,\n          hostname=remote_host,\n          port=remote_port,\n          password=password,\n          tls=ftp_tls,\n          explicit=ftp_explicit_tls,\n          ssl_verify=ftp_ssl_verify) as host:\n  remote_file = os.path.join(remote_dir, remote_file)\n  host.delete_remote_file(remote_file)\n```\n\n##### Suppression d'un r\u00e9pertoire distant\n\nLe r\u00e9pertoire sera supprim\u00e9 unqiuement s'il est vide.\n\n```python\nremote_host = \"srv.flying.circus\"\nremote_port = 21\nremote_user = \"luiggi.vercotti\"\nremote_dir = \"dead/parrot\"\npassword = \"d34dp4rr0t\"\nftp_tls = True\nftp_explicit_tls = True\nftp_ssl_verify = False\n\nwith Ftp(username=remote_user,\n           hostname=remote_host,\n           port=remote_port,\n           password=password,\n           tls=ftp_tls,\n           explicit=ftp_explicit_tls,\n           ssl_verify=ftp_ssl_verify) as host:\n  host.delete_remote_dir(remote_dir)\n```\n\n---\n\n#### CIFS\n\nExemple d'utilisation :\n\n```python\nwith Cifs(\n  hostname='SRV2GNC.gnc.recif.nc',\n  shared_folder='BackupConfluence',\n  username='svc.conf-bkp',\n  password='MonSuperMotDePasse') as cifs:\n\n  cifs.create_directory('myfolder')\n\n  cifs.put_file(local_filepath='./mlocal-file.txt', remote_filepath='myfolder/remote-file.txt')\n\n  cifs.get_file(remote_filepath='myfolder/remote-file.txt', local_filepath='./copy.txt')\n\n  with cifs.open_for_write('myfolder/new-remote-file.txt') as file:\n    file.write(b'Hello from cifs.open_for_write')\n\n  with cifs.open_for_read('myfolder/new-remote-file.txt') as file:\n    print(file.readlines())\n\n  cifs.delete_directory_content('myfolder')\n```\n\n---\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://codeberg.org/scrippy/scrippy-remote",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "scrippy-remote",
            "package_url": "https://pypi.org/project/scrippy-remote/",
            "platform": null,
            "project_url": "https://pypi.org/project/scrippy-remote/",
            "project_urls": {
                "Homepage": "https://codeberg.org/scrippy/scrippy-remote"
            },
            "release_url": "https://pypi.org/project/scrippy-remote/2.0.7/",
            "requires_dist": [
                "paramiko (>=2.6.0)",
                "pysmb (>=1.2.7)",
                "twine ; extra == 'dev'",
                "wheel (>=0.37.0) ; extra == 'dev'",
                "flake8 (>=4.0.1) ; extra == 'dev'",
                "flake8-breakpoint (>=1.1.0) ; extra == 'dev'",
                "flake8-builtins (>=1.5.3) ; extra == 'dev'",
                "flake8-print (>=4.0.0) ; extra == 'dev'",
                "flake8-return (>=1.1.3) ; extra == 'dev'",
                "pep8-naming (>=0.8.2) ; extra == 'dev'",
                "pytest (>=6.2.2) ; extra == 'dev'",
                "pytest-cov (>=3.0.0) ; extra == 'dev'",
                "bump2version (>=1.0.1) ; extra == 'dev'",
                "setuptools (>=60.9.2) ; extra == 'dev'",
                "pypirc-chappers (>=1.0.8) ; extra == 'dev'",
                "pylint (>=2.12.2) ; extra == 'dev'"
            ],
            "requires_python": ">=3.8",
            "summary": "\"Client SSH, SFTP et FTP pour le cadriciel Scrippy.\"",
            "version": "2.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16264905,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dad365be46af47da660e422423747875",
                    "sha256": "95b72e084871ff04edcab1a387287961f26cea89dee6b01144d2121574c5f1eb"
                },
                "downloads": -1,
                "filename": "scrippy_remote-2.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dad365be46af47da660e422423747875",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 17849,
                "upload_time": "2022-12-31T05:49:17",
                "upload_time_iso_8601": "2022-12-31T05:49:17.182541Z",
                "url": "https://files.pythonhosted.org/packages/b1/39/1258cb0b62b363aec701a12d8c1ae87e8b3744d85af66373ffa80d00d8fc/scrippy_remote-2.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "da49d294d3a3f7ec6010faa51a3ca3a1",
                    "sha256": "8f30987991113883a5a395cb9ca33bb8f1d5a259c4966fe067caeae62ee710c5"
                },
                "downloads": -1,
                "filename": "scrippy-remote-2.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "da49d294d3a3f7ec6010faa51a3ca3a1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 17681,
                "upload_time": "2022-12-31T05:49:18",
                "upload_time_iso_8601": "2022-12-31T05:49:18.871463Z",
                "url": "https://files.pythonhosted.org/packages/58/ac/067eb2ba4b748e0b9ceaf9b966b8f565f9767346463846f6ec54377255f2/scrippy-remote-2.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
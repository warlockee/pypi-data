{
    "0.0.1": {
        "info": {
            "author": "Ali Furkan Kalay",
            "author_email": "alfurka@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alfurka/synloc",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "synloc",
            "package_url": "https://pypi.org/project/synloc/",
            "platform": null,
            "project_url": "https://pypi.org/project/synloc/",
            "project_urls": {
                "Homepage": "https://github.com/alfurka/synloc"
            },
            "release_url": "https://pypi.org/project/synloc/0.0.1/",
            "requires_dist": [
                "pandas",
                "numpy",
                "scipy",
                "matplotlib",
                "synthia",
                "sklearn",
                "tqdm"
            ],
            "requires_python": ">=3.8",
            "summary": "A Python package to create synthetic data from a locally and sequentially estimated distributions.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16214001,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b5582a4aa31c1877f11cf33e0f101299",
                    "sha256": "302d10d7f77b8362cded792f04881f738be87be09ee41951d1ba20c8cb792671"
                },
                "downloads": -1,
                "filename": "synloc-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b5582a4aa31c1877f11cf33e0f101299",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 7657,
                "upload_time": "2022-09-11T04:21:43",
                "upload_time_iso_8601": "2022-09-11T04:21:43.134022Z",
                "url": "https://files.pythonhosted.org/packages/d5/dd/e8f51a2d4d03744cb6a9a9be412ddb030f9596a28b077422c892a77098fe/synloc-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Ali Furkan Kalay",
            "author_email": "alfurka@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alfurka/synloc",
            "keywords": "copulas,distributions,sampling,synthetic-data,oversampling,nonparametric-distributions,semiparametric,nonparametric,knn",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "synloc",
            "package_url": "https://pypi.org/project/synloc/",
            "platform": null,
            "project_url": "https://pypi.org/project/synloc/",
            "project_urls": {
                "Homepage": "https://github.com/alfurka/synloc"
            },
            "release_url": "https://pypi.org/project/synloc/0.0.2/",
            "requires_dist": [
                "pandas",
                "numpy",
                "scipy",
                "matplotlib",
                "synthia",
                "sklearn",
                "tqdm"
            ],
            "requires_python": ">=3.8",
            "summary": "A Python package to create synthetic data from a locally and sequentially estimated distributions.",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16214001,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9c1ca98fa538e9431caed27986600e85",
                    "sha256": "653561643c6034b104a9a8f94ab4778c07e43ca61d69da33e199cd83a6a82fb2"
                },
                "downloads": -1,
                "filename": "synloc-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9c1ca98fa538e9431caed27986600e85",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 7871,
                "upload_time": "2022-09-15T03:27:14",
                "upload_time_iso_8601": "2022-09-15T03:27:14.559033Z",
                "url": "https://files.pythonhosted.org/packages/f6/57/793c70948b5a626363b3ca25f266c456561c74df4c853e5d6f18b105af6f/synloc-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "Ali Furkan Kalay",
            "author_email": "alfurka@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alfurka/synloc",
            "keywords": "copulas,distributions,sampling,synthetic-data,oversampling,nonparametric-distributions,semiparametric,nonparametric,knn,clustering,k-means,multivariate-distributions",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "synloc",
            "package_url": "https://pypi.org/project/synloc/",
            "platform": null,
            "project_url": "https://pypi.org/project/synloc/",
            "project_urls": {
                "Homepage": "https://github.com/alfurka/synloc"
            },
            "release_url": "https://pypi.org/project/synloc/0.1.0/",
            "requires_dist": [
                "pandas",
                "numpy",
                "scipy",
                "matplotlib",
                "sklearn",
                "tqdm",
                "synthia",
                "k-means-constrained"
            ],
            "requires_python": ">=3.8",
            "summary": "A Python package to create synthetic data from a locally and sequentially estimated distributions.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16214001,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "12eb155603207308df3e160bdc832a19",
                    "sha256": "0f0e236e270eada79186bfb0f88664342e57b8084d3f3d151037c2eef613299d"
                },
                "downloads": -1,
                "filename": "synloc-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "12eb155603207308df3e160bdc832a19",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 9466,
                "upload_time": "2022-12-26T07:42:18",
                "upload_time_iso_8601": "2022-12-26T07:42:18.561766Z",
                "url": "https://files.pythonhosted.org/packages/89/fa/a62c7f04dd78d2c2fc4dc45258b31e68a7f510f7f9b73852d8e9ae4a3d98/synloc-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Ali Furkan Kalay",
            "author_email": "alfurka@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# synloc: A Local Resampler Algorithm to Create Synthetic Data\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://raw.githubusercontent.com/alfurka/synloc/main/README_files/logo_white_bc.png\" />\r\n</p>\r\n\r\n`synloc` is an algorithm to sequentially and locally estimate distributions to create synthetic values from a sample. The proposed methodology can be combined with parametric and nonparametric distributions. \r\n\r\n# Installation\r\n\r\n`synloc` can be installed through [PyPI](https://pypi.org/):\r\n\r\n```\r\npip install synloc\r\n```\r\n\r\n# Examples\r\n\r\nAssume that we have a sample with three variables with the following distributions:\r\n\r\n$$\r\n\\begin{aligned}\r\nx &\\sim Beta(0.1,\\,0.1)\\\\\r\ny &\\sim Beta(0.1,\\, 0.5)\\\\\r\nz &\\sim 10 * y + Normal(0,\\,1)\r\n\\end{aligned}\r\n$$\r\n\r\nThe distribution can be generated by `tools` module in `synloc`:\r\n\r\n\r\n```python\r\nfrom synloc.tools import sample_trivariate_xyz\r\ndata = sample_trivariate_xyz() # Generates a sample with size 1000 by default. \r\n```\r\n\r\n## Creating synthetic values with Multivariate Normal Distribution\r\n\r\nInitializing the resampler:\r\n\r\n\r\n```python\r\nfrom synloc import LocalCov\r\nresampler = LocalCov(data = data, K = 30)\r\n```\r\n\r\n**Subsample** size is defined as `K=30`. Now, we locally estimate the multivariate normal distribution and from each estimated distributions we draw \"synthetic values.\"\r\n\r\n\r\n```python\r\nsyn_data = resampler.fit() \r\n```\r\n\r\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:01<00:00, 687.53it/s]\r\n    \r\n\r\nThe default sample size is the size of the original sample (i.e., 1000). It can be changed while fitting the distributions:\r\n\r\n```python\r\nsyn_data = resampler.fit(100) # a sample with size 100 created.\r\n```\r\n\r\n\r\n`syn_data` is a [pandas.DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html) where all variables are synthesized. \r\n\r\nComparing the original sample using a 3-D Scatter:\r\n\r\n\r\n```python\r\nresampler.comparePlots(['x','y','z'])\r\n```\r\n\r\n\r\n    \r\n![](https://raw.githubusercontent.com/alfurka/synloc/v.0.0.2/README_files/README_7_0.png)\r\n\r\n## Creating synthetic values with Gaussian Copula\r\n\r\nInitializing the resampler:\r\n\r\n\r\n```python\r\nfrom synloc import LocalGaussianCopula\r\nresampler = LocalGaussianCopula(data = data, K = 30)\r\n```\r\n\r\nWe locally estimate the `Gaussian Copula` and from each estimated distributions we draw \"synthetic values.\"\r\n\r\n\r\n```python\r\nsyn_data_copula = resampler.fit() \r\n```\r\n\r\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:03<00:00, 272.71it/s]\r\n    \r\n\r\nComparing the original sample using a 3-D Scatter:\r\n\r\n\r\n```python\r\nresampler.comparePlots(['x','y','z'])\r\n```\r\n \r\n![](https://raw.githubusercontent.com/alfurka/synloc/v.0.0.2/README_files/README_13_0.png)\r\n\r\nEven though the distribution of the original sample substantially differs from multivariate normal, locally estimated distributions can replicate the original distribution quite accurately. \r\n\r\n# Customized Models\r\n\r\n`kNNResampler` class can be used to utilize estimate and resample from any distributions. \r\n\r\n## functional Principal Component Analysis (fPCA)\r\n\r\nFor example, if the original sample is high-dimensional data, the user can reduce the dimension with **fPCA**. It is possible to implement it with [FPCADataGenerator](https://dmey.github.io/synthia/fpca.html) function in [Synthia](https://github.com/dmey/synthia) package:\r\n\r\n\r\n```python\r\nfrom synloc import kNNResampler\r\nfrom synloc.tools import stochastic_rounder\r\nfrom synthia import FPCADataGenerator\r\n\r\nclass LocalFPCA(kNNResampler):\r\n    def __init__(self, data, K = 30, normalize = True, clipping = True, Args_NearestNeighbors = {}):\r\n        super().__init__(data, K, normalize, clipping, Args_NearestNeighbors, method = self.method)\r\n    def method(self, data):\r\n        generator = FPCADataGenerator()\r\n        generator.fit(data, n_fpca_components=2)\r\n        return generator.generate(1)[0]\r\n```\r\n\r\nUsing `kNNResampler` as a parent class, we created `LocalFPCA`. The key component is defining the method for `kNNSampler`. \r\n\r\n```python\r\nsuper().__init__(data, K, normalize, clipping, Args_NearestNeighbors, method = self.method)\r\n```\r\n\r\nIn the `LocalFPCA` class we define the `self.method`:\r\n\r\n```python\r\ndef method(self, data):\r\n    generator = FPCADataGenerator()\r\n    generator.fit(data, n_fpca_components=2) # reducing dimension to 2\r\n    return generator.generate(1)[0]\r\n```\r\n\r\n\r\n### Example\r\n\r\n\r\n```python\r\nresampler = LocalFPCA(data = data)\r\nresampler.fit()\r\nresampler.comparePlots(['x','y','z'])\r\n```\r\n\r\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:02<00:00, 346.47it/s]\r\n    \r\n\r\n\r\n![](https://raw.githubusercontent.com/alfurka/synloc/v.0.0.2/README_files/README_17_1.png) \r\n\r\n\r\n## Problem with Discrete Variables\r\n\r\nSo far, we assumed that original data set contains only continuous variables. It is possible to address this problem by rounding these variables (stochastically or deterministically), or we can use some multivariate distributions that can handle the mixed type variables. Then, we need to define a new a subclass of `kNNSampler`. \r\n\r\nOne solution is it use [mixedvines](https://github.com/asnelt/mixedvines) package. It allows to specify the discrete type variables. \r\n\r\n\r\n```python\r\nfrom synloc import kNNResampler\r\nfrom mixedvines.mixedvine import MixedVine # pip install mixedvines\r\n\r\n\r\nclass LocalMixedVine(kNNResampler):\r\n    def __init__(self, data, cont_cols, K = 30, normalize = True, clipping = True, Args_NearestNeighbors = {}):\r\n        super().__init__(data, K, normalize, clipping, Args_NearestNeighbors, method = self.method)\r\n        self.cont_cols = cont_cols\r\n    \r\n    def method(self, data):\r\n        generator = MixedVine.fit(data.values, self.cont_cols)\r\n        return generator.rvs(1)[0]\r\n```\r\n\r\n`LocalMixedVine` takes the argument `cont_cols` which is a boolean list. `True` if it is a continuous variable, `False` if it is discrete. Further, specification can be done following the [documentation](https://mixedvines.readthedocs.io/en/latest/). \r\n\r\n### Example\r\n\r\n\r\n```python\r\nimport warnings\r\nimport pandas as pd\r\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning) \r\n\r\ndata2 = pd.read_stata('../extract.dta')\r\ndata2 = data2[['age','educ', 'annwage']]\r\ndata2 = data2[~data2.isna().any(1)]\r\ndata2.age = data2.age.astype('int')\r\ndata2.educ = data2.educ.astype('int')\r\ndata2 = data2.sample(1000)\r\n\r\nresampler = LocalMixedVine(data = data2, K = 50, cont_cols = [False, False, True])\r\nresampler.fit()\r\nresampler.comparePlots(['age','educ', 'annwage'])\r\n```\r\n\r\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [02:04<00:00,  8.05it/s]\r\n    \r\n\r\n\r\n![](https://raw.githubusercontent.com/alfurka/synloc/v.0.0.2/README_files/README_21_1.png)\r\n\r\n\r\n```python\r\n# Original sample looks like\r\nprint(data2.head())\r\n```\r\n\r\n           age  educ  annwage\r\n    10538   28    12  22801.0\r\n    11715   34    16  16000.0\r\n    3544    31    11  12500.0\r\n    10149   36    13  19000.0\r\n    3918    28    16  16993.0\r\n    \r\n\r\n\r\n```python\r\n#synthetic sample looks like\r\nprint(resampler.synthetic.head())\r\n```\r\n\r\n       age  educ       annwage\r\n    0   29    12  16236.643091\r\n    1   33    16  18432.093681\r\n    2   30    11  12190.666403\r\n    3   36    13  20126.695065\r\n    4   27    15  23331.840903\r\n    \r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alfurka/synloc",
            "keywords": "copulas,distributions,sampling,synthetic-data,oversampling,nonparametric-distributions,semiparametric,nonparametric,knn,clustering,k-means,multivariate-distributions",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "synloc",
            "package_url": "https://pypi.org/project/synloc/",
            "platform": null,
            "project_url": "https://pypi.org/project/synloc/",
            "project_urls": {
                "Homepage": "https://github.com/alfurka/synloc"
            },
            "release_url": "https://pypi.org/project/synloc/0.1.1/",
            "requires_dist": [
                "pandas",
                "numpy",
                "scipy",
                "matplotlib",
                "scikit-learn",
                "tqdm",
                "synthia",
                "k-means-constrained"
            ],
            "requires_python": ">=3.8",
            "summary": "A Python package to create synthetic data from a locally and sequentially estimated distributions.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16214001,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7996c761f626dbf6dcdb6e06ca6ab6dd",
                    "sha256": "c5d63822b276ccd2a0ac799296c69c44fd7ee20ca281ee16d27762e5d7229d85"
                },
                "downloads": -1,
                "filename": "synloc-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7996c761f626dbf6dcdb6e06ca6ab6dd",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 9506,
                "upload_time": "2022-12-26T08:02:32",
                "upload_time_iso_8601": "2022-12-26T08:02:32.988634Z",
                "url": "https://files.pythonhosted.org/packages/29/c1/5f71f6fa37f33f2e3c666ee06e6f035aeb46b2ce9f53cdf045e217a444e1/synloc-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
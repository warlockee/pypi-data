{
    "0.1.0": {
        "info": {
            "author": "Alvaro Bartolome",
            "author_email": null,
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "# \ud83d\udd10 Serialize JAX/Flax models with `safetensors`\n\n`safejax` is a Python package to serialize JAX and Flax models using `safetensors`\nas the tensor storage format, instead of relying on `pickle`. For more details on why\n`safetensors` is safer than `pickle` please check https://github.com/huggingface/safetensors.\n\n## \ud83d\udee0\ufe0f Requirements & Installation\n\n`safejax` requires Python 3.7 or above\n\n```bash\npip install safejax --upgrade\n```\n\n## \ud83d\udcbb Usage\n\n```python\nimport jax\nfrom flax import linen as nn\nfrom jax import numpy as jnp\n\nfrom safejax.flax import serialize\n\n\nclass SingleLayerModel(nn.Module):\n    features: int\n\n    @nn.compact\n    def __call__(self, x):\n        x = nn.Dense(features=self.features)(x)\n        return x\n\n\nmodel = SingleLayerModel(features=1)\n\nrng = jax.random.PRNGKey(0)\nparams = model.init(rng, jnp.ones((1, 1)))\n\nserialized = serialize(frozen_or_unfrozen_dict=params)\nassert isinstance(serialized, bytes)\nassert len(serialized) > 0\n```\n\nMore examples can be found at [`examples/`](./examples).\n\n## \ud83e\udd14 Why `safejax`?\n\n`safetensors` defines an easy and fast (zero-copy) format to store tensors,\nwhile `pickle` has some known weaknesses and security issues. `safetensors`\nis also a storage format that is intended to be trivial to the framework\nused to load the tensors. More in depth information can be found at \nhttps://github.com/huggingface/safetensors.\n\n`flax` defines a dictionary-like class named `FrozenDict` that is used to\nstore the tensors in memory, it can be dumped either into `bytes` in `MessagePack`\nformat or as a `state_dict`.\n\nAnyway, `flax` still uses `pickle` as the format for storing the tensors, so \nthere are no plans from HuggingFace to extend `safetensors` to support anything\nmore than tensors e.g. `FrozenDict`s, see their response at\nhttps://github.com/huggingface/safetensors/discussions/138.\n\nSo `safejax` was created so as to easily provide a way to serialize `FrozenDict`s\nusing `safetensors` as the tensor storage format instead of `pickle`.\n\n### \ud83d\udcc4 Main differences with `flax.serialization`\n\n* `flax.serialization.to_bytes` uses `pickle` as the tensor storage format, while\n`safejax.flax.serialize` uses `safetensors`\n* `flax.serialization.from_bytes` requires the `target` to be instantiated, while\n`safejax.flax.deserialize` just needs the encoded bytes\n\n## \ud83c\udfcb\ud83c\udffc Benchmark\n\nBenchmarks use [`hyperfine`](https://github.com/sharkdp/hyperfine) so it needs\nto be installed first.\n\n```bash\n$ hyperfine --warmup 2 \"hatch run python benchmark.py benchmark_safejax\" \"hatch run python benchmark.py benchmark_flax\"\nBenchmark 1: hatch run python benchmark.py benchmark_safejax\n  Time (mean \u00b1 \u03c3):     671.3 ms \u00b1   7.5 ms    [User: 2169.9 ms, System: 391.4 ms]\n  Range (min \u2026 max):   652.2 ms \u2026 680.7 ms    10 runs\n \nBenchmark 2: hatch run python benchmark.py benchmark_flax\n  Time (mean \u00b1 \u03c3):     676.0 ms \u00b1  12.8 ms    [User: 2245.6 ms, System: 324.0 ms]\n  Range (min \u2026 max):   650.3 ms \u2026 690.3 ms    10 runs\n \nSummary\n  'hatch run python benchmark.py benchmark_safejax' ran\n    1.01 \u00b1 0.02 times faster than 'hatch run python benchmark.py benchmark_flax'\n```\n\nAs we can see the difference is almost not noticeable, since the benchmark is using a \n2-tensor dictionary, which should be faster using any method. The main difference is on\nthe `safetensors` usage for the tensor storage instead of `pickle`.\n\nMore in detailed and complex benchmarks will be prepared soon!\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": null,
            "keywords": null,
            "license": null,
            "maintainer": null,
            "maintainer_email": null,
            "name": "safejax",
            "package_url": "https://pypi.org/project/safejax/",
            "platform": null,
            "project_url": "https://pypi.org/project/safejax/",
            "project_urls": {
                "Documentation": "https://alvarobartt.github.io/safejax",
                "Issues": "https://github.com/alvarobartt/safejax/issues",
                "Source": "https://github.com/alvarobartt/safejax"
            },
            "release_url": "https://pypi.org/project/safejax/0.1.0/",
            "requires_dist": [
                "flax~=0.6.2",
                "jaxlib~=0.3.25",
                "jax~=0.3.25",
                "safetensors~=0.2.5",
                "black~=22.10.0; extra == 'quality'",
                "pre-commit~=2.20.0; extra == 'quality'",
                "ruff~=0.0.192; extra == 'quality'",
                "pytest~=7.1.2; extra == 'tests'"
            ],
            "requires_python": ">=3.7",
            "summary": "Serialize JAX/Flax models with `safetensors`",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16204700,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "0e747097a42a0f1e13aa4af7ae2417dc",
                    "sha256": "0213b31e6b78cf56fd9599fe518c033df8a0846dd3f3ca55f890452f5ee2184a"
                },
                "downloads": -1,
                "filename": "safejax-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0e747097a42a0f1e13aa4af7ae2417dc",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 5499,
                "upload_time": "2022-12-24T11:50:32",
                "upload_time_iso_8601": "2022-12-24T11:50:32.392150Z",
                "url": "https://files.pythonhosted.org/packages/0e/5a/8389dde86b07440b9e8a8b8f1fb2572356c8354af958ce0d1bcbca88c0d4/safejax-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "51960b5ed56b360a7eacfc668a2d906d",
                    "sha256": "fedfbb45ad06d9f60cde0d4ac78929f9cbbe0ac218e38be9cb84f5b04a59eda5"
                },
                "downloads": -1,
                "filename": "safejax-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "51960b5ed56b360a7eacfc668a2d906d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 5731,
                "upload_time": "2022-12-24T11:50:33",
                "upload_time_iso_8601": "2022-12-24T11:50:33.891584Z",
                "url": "https://files.pythonhosted.org/packages/9b/55/3367549053d76533f20d0509bef15182423f007ef1540d0245580b9492bf/safejax-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
{
    "0.1.0": {
        "info": {
            "author": "",
            "author_email": "Leonardo Corona Garza <leocoronag@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3"
            ],
            "description": "# spotifyatlas\n\n### A pythonic wrapper for the Spotify web API.\n\nBy Leonardo - UmActually\n\n`spotifyatlas` is a straightforward library meant to simplify the process of interacting with **Spotify's web API**. Whether you are trying to automate the process of **search queries**, or **modifying your playlists**, spotifyatlas has tools for your scripting (or webdev) needs, all in a clean, object-oriented style.\n\nMost of the package's functionality is included in the ``SpotifyAPI`` class, which only needs to be initialized with the **credentials** of your client application. This codebase was originally used to retrieve track details for **Discord bots**, so most of the functions, as of now, revolve around playlists, albums, top tracks of artists, and whatnot.\n\n### Basic Usage\n\n_Refer to the [Installation](#installation) section for information on how to install the package with `pip`._\n\nThe first step to interact with the Spotify API is to register a new **application** in the **[Spotify for Developers](https://developer.spotify.com/dashboard/)** page. Worry not: this process is completely free for any Spotify user (with an account).\n\nWith that out of the way, go ahead and initialize a new `SpotifyAPI` object with the credentials of your app (client ID and client secret):\n\n```python\nfrom spotifyatlas import SpotifyAPI\nspoti = SpotifyAPI('<my-client-id>', '<my-client-secret>')\n```\n\nIf you wish to retrieve the **tracks and/or details** of anything in Spotify, the universal `get()` method many times will get you covered. Try it by pasting the share link of your favorite playlist. It will return a `Result`: the playlist tracks are located in the `tracks` attribute.\n\n```python\nfrom spotifyatlas import SpotifyAPI\nspoti = SpotifyAPI('<my-client-id>', '<my-client-secret>')\nresult = spoti.get('https://open.spotify.com/playlist/6xTnvRqIKptVfgcT8gN4Bb')\nprint(result.tracks)\n# [Track('Goliath', 'The Mars Volta', '3bi3Ycf0ZlRHvSg0IxlMwM'), ... ]\n```\n\nA `Track` contains the `name`, `artist` and `id` of a song. Neatly list the contents of your playlist like this:\n\n```python\nfor i, track in enumerate(result.tracks, 1):\n    print(i, track.name, track.artist, sep=' - ')\n# 1 - Goliath - The Mars Volta\n# 2 - Juicy - 2005 Remaster - The Notorious B.I.G.\n# 3 - O Peso da Cruz - Supercombo\n# 4 - Count The People (feat. Jessie Reyez & T-Pain) - Jacob Collier\n# ...\n```\n\nThe following methods offer the same functionality, although more specific:\n\n- `get_playlist()` for public playlists.\n\n- `get_track()` for tracks.\n\n- `get_artist()` for artists and their top 10 tracks in the US.\n\n- `get_album()` for albums.\n\nAll four require the `url` or the ID of the element as the first argument.\n\nThese other methods require **user consent**, and thus will result in the **browser** opening for the authorization of your application to act on behalf of the user:\n\n- `get_private_playlist()` for private playlists you own.\n\n- `add_to_playlist()` to add a batch of `Track`s to a playlist.\n\n- `clear_playlist()` to remove all the contents of a playlist.\n\n- `rearrange_playlist()` to change the position of a range of tracks.\n\n_Note: authorizing the application in the Spotify authorization page requires a **redirection** page to go to. By default, this library will temporarily **host a local page** on http://localhost:8000. Thus, you **will need to add this URL** to the allowed redirection URLs on the dashboard of your application in the **[Spotify for Developers](https://developer.spotify.com/dashboard/)** site._\n\nThe complete list of parameters/arguments of a function can be found in its documentation.\n\n---\n\n## Installation\n\nTo install spotifyatlas, use **pip** in the terminal:\n\n**Windows**\n```commandline\npip install spotifyatlas\n```\n\n**macOS / Linux**\n```commandline\npython3 -m pip install spotifyatlas\n```\n\n---\n\n## More Examples\n\nFor the inquisitive user, here are some more code examples out the top of my head:\n\n### 1. Rearrange the tracks of a playlist by artist, alphabetically\n\n```python\nfrom spotifyatlas import SpotifyAPI, Track\n\n\ndef artist_sort_key(_track: Track) -> str:\n    return _track.artist.lower()\n\n\nMY_PLAYLIST = '<my-playlist-link>'\nspoti = SpotifyAPI('<my-client-id>', '<my-client-secret>')\n\nresult = spoti.clear_playlist(MY_PLAYLIST)\ntracks = result.tracks\ntracks.sort(key=artist_sort_key)\nspoti.add_to_playlist(MY_PLAYLIST, tracks)\n```\n\n### 2. Find the songs that two playlists have in common\n\n```python\nfrom spotifyatlas import SpotifyAPI\n\nMY_PLAYLIST = '<my-playlist-link>'\nMY_FRIENDS_PLAYLIST = '<my-friends-playlist-link>'\n\nspoti = SpotifyAPI('<my-client-id>', '<my-client-secret>')\n\nplaylist1 = spoti.get(MY_PLAYLIST).tracks\nplaylist2 = spoti.get(MY_FRIENDS_PLAYLIST).tracks\n\n# Set theory!!!\nblend = set(playlist1).intersection(set(playlist2))\nfor i, track in enumerate(blend, 1):\n    print(i, track.name, track.artist, sep=' - ')\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "spotify,api,wrapper,web,requests",
            "license": "Copyright (c) 2022 Leonardo Corona Garza  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
            "maintainer": "",
            "maintainer_email": "",
            "name": "spotifyatlas",
            "package_url": "https://pypi.org/project/spotifyatlas/",
            "platform": null,
            "project_url": "https://pypi.org/project/spotifyatlas/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/spotifyatlas/0.1.0/",
            "requires_dist": [
                "requests (>=2.25.1)"
            ],
            "requires_python": ">=3.7",
            "summary": "A pythonic wrapper for the Spotify web API.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16217253,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "583a01a3c8d11ff059403f8b4dd34f67",
                    "sha256": "bfab9b489612a0ec9e23dbd6b099f4eff87db414c347e329a5ca367a24f2415b"
                },
                "downloads": -1,
                "filename": "spotifyatlas-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "583a01a3c8d11ff059403f8b4dd34f67",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 14371,
                "upload_time": "2022-12-26T17:15:57",
                "upload_time_iso_8601": "2022-12-26T17:15:57.945889Z",
                "url": "https://files.pythonhosted.org/packages/ec/4e/1cefcfc053e75ceecb7d04a572861cd5f9762ffbe577c34cbbc455f06063/spotifyatlas-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a0c406715493f5c6551c6f6ff8c4530a",
                    "sha256": "ec5c5112afcf7cec0814e9325ff9636ec977a294adeae37895b2bf1e6ea18907"
                },
                "downloads": -1,
                "filename": "spotifyatlas-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "a0c406715493f5c6551c6f6ff8c4530a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 13952,
                "upload_time": "2022-12-26T17:15:59",
                "upload_time_iso_8601": "2022-12-26T17:15:59.742199Z",
                "url": "https://files.pythonhosted.org/packages/e5/df/a07de66090b08d2ee316a24f6b485ebb332875a768cca5a890075972973d/spotifyatlas-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
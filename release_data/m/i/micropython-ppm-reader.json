{
    "1.0.1": {
        "info": {
            "author": "",
            "author_email": "redoxcode <redoxcode@github.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: Implementation :: MicroPython"
            ],
            "description": "## Description\nA micropython library to decode PPM signals comming from a RC receiver (as used for rc planes and drones).\n\nThis library is focused on savety and includes functions that can be used to detect a faulty or lost signal.\n**For this it is required to init the PpmReader class with the correct number of channels in the PPM signal. This might be a different number than the amount of servo connectors on the RC receiver hardware!**\n\nCreated for the use with pi pico, but should work on other boards as well.\n\n## Examples\n\n### Print the values of all channels\n```Python\nfrom ppm_reader import PpmReader\nppm_pin_id=28\nppm_channels=8\nppmReader=PpmReader(ppm_pin_id,ppm_channels)\nwhile True:\n    time.sleep(0.5)\n    print(ppmReader.get_values())\n```\n### Find the number of channels\n```Python\n# the number of channels should be known before you init PpmReader\n# if the channel number is incorrect only guess_channel_count will work\nfrom ppm_reader import PpmReader\nppm_pin_id=28\nppmReader=PpmReader(ppm_pin_id,channels=0)\nwhile True:\ntime.sleep(0.5)\nprint(ppmReader.guess_channel_count())\n```\n### Find values for min_value and max_value\n```Python\n# move the controls to the extreme positions and observe the values\nfrom ppm_reader import PpmReader\nppm_pin_id=28\nppm_channels=8\nppmReader=PpmReader(ppm_pin_id,ppm_channels)\nwhile True:\ntime.sleep(0.5)\nprint(ppmReader.get_raw_values())\n```\n## Api\n### class PpmReader(pin_id,channels,min_value=1000,max_value=2000,packet_gap=4000)\n- pin_id: GPIO pin connected to the PPM signal comming from the RC receiver.\n- channels: Number of channels in the PPM signal. if the channel count is wrong the packts will be considered invalid.       \n- min_value: Minimum timeframe per channel in us (this should be around 1000us for standard equipment).\n- max_value: Minimum timeframe per channel in us (this should be around 2000us for standard equipment).   \n- packet_gap: Minimum time gap between packets in us (4000us should be used for standard equipment).\n\n```time_since_last_packet()```\n- returns the time passed since the last valid packet arrived in us\n\n```get_valid_packets()```\n- returns the number of valid packets received\n\n```get_inalid_packets()```\n- returns the number of invalid packets received\n    \n```reset_packet_counters()```\n- resets counters for valid and invalid packets received\n    \n```get_raw_values()```\n- returns a list of all raw timeframes in us in the last valid packet received\n\n```get_raw_value(channel)```\n- returns the raw timeframe in us in the last valid packet received for a given channel\n- channel: channel to get the value from\n\n```get_values()```\n- returns a list of all values in the last valid packet maped to a range of 0.0 to 1.0 (values are not clipped)\n\n```get_value(channel)```\n- the value for a given channel in the last valid packet maped to a range of 0.0 to 1.0 (values are not clipped)\n- channel: channel to get the value from\n\n```get_values_bi()```\n- returns a list of all values in the last valid packet maped to a range of -1.0 to 1.0 (values are not clipped)\n\n```get_value_bi(channel)```\n- the value for a given channel in the last valid packet maped to a range of -1.0 to 1.0 (values are not clipped)\n- channel: channel to get the value fro\n\n\n```guess_channel_count()```\n- returns the number of channels in the last packet (incase you are not sure how many channels your signal has)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "PPM,reader,rc,remote,receiver",
            "license": "MIT License  Copyright (c) 2022 redoxcode  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ",
            "maintainer": "",
            "maintainer_email": "",
            "name": "micropython-ppm-reader",
            "package_url": "https://pypi.org/project/micropython-ppm-reader/",
            "platform": null,
            "project_url": "https://pypi.org/project/micropython-ppm-reader/",
            "project_urls": {
                "Homepage": "https://github.com/redoxcode/micropython-ppm_reader"
            },
            "release_url": "https://pypi.org/project/micropython-ppm-reader/1.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Decodes PPM signals from RC receivers",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16172695,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7b563df1b4cb523a40cc45bd7e7f69c1",
                    "sha256": "9c1fb7dd8f0903c0ea78b324331625cb046c24e2d82dd259c3bf56c0a08d50c8"
                },
                "downloads": -1,
                "filename": "micropython_ppm_reader-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7b563df1b4cb523a40cc45bd7e7f69c1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 4826,
                "upload_time": "2022-12-21T11:23:06",
                "upload_time_iso_8601": "2022-12-21T11:23:06.772792Z",
                "url": "https://files.pythonhosted.org/packages/47/c5/5287e16d41678be17bf8da32ee9848d1c5f28355e8d4d51192cc823da089/micropython_ppm_reader-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7a41b94908bb5f869e543ea7fe2f818c",
                    "sha256": "423f309ec3523ce8d4cd016389d7874377b6c6d82f37f944d108369a1bc92579"
                },
                "downloads": -1,
                "filename": "micropython-ppm_reader-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "7a41b94908bb5f869e543ea7fe2f818c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 3916,
                "upload_time": "2022-12-21T11:23:08",
                "upload_time_iso_8601": "2022-12-21T11:23:08.435812Z",
                "url": "https://files.pythonhosted.org/packages/8d/67/6ae6c72ebd1788cac2a1bcbcd8128ab2f097c5a417c3d2c3a683bef6883e/micropython-ppm_reader-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
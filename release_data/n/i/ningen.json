{
    "0.1.0": {
        "info": {
            "author": "Oren Ben-Kiki",
            "author_email": "oren@ben-kiki.org",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "Natural Language :: English",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/orenbenkiki/ningen.git",
            "keywords": "ninja,make",
            "license": "MIT license",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ningen",
            "package_url": "https://pypi.org/project/ningen/",
            "platform": null,
            "project_url": "https://pypi.org/project/ningen/",
            "project_urls": {
                "Homepage": "https://github.com/orenbenkiki/ningen.git"
            },
            "release_url": "https://pypi.org/project/ningen/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Ninja Build Generation",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16240934,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "314cdfaa26d57cfae9d6beb101562b10",
                    "sha256": "ed1de2b6ef6e5c32fcb0c90adda29eab18c6e6cdc26711f39baeb93197d7b972"
                },
                "downloads": -1,
                "filename": "ningen-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "314cdfaa26d57cfae9d6beb101562b10",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 10712,
                "upload_time": "2022-12-28T15:48:24",
                "upload_time_iso_8601": "2022-12-28T15:48:24.364825Z",
                "url": "https://files.pythonhosted.org/packages/a6/26/a6813ab8f791172a27af52f9600fc8a5626c2e1cf0666d0ea8ab76bdd668/ningen-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0": {
        "info": {
            "author": "Oren Ben-Kiki",
            "author_email": "oren@ben-kiki.org",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "Natural Language :: English",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "Ningen 0.2.0 - Ninja Build Generation\n=====================================\n\n.. image:: https://readthedocs.org/projects/ningen/badge/?version=latest\n    :target: https://ningen.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nThis package allows a Python script to use file system operations (such as ``glob``) and/or apply\nany other logic (such as reading structured configuration files) to generate a ``build.ninja`` file.\n\nThis isn't intended to replace \"high level\" build systems such as ``cmake``. Rather, think of it as\nreplacing the clunky GNU ``make`` language with Python.\n\nYes, ``ninja`` does provide the ``ninja_syntax`` module which already does this. The added value of\n``ningen`` is:\n\n* Convenience functions for pattern-based build file generation.\n\n* Allow overriding build statements (which complements the pattern-based approach).\n\nInstallation\n------------\n\nJust ``pip install ningen`` (or the equivalent in whatever Python environment you are using).\n\nUsage\n-----\n\nThe ``Writer`` class is similar to the one in ``ninja_syntax``. Two additional utility functions are\nprovided: ``foreach`` for iterating on all combinations of several variables, possibly extracting\nthem from existing file names; and ``expand`` for generating formatted strings using all the\nvariable combinations.\n\nFor example:\n\n.. code-block:: python\n\n    import ningen as ng\n\n    # Similarly to ninja_syntax writer, but internally buffers everything:\n    writer = ng.Writer()\n\n    modes = ['debug', 'release']\n    objects = []\n    writer.rule('compile_debug', ...)\n    writer.rule('compile_release', ...)\n\n    # Ningen provides the \"foreach\" function,\n    # which iterates on existing files and/or variable values:\n    for cc_file in ng.foreach('src/{*name}.cc', mode=modes):\n        objects.append(name)\n        writer.build(f'obj/{compiler}/{name}.o', f'compile_{mode}',\n                     inputs=[cc_file, ...], ...)\n\n    # Since it buffers the data, ningen allows overriding previous build statements:\n    writer.rule('special_compile_debug', ...)\n    writer.build('obj/debug/special.o', 'special_compile_gcc',\n                 inputs=['src/special.cc', ...], ..., override=True)\n\n    # Ningen also provides the \"expand\" function which formats multiple strings:\n    for mode in modes:\n        writer.build('bin/{mode}/program', f'link_{mode}',\n                     inputs=ng.expand('obj/{mode}/{object}.o',\n                                      mode=mode, object=objects))\n\n    # Actually write the buffered ninja build file (by default, to \"build.ninja\"):\n    writer.write()\n",
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/orenbenkiki/ningen.git",
            "keywords": "ninja,make",
            "license": "MIT license",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ningen",
            "package_url": "https://pypi.org/project/ningen/",
            "platform": null,
            "project_url": "https://pypi.org/project/ningen/",
            "project_urls": {
                "Homepage": "https://github.com/orenbenkiki/ningen.git"
            },
            "release_url": "https://pypi.org/project/ningen/0.2.0/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Ninja Build Generation",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16240934,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2342ce0a0817e01f0dc220e241bcbee4",
                    "sha256": "c60e830f36327ff75c29bcffebb4f4932e2041f84e73c7c8353efb059c34fba9"
                },
                "downloads": -1,
                "filename": "ningen-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "2342ce0a0817e01f0dc220e241bcbee4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 14107,
                "upload_time": "2022-12-28T19:11:42",
                "upload_time_iso_8601": "2022-12-28T19:11:42.552110Z",
                "url": "https://files.pythonhosted.org/packages/98/ea/e4df8f5d3ffeb586f37f7ac2eea3c3ba91a7ddb0cbf9463701af6ae7448e/ningen-0.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
{
    "1.3": {
        "info": {
            "author": "['Vincent Stimper <vincent.stimper@tuebingen.mpg.de>', 'David Liu <dl543@cam.ac.uk>', 'Lukas Ryll <lr487@cam.ac.uk>', 'Andrew Campbell <campbell@stats.ox.ac.uk>']",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/VincentStimper/normalizing-flows/archive/refs/heads/master.zip",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/VincentStimper/normalizing-flows",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "normflows",
            "package_url": "https://pypi.org/project/normflows/",
            "platform": null,
            "project_url": "https://pypi.org/project/normflows/",
            "project_urls": {
                "Download": "https://github.com/VincentStimper/normalizing-flows/archive/refs/heads/master.zip",
                "Homepage": "https://github.com/VincentStimper/normalizing-flows"
            },
            "release_url": "https://pypi.org/project/normflows/1.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Pytorch implementation of normalizing flows",
            "version": "1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16172191,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "57422a22422e97db11ae8886a305cbb3",
                    "sha256": "716015b8b221422af1ba556044a2dd89eecfb2349118f5e4c6dc281c34fcc025"
                },
                "downloads": -1,
                "filename": "normflows-1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "57422a22422e97db11ae8886a305cbb3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 49347,
                "upload_time": "2022-07-26T13:24:18",
                "upload_time_iso_8601": "2022-07-26T13:24:18.173884Z",
                "url": "https://files.pythonhosted.org/packages/f9/88/814a7fa9c52221e56db95f5fc7007b349002e499ae843ee62b706b1c9cc8/normflows-1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.4": {
        "info": {
            "author": "Vincent Stimper",
            "author_email": "vincent.stimper@tuebingen.mpg.de",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/VincentStimper/normalizing-flows/archive/refs/heads/master.zip",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/VincentStimper/normalizing-flows",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "normflows",
            "package_url": "https://pypi.org/project/normflows/",
            "platform": null,
            "project_url": "https://pypi.org/project/normflows/",
            "project_urls": {
                "Download": "https://github.com/VincentStimper/normalizing-flows/archive/refs/heads/master.zip",
                "Homepage": "https://github.com/VincentStimper/normalizing-flows"
            },
            "release_url": "https://pypi.org/project/normflows/1.4/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Pytorch implementation of normalizing flows",
            "version": "1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16172191,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4458bdafecaa4434d27d09407f319541",
                    "sha256": "fba1f63a515cfa35b42edb9f06354240b63c82bfc5502aab1ce0cbf5094b94d3"
                },
                "downloads": -1,
                "filename": "normflows-1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "4458bdafecaa4434d27d09407f319541",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 49955,
                "upload_time": "2022-07-26T14:25:09",
                "upload_time_iso_8601": "2022-07-26T14:25:09.777122Z",
                "url": "https://files.pythonhosted.org/packages/94/1c/1966ac14ec1363e757fda7a6da75f10b92040b99440b24c6c0f5c4ab8af6/normflows-1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.5": {
        "info": {
            "author": "Vincent Stimper",
            "author_email": "vincent.stimper@tuebingen.mpg.de",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Normalizing Flows\n\n[![Doc: passing](https://img.shields.io/badge/Doc-passing-sucess)](https://vincentstimper.github.io/normalizing-flows/)\n[![Code Style: Black](https://img.shields.io/badge/Code%20Style-black-black.svg)](https://github.com/psf/black)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI](https://img.shields.io/badge/PyPI-1.5-blue.svg)](https://pypi.org/project/normflows/)\n[![Downloads](https://static.pepy.tech/personalized-badge/normflows?period=total&units=international_system&left_color=grey&right_color=orange&left_text=Downloads)](https://pepy.tech/project/normflows)\n\n\nThis is a PyTorch implementation of normalizing flows. Many popular flow architectures are implemented,\nsee the [list below](#implemented-flows). The package can be easily [installed via pip](#installation).\nThe basic usage is described [here](#usage), and a [full documentation](https://vincentstimper.github.io/normalizing-flows/). \nis available as well. There are several sample use cases implemented in the \n[`example` folder](https://github.com/VincentStimper/normalizing-flows/tree/master/example), \nincluding [Glow](https://github.com/VincentStimper/normalizing-flows/blob/master/example/glow.ipynb),\na [VAE](https://github.com/VincentStimper/normalizing-flows/blob/master/example/vae.py), and\na [Residual Flow](https://github.com/VincentStimper/normalizing-flows/blob/master/example/residual.ipynb).\n\n\n## Implemented Flows\n\n* Planar Flow ([Rezende & Mohamed, 2015](https://arxiv.org/abs/1505.05770))\n* Radial Flow ([Rezende & Mohamed, 2015](https://arxiv.org/abs/1505.05770))\n* NICE ([Dinh et al., 2014](https://arxiv.org/abs/1410.8516))\n* Real NVP ([Dinh et al., 2016](https://arxiv.org/abs/1605.08803))\n* Glow ([Kingma & Dhariwal, 2018](https://arxiv.org/abs/1807.03039))\n* Masked Autoregressive Flow ([Papamakarios et al., 2017](https://proceedings.neurips.cc/paper/2017/hash/6c1da886822c67822bcf3679d04369fa-Abstract.html))\n* Neural Spline Flow ([Durkan et al., 2019](https://arxiv.org/abs/1906.04032))\n* Circular Neural Spline Flow ([Rezende et al., 2020](http://proceedings.mlr.press/v119/rezende20a.html))\n* Residual Flow ([Chen et al., 2019](https://arxiv.org/abs/1906.02735))\n* Stochastic Normalizing Flows ([Wu et al., 2020](https://arxiv.org/abs/2002.06707))\n\nNote that Neural Spline Flows with circular and non-circular coordinates\nare also supported.\n\n## Installation\n\nThe latest version of the package can be installed via pip\n\n```\npip install normflows\n```\n\nAt least Python 3.7 is required. If you want to use a GPU, make sure that\nPyTorch is set up correctly by following the instructions at the\n[PyTorch website](https://pytorch.org/get-started/locally/).\n\nTo run the example notebooks clone the repository first\n\n```\ngit clone https://github.com/VincentStimper/normalizing-flows.git\n```\n\nand then install the dependencies.\n\n```\npip install -r requirements_examples.txt\n```\n\n## Usage\n\n<a href=\"https://colab.research.google.com/github/VincentStimper/normalizing-flows/blob/master/example/real_nvp_colab.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n\nA normalizing flow consists of a base distribution, defined in \n[`nf.distributions.base`](https://github.com/VincentStimper/normalizing-flows/blob/master/normflows/distributions/base.py),\nand a list of flows, given in\n[`nf.flows`](https://github.com/VincentStimper/normalizing-flows/tree/master/normflows/flows).\nLet's assume our target is a 2D distribution. We pick a diagonal Gaussian\nbase distribution, which is the most popular choice. Our flow shall be a\n[Real NVP model](https://arxiv.org/abs/1605.08803) and, therefore, we need\nto define a neural network for computing the parameters of the affine coupling\nmap. One dimension is used to compute the scale and shift parameter for the\nother dimension. After each coupling layer we swap their roles.\n\n```python\nimport normflows as nf\n\n# Define 2D Gaussian base distribution\nbase = nf.distributions.base.DiagGaussian(2)\n\n# Define list of flows\nnum_layers = 32\nflows = []\nfor i in range(num_layers):\n    # Neural network with two hidden layers having 64 units each\n    # Last layer is initialized by zeros making training more stable\n    param_map = nf.nets.MLP([1, 64, 64, 2], init_zeros=True)\n    # Add flow layer\n    flows.append(nf.flows.AffineCouplingBlock(param_map))\n    # Swap dimensions\n    flows.append(nf.flows.Permute(2, mode='swap'))\n```\n\nOnce they are set up, we can define a\n[`nf.NormalizingFlow`](https://github.com/VincentStimper/normalizing-flows/blob/master/normflows/core.py#L7)\nmodel. If the target density is available, it can be added to the model\nto be used during training. Sample target distributions are given in\n[`nf.distributions.target`](https://github.com/VincentStimper/normalizing-flows/blob/master/normflows/distributions/target.py).\n\n```python\n# If the target density is not given\nmodel = nf.NormalizingFlow(base, flows)\n\n# If the target density is given\ntarget = nf.distributions.target.TwoMoons()\nmodel = nf.NormalizingFlow(base, flows, target)\n```\n\nThe loss can be computed with the methods of the model and minimized.\n\n```python\n# When doing maximum likelihood learning, i.e. minimizing the forward KLD\n# with no target distribution given\nloss = model.forward_kld(x)\n\n# When minimizing the reverse KLD based on the given target distribution\nloss = model.reverse_kld(num_samples=512)\n\n# Optimization as usual\nloss.backward()\noptimizer.step()\n```\n\nAs more extensive version of this example is given as a \n[notebook](https://github.com/VincentStimper/normalizing-flows/blob/master/example/real_nvp_colab.ipynb), \nwhich can directly be opened in \n[Colab](https://colab.research.google.com/github/VincentStimper/normalizing-flows/blob/master/example/real_nvp_colab.ipynb).\n\nFor more illustrative examples of how to use the package see the\n[`example`](https://github.com/VincentStimper/normalizing-flows/tree/master/example)\ndirectory. More advanced experiments can be done with the scripts listed in the\n[repository about resampled base distributions](https://github.com/VincentStimper/resampled-base-flows),\nsee its [`experiments`](https://github.com/VincentStimper/resampled-base-flows/tree/master/experiments)\nfolder.\n\n## Used by\n\nThe library has been used in several research papers, which are listed below.\n\n> Andrew Campbell, Wenlong Chen, Vincent Stimper, Jos\u00e9 Miguel Hern\u00e1ndez-Lobato, and Yichuan Zhang. \n> [A gradient based strategy for Hamiltonian Monte Carlo hyperparameter optimization](https://proceedings.mlr.press/v139/campbell21a.html). \n> In Proceedings of the 38th International Conference on Machine Learning, pp. 1238\u20131248. PMLR, 2021.\n> \n> [Code available on GitHub.](https://github.com/VincentStimper/hmc-hyperparameter-tuning)\n\n> Vincent Stimper, Bernhard Sch\u00f6lkopf, Jos\u00e9 Miguel Hern\u00e1ndez-Lobato. \n> [Resampling Base Distributions of Normalizing Flows](https://proceedings.mlr.press/v151/stimper22a). \n> In Proceedings of The 25th International Conference on Artificial Intelligence and Statistics, volume 151, pp. 4915\u20134936, 2022.\n> \n> [Code available on GitHub.](https://github.com/VincentStimper/resampled-base-flows)\n\n> Laurence I. Midgley, Vincent Stimper, Gregor N. C. Simm, Bernhard Sch\u00f6lkopf, Jos\u00e9 Miguel Hern\u00e1ndez-Lobato. \n> [Flow Annealed Importance Sampling Bootstrap](https://arxiv.org/abs/2208.01893). \n> ArXiv, abs/2208.01893, 2022.\n> \n> [Code available on GitHub.](https://github.com/lollcat/fab-torch)\n\nMoreover, the [`boltzgen`](https://github.com/VincentStimper/boltzmann-generators) library\nhas been build upon this package.\n\n\n\n\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/VincentStimper/normalizing-flows/archive/refs/heads/master.zip",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/VincentStimper/normalizing-flows",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "normflows",
            "package_url": "https://pypi.org/project/normflows/",
            "platform": null,
            "project_url": "https://pypi.org/project/normflows/",
            "project_urls": {
                "Download": "https://github.com/VincentStimper/normalizing-flows/archive/refs/heads/master.zip",
                "Homepage": "https://github.com/VincentStimper/normalizing-flows"
            },
            "release_url": "https://pypi.org/project/normflows/1.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Pytorch implementation of normalizing flows",
            "version": "1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16172191,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c54ed6fac009484c85cdf39b43a54f91",
                    "sha256": "bf92944808904e5ea7b533420228401f0a5ee991cd29982d947124a68427a807"
                },
                "downloads": -1,
                "filename": "normflows-1.5.tar.gz",
                "has_sig": false,
                "md5_digest": "c54ed6fac009484c85cdf39b43a54f91",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 53484,
                "upload_time": "2022-12-21T10:33:23",
                "upload_time_iso_8601": "2022-12-21T10:33:23.690099Z",
                "url": "https://files.pythonhosted.org/packages/42/e5/9c78929f1abbd7ddd1249da8d561688cee04590223194a8b417f11afc857/normflows-1.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
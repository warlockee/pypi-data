{
    "0.1.0": {
        "info": {
            "author": "Simply Equipped LLC",
            "author_email": "howard@simplyequipped.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description": "A Python package that interfaces with the JS8Call API.\n\n&nbsp;\n\n### Documentation\n\nSee the official [pyjs8call documentation](https://simplyequipped.github.io/pyjs8call).\n\nSee a simple example in the *example.py* file at the top level of the repo.\n\n&nbsp;  \n\n### Modules\n\nSome setup (i.e. setting callback functions) is required to used certain module features. Most modules are initialized automatically by pyjs8call.client.\n\n**Client** (pyjs8call.client)\n\nThe main JS8Call API interface. Includes many functions for reading and writting settings as well as sending various types of messages.\n\n**JS8Call** (pyjs8call.js8call)\n\nManages the TCP socket communication with the JS8Call application.\n\n**Application Monitor** (pyjs8call.appmonitor)\n\nManages the start and stop of the JS8Call application, as well as the restarting of the application if closed. \n\n**Configuration Handler** (pyjs8call.confighandler)\n\nReads from and writes to the JS8Call.ini config file to change virtually any setting, including creating and activating configuration profiles. *Specific knowledge of the configuration file options is required. Configuring options incorrectly may cause the JS8Call application not to start.*\n\n**Spot Monitor** (pyjs8call.spotmonitor)\n\nMonitors recent station spots. Spot data can be queried for various uses, and spot callbacks can be set for any heard stations and/or for specific stations.\n\n**Window Monitor** (pyjs8call.windowmonitor)\n\nMonitors the start and end of the next tx window. Tx frames are used to determine the start of a tx window, and the speed setting is used to determine the length of the tx window.\n\n**Offset Monitor** (pyjs8call.offsetmonitor)\n\nManages JS8Call offset frequency based on activity in the pass band. The offset frequency is automatically moved to an unsed portion of the pass band if a recently heard signal overlaps with the current offset. Signal bandwidth is calculated based on the speed of each heard signal. Only decoded signal data is available from the JS8Call API so other QRM cannot be handled.\n\n**TX Monitor** (pyjs8call.txmonitor)\n\nMonitors JS8Call tx text for queued outgoing messages. Notification of a message status change (sending, complete, failed) is handled via callback function.\n\n&nbsp;  \n\n### Examples\n\nBasic usage:\n```\nimport pyjs8call\n\n# use default host, port (127.0.0.1:2442)\njs8call = pyjs8call.Client()\njs8call.start()\n\n# set frequency and offset\nfreq = js8call.set_freq(7078000)\noffset = js8call.set_offset(1500)\nprint('Frequency: ' + str(freq))\nprint('Offset: ' + str(offset))\n\n# get inbox messages\ninbox = js8call.get_inbox_messages()\nfor message in inbox:\n    print(message)\n\n# send a directed message\njs8call.send_directed_message('N0GQ', 'Thanks for your work on js8net')\n```\n\nUsing the spot monitor:\n```\nimport pyjs8call\n\n# callback function for all new spots\ndef new_spots(spots):\n    for spot in spots:\n        print('Spotted ' + spot.origin + ' with a ' + str(spot.snr) + 'dB SNR')\n    \n# callback function for watched station spots\ndef station_spotted(spot):\n    print(spot.origin + ' spotted!')\n    \njs8call = pyjs8call.Client()\njs8call.start()\n\n# set spot monitor callback\njs8call.spot_monitor.set_new_spot_callback(new_spots)\n# set station watcher callback\njs8call.spot_monitor.set_watch_callback(station_spotted)\n\n# watch multiple stations\njs8call.spot_monitor.add_station_watch('N0GQ')\njs8call.spot_monitor.add_station_watch('K6ARK')\n\n# remove a station watcher, no hard feelings Adam :)\njs8call.spot_monitor.remove_station_watch('K6ARK')\n```\n\nUsing the tx monitor:\n```\nimport pyjs8call\n\n# callback function for complete tx\ndef tx_status(msg):\n    print('Message ' + msg.id + ' status: ' + msg.status)\n    \njs8call = pyjs8call.Client()\njs8call.start()\n\n# set tx monitor callback\njs8call.tx_monitor.set_tx_status_change_callback(tx_status)\n\n# monitor directed message tx automatically (default)\njs8call.send_directed_message('OH8STN', 'Thanks for the great content')\n\n# monitor message tx manually\njs8call.monitor_directed_tx = False\nmsg = js8call.send_directed_message('KT1RUN', 'Thanks for the great content')\njs8call.tx_monitor.monitor(msg)\n```\n\n&nbsp;\n\n### Acknowledgements\n\nInspired by [js8net](https://github.com/jfrancis42/js8net) by N0GQ.\n\n[JS8Call](http://js8call.com) by KN4CRD\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/simplyequipped/pyjs8call",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyjs8call",
            "package_url": "https://pypi.org/project/pyjs8call/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyjs8call/",
            "project_urls": {
                "Homepage": "https://github.com/simplyequipped/pyjs8call"
            },
            "release_url": "https://pypi.org/project/pyjs8call/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Python interface for JS8Call API",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16242420,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bdd6247e622f68cbb3a03fe87ec1a508",
                    "sha256": "a56592694068af5f2a403bed5bc24c8ee197b25942e44568fcd55ce8dd5b79fc"
                },
                "downloads": -1,
                "filename": "pyjs8call-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "bdd6247e622f68cbb3a03fe87ec1a508",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 29571,
                "upload_time": "2022-12-28T23:25:10",
                "upload_time_iso_8601": "2022-12-28T23:25:10.952687Z",
                "url": "https://files.pythonhosted.org/packages/d5/d2/92c167c456d009a3e173897c3835039ed1b728202157c145172348b895a4/pyjs8call-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
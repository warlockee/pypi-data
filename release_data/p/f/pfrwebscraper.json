{
    "0.0.1": {
        "info": {
            "author": "Devon Connors",
            "author_email": "<dconns1@outlook.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "python,pro-football-reference,football,fantasy football,american football,pro football reference,web scraper,scraper",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "PFRWebScraper",
            "package_url": "https://pypi.org/project/PFRWebScraper/",
            "platform": null,
            "project_url": "https://pypi.org/project/PFRWebScraper/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/PFRWebScraper/0.0.1/",
            "requires_dist": [
                "pandas",
                "beautifulsoup4",
                "random-user-agent"
            ],
            "requires_python": "",
            "summary": "Scrapes statistics from https://www.pro-football-reference.com/",
            "version": "0.0.1",
            "yanked": true,
            "yanked_reason": null
        },
        "last_serial": 16234870,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0145e0785f260918e8b05e66f48fad64",
                    "sha256": "0fab350c3d6dfb9a0c83076adf783f640ee0979d9381adaf3c3030826f53c815"
                },
                "downloads": -1,
                "filename": "PFRWebScraper-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0145e0785f260918e8b05e66f48fad64",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7382,
                "upload_time": "2022-12-27T23:22:34",
                "upload_time_iso_8601": "2022-12-27T23:22:34.788741Z",
                "url": "https://files.pythonhosted.org/packages/ac/98/de6db14b7de977caa5eb0117b501720ba09bec7f98fc317c893d67d3538d/PFRWebScraper-0.0.1-py3-none-any.whl",
                "yanked": true,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b8905f83d4ebe268977bfde7ec404571",
                    "sha256": "a955a6ce69b91b6cf47cdf25cb564d891af78ad91e0f92c69870e8cf2958d1a0"
                },
                "downloads": -1,
                "filename": "PFRWebScraper-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "b8905f83d4ebe268977bfde7ec404571",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 8596,
                "upload_time": "2022-12-27T23:22:36",
                "upload_time_iso_8601": "2022-12-27T23:22:36.252479Z",
                "url": "https://files.pythonhosted.org/packages/91/8a/7370efba6216933c20f75d3aa11d0290edbb8ff57ee5c4e4d3aa7380980e/PFRWebScraper-0.0.1.tar.gz",
                "yanked": true,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0": {
        "info": {
            "author": "Devon Connors",
            "author_email": "<dconns1@outlook.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "python,pro-football-reference,football,fantasy football,american football,pro football reference,web scraper,scraper",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "PFRWebScraper",
            "package_url": "https://pypi.org/project/PFRWebScraper/",
            "platform": null,
            "project_url": "https://pypi.org/project/PFRWebScraper/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/PFRWebScraper/1.0.0/",
            "requires_dist": [
                "beautifulsoup4",
                "pandas",
                "random-user-agent"
            ],
            "requires_python": "",
            "summary": "Scrapes statistics from https://www.pro-football-reference.com/",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16234870,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "84b8bbf6168deda5be47934b3798ddab",
                    "sha256": "3e96bd8256b006c48ab0e44d00b199830fe05e7f75c3916054f7015ed363ba40"
                },
                "downloads": -1,
                "filename": "PFRWebScraper-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "84b8bbf6168deda5be47934b3798ddab",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 96175,
                "upload_time": "2022-12-28T05:57:21",
                "upload_time_iso_8601": "2022-12-28T05:57:21.485167Z",
                "url": "https://files.pythonhosted.org/packages/10/e5/9a963b22c8a9a0886b0f5b6591bb40a3fbe0119e236ce8fec085b4ad509e/PFRWebScraper-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3ae6ad30eaedd9b572891060e79699ab",
                    "sha256": "ac22807e002cd8bccbb39d73b05881aad5b553871a7cf565068cdd73e3482612"
                },
                "downloads": -1,
                "filename": "PFRWebScraper-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "3ae6ad30eaedd9b572891060e79699ab",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 56621,
                "upload_time": "2022-12-28T05:57:23",
                "upload_time_iso_8601": "2022-12-28T05:57:23.030515Z",
                "url": "https://files.pythonhosted.org/packages/51/7a/a3b63f76e8c19d237d7ad36f6ce79672c9f93b4454b51933122d0853d112/PFRWebScraper-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "Devon Connors",
            "author_email": "<dconns1@outlook.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Pro-Football-Talk Web Scraper\r\n\r\nDeveloped by Devon Connors (c) 2022\r\n\r\n## Before Continuing:\r\n<strong><u>Out of respect for Pro Football Reference</u></strong> each instance of scraping will have a 5-10 second delay as to not spam their server.  So in the instances where you obtain a list of URLs of players to scrape you will need to understand it could take some time to process that list.\r\n\r\n##### Example: 400 players could take up to 1 hour to scrape.\r\n\r\nI am working through updating this tool to use asyncronous request while also being respectful so for the time being please be patient.\r\n\r\n## Examples of How To Use (Alpha Version)\r\n\r\n### Scraping Team Data\r\n#### Creating Team Data Scraper and Method Usage\r\n```python\r\nfrom PFRWebScraper import ScrapeTeamData\r\n\r\n# Creates an instance of Team Data Scraper\r\nteam_data_scraper = ScrapeTeamData()\r\n\r\n# Obtains the abbreviation for the team you wish to scrape\r\nteam_abbreviation = team_data_scraper.get_team_abbreviation(\"Las Vegas Raiders\")\r\n\r\n# Scrapes defensive data for the team for a number of years back.  \r\n#   Uses 4 years by default.\r\ndefault_defensive_data = team_data_scraper.scrape_defense(team_abbreviation)\r\n\r\n# Scrapes defensive data for the team's last 2 years\r\nlast_two_years_defense_data = team_data_scraper.scrape_defense(team_abbreviation, 2)\r\n\r\n# # Scrapes offensive data for the team for a number of years back.  \r\n#   Uses 4 years by default.\r\ndefault_offensive_data = team_data_scraper.scrape_offense(team_abbreviation)\r\n\r\n# Scrapes offensive data for the team's last 2 years\r\nlast_two_years_offensive_data = team_data_scraper.scrape_offense(team_abbreviation, 2)\r\n```\r\n\r\n#### Obtaining Specific Data From The Team Data Object\r\n```python\r\nfrom PFRWebScraper import ScrapeTeamData\r\n\r\n# Creates an instance of Team Data Scraper\r\nteam_data_scraper = ScrapeTeamData()\r\n\r\n# Obtains the abbreviation for the team you wish to scrape\r\nteam_abbreviation = team_data_scraper.get_team_abbreviation(\"Las Vegas Raiders\")\r\n\r\n# Scrapes offensive data for the team's last 2 years\r\noffensive_data = team_data_scraper.scrape_offense(team_abbreviation, 2)\r\n\r\n# Obtains the years that returned data if you are unsure\r\n# In this instance you will receive a list: \r\n#   [2021, 2022]\r\nvalid_years_with_data = offensive_data.get_list_of_years()\r\n\r\n# You will then need to set the year from which you will like data\r\noffensive_data.set_reference_year(2022)\r\n\r\n# After you have set the reference year you can begin pulling stats\r\nteam_points = offensive_data.get_points()\r\nteam_total_yards = offensive_data.get_total_yards()\r\n```\r\n\r\n#### Obtaining Whole Data Sets\r\n```python\r\nfrom PFRWebScraper import ScrapeTeamData\r\n\r\n# Creates an instance of Team Data Scraper\r\nteam_data_scraper = ScrapeTeamData()\r\n\r\n# Obtains the abbreviation for the team you wish to scrape\r\nteam_abbreviation = team_data_scraper.get_team_abbreviation(\"Las Vegas Raiders\")\r\n\r\n# Scrapes offensive data for the team's last 2 years\r\noffensive_data = team_data_scraper.scrape_offense(team_abbreviation, 2)\r\n\r\n# Obtains the raw data as a Pandas Dataframe\r\noffensive_dataframe = team_data_scraper.get_dataframe_of_stats()\r\n\r\n# Obtains the raw data as a dictionary\r\noffensive_dictionary = team_data_scraper.get_dictionary_of_stats()\r\n```\r\n\r\n### Scraping Player Data\r\n#### Create Player Scraper and Method Usage\r\n##### Scraping Passing Data\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all passing data on a player's page\r\npassing_data = player_scraper.scrape_passing(\"https://www.pro-football-reference.com/players/C/CarrDe02.htm\")\r\n\r\n# You can also specify the sections of data you would like. You pass them in as a list.\r\n# This is set to all data by default. \r\n# Different Input: \r\n#   1. 'passing' - Scrapes Regular Season and Playoff data on a passer.\r\n#   2. 'advanced' - Scrapes Air Yards, Accuracy, Pressure, and Play Type data on a passer.\r\n#   3. 'adjusted' - Scrapes Adjusted data on a passer.\r\n\r\n# Example of only passsing and advanced data\r\npassing_advanced_data = player_scraper.scrape_passing(\"https://www.pro-football-reference.com/players/C/CarrDe02.htm\", ['passing', 'advanced'])\r\n\r\n# Example of only adjusted data\r\nadjusted_data = player_scraper.scrape_passing(\"https://www.pro-football-reference.com/players/C/CarrDe02.htm\", ['adjusted'])\r\n```\r\n\r\n##### Scrape Rushing and Receiving Data\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all rushing and receiving data on a player's page\r\nrushing_receiving_data = player_scraper.scrape_rushing_receiving(\"https://www.pro-football-reference.com/players/J/JacoJo01.htm\")\r\n```\r\n\r\n##### Scrape Scoring Data\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all scoring data on a player's page\r\nscoring_data = player_scraper.scrape_scoring(\"https://www.pro-football-reference.com/players/R/RenfHu00.htm\")\r\n```\r\n\r\n##### Scrape Snap Counts Data\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all snap counts data on a player's page\r\nsnap_counts_data = player_scraper.scrape_snap_counts(\"https://www.pro-football-reference.com/players/W/WallDa01.htm\")\r\n```\r\n\r\n##### Scrape Defense and Fumbles Data\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all defense and fumbles data on a player's page\r\ndefense_and_fumbles_data = player_scraper.scrape_defense_and_fumbles(\"https://www.pro-football-reference.com/players/A/AdamDa01.htm\")\r\n```\r\n\r\n##### Scrape Kick and Punt Returns Data\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all kick and punt returns data on a player's page\r\nreturns_data = player_scraper.scrape_kick_and_punt_returns(\"https://www.pro-football-reference.com/players/A/AbduAm00.htm\")\r\n```\r\n\r\n##### Scrape Kicking Data\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all kicking data on a player's page\r\nkicking_data = player_scraper.scrape_kicking(\"https://www.pro-football-reference.com/players/C/CarlDa00.htm\")\r\n```\r\n\r\n#### Utilizing Player Data Objects\r\n##### Passing Data Object Usage\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all passing data on a player's page\r\npassing_data = player_scraper.scrape_passing(\"https://www.pro-football-reference.com/players/C/CarrDe02.htm\")\r\n\r\n# passing_data is now a passing object that has all the information stored within sub-objects\r\n# Methods will need to be called to obtain the relevant data to work with it\r\n\r\n# Passing Data Regular Season\r\nregular_season_passing_data = passing_data.get_passing_data_regular_season()\r\n\r\n# Passing Data Playoffs\r\nplayoffs_passing_data = passing_data.get_passing_data_playoffs()\r\n\r\n# Passing Data Advanced (Air Yards)\r\nair_yards_passing_data = passing_data.get_passing_data_advanced_air_yards()\r\n\r\n# Passing Data Advanced (Accuracy)\r\naccuracy_passing_data = passing_data.get_passing_data_advanced_accuracy()\r\n\r\n# Passing Data Advanced (Pressure)\r\npressure_passing_data = passing_data.get_passing_data_advanced_pressure()\r\n\r\n# Passing Data Advanced (Play Type)\r\nplay_type_passing_data = passing_data.get_passing_data_advanced_play_type()\r\n\r\n# Passing Data Adjusted\r\nadjusted_passing_data = passing_data.get_passing_data_adjusted()\r\n\r\n# Once you have decided which data object you would like you can then utilize them the same way as Team Data.\r\n\r\n# Example: Regular Season Passing Data\r\n\r\n# Obtain the whole data set\r\nregular_season_passing_dataframe = regular_season_passing_data.get_dataframe_of_stats()\r\nregular_season_passing_dictionary = regular_season_passing_data.get_dictionary_of_stats()\r\n\r\n# Obtain specific data points\r\n# Set the reference year\r\nregular_season_passing_data.set_reference_year(2022)\r\n\r\n# Call the methods for specific data points\r\nplayers_age = regular_season_passing_data.get_age()\r\ngames_played = regular_season_passing_data.get_games_played()\r\ngames_started = regular_season_passing_data.get_games_started()\r\n```\r\n\r\n##### Rushing and Receiving Data Object Usage\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all rushing and receiving data on a player's page\r\nrushing_receiving_data = player_scraper.scrape_rushing_receiving(\"https://www.pro-football-reference.com/players/J/JacoJo01.htm\")\r\n\r\n# rushing_receiving_data is now a rushing and receiving object that has all the information stored within sub-objects\r\n# Methods will need to be called to obtain the relevant data to work with it\r\n\r\n# Rushing and Receiving Data Regular Season\r\nregular_season_rushing_receiving = rushing_receiving_data.get_rushing_receiving_data_regular_season()\r\n\r\n# Rushing and Receiving Data Playoffs\r\nplayoffs_rushing_receiving = rushing_receiving_data.get_rushing_receiving_data_playoffs()\r\n\r\n# Rushing and Receiving Data Advanced\r\nadvanced_rushing_receiving = rushing_receiving_data.get_rushing_receiving_data_advanced()\r\n\r\n# Once you have decided which data object you would like you can then utilize them the same way as Team Data.\r\n\r\n# Example: Regular Season Rushing and Receiving Data\r\n\r\n# Obtain the whole data set\r\nregular_season_rushing_receiving_dataframe = regular_season_rushing_receiving.get_dataframe_of_stats()\r\nregular_season_rushing_receiving_dictionary = regular_season_rushing_receiving.get_dictionary_of_stats()\r\n\r\n# Obtain specific data points\r\n# Set the reference year\r\nregular_season_rushing_receiving.set_reference_year(2022)\r\n\r\n# Call the methods for specific data points\r\nplayers_age = regular_season_rushing_receiving.get_age()\r\ngames_played = regular_season_rushing_receiving.get_games_played()\r\ngames_started = regular_season_rushing_receiving.get_games_started()\r\n```\r\n\r\n##### Scoring Data Object Usage\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all scoring data on a player's page\r\nscoring_data = player_scraper.scrape_scoring(\"https://www.pro-football-reference.com/players/R/RenfHu00.htm\")\r\n\r\n# scoring_data is now a scoring object that has all the information stored within sub-objects\r\n# Methods will need to be called to obtain the relevant data to work with it\r\n\r\n# Scoring Data Regular Season\r\nregular_season_scoring = scoring_data.get_scoring_data_regular_season()\r\n\r\n# Scoring Data Playoffs\r\nplayoffs_scoring = scoring_data.get_scoring_data_playoffs()\r\n\r\n# Once you have decided which data object you would like you can then utilize them the same way as Team Data.\r\n\r\n# Example: Regular Season Scoring Data\r\n\r\n# Obtain the whole data set\r\nregular_season_scoring_dataframe = regular_season_scoring.get_dataframe_of_stats()\r\nregular_season_scoring_dictionary = regular_season_scoring.get_dictionary_of_stats()\r\n\r\n# Obtain specific data points\r\n# Set the reference year\r\nregular_season_scoring.set_reference_year(2022)\r\n\r\n# Call the methods for specific data points\r\nplayers_age = regular_season_scoring.get_age()\r\ngames_played = regular_season_scoring.get_games_played()\r\ngames_started = regular_season_scoring.get_games_started()\r\n```\r\n\r\n##### Snap Counts Data Object Usage\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all snap counts data on a player's page\r\nsnap_counts_data = player_scraper.scrape_snap_counts(\"https://www.pro-football-reference.com/players/W/WallDa01.htm\")\r\n\r\n# snap_counts_data is now a snap counts object that has all the information stored within sub-objects\r\n# Methods will need to be called to obtain the relevant data to work with it\r\n\r\n# Snap Counts Data Regular Season\r\nregular_season_snap_counts = snap_counts_data.get_snap_counts_data_regular_season()\r\n\r\n# Once you have decided which data object you would like you can then utilize them the same way as Team Data.\r\n\r\n# Example: Regular Season Snap Counts Data\r\n\r\n# Obtain the whole data set\r\nregular_season_snap_counts_dataframe = regular_season_snap_counts.get_dataframe_of_stats()\r\nregular_season_snap_counts_dictionary = regular_season_snap_counts.get_dictionary_of_stats()\r\n\r\n# Obtain specific data points\r\n# Set the reference year\r\nregular_season_snap_counts.set_reference_year(2022)\r\n\r\n# Call the methods for specific data points\r\nplayers_age = regular_season_snap_counts.get_age()\r\ngames_played = regular_season_snap_counts.get_games_played()\r\ngames_started = regular_season_snap_counts.get_games_started()\r\n```\r\n\r\n##### Defense and Fumbles Data Object Usage\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all defense and fumbles data on a player's page\r\ndefense_and_fumbles_data = player_scraper.scrape_defense_and_fumbles(\"https://www.pro-football-reference.com/players/A/AdamDa01.htm\")\r\n\r\n# defense_and_fumbles_data is now a defense and fumbles object that has all the information stored within sub-objects\r\n# Methods will need to be called to obtain the relevant data to work with it\r\n\r\n# Defense and Fumbles Data Regular Season\r\nregular_season_defense_and_fumbles = defense_and_fumbles_data.get_defense_and_fumbles_data_regular_season()\r\n\r\n# Defense and Fumbles Data Playoffs\r\nplayoffs_defense_and_fumbles = defense_and_fumbles_data.get_defense_and_fumbles_data_playoffs()\r\n\r\n# Once you have decided which data object you would like you can then utilize them the same way as Team Data.\r\n\r\n# Example: Regular Season Defense and Fumbles Data\r\n\r\n# Obtain the whole data set\r\nregular_season_defense_and_fumbles_dataframe = regular_season_defense_and_fumbles.get_dataframe_of_stats()\r\nregular_season_defense_and_fumbles_dictionary = regular_season_defense_and_fumbles.get_dictionary_of_stats()\r\n\r\n# Obtain specific data points\r\n# Set the reference year\r\nregular_season_defense_and_fumbles.set_reference_year(2022)\r\n\r\n# Call the methods for specific data points\r\nplayers_age = regular_season_defense_and_fumbles.get_age()\r\ngames_played = regular_season_defense_and_fumbles.get_games_played()\r\ngames_started = regular_season_defense_and_fumbles.get_games_started()\r\n```\r\n\r\n##### Kick and Punt Returns Data Object Usage\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all kick and punt returns data on a player's page\r\nreturns_data = player_scraper.scrape_kick_and_punt_returns(\"https://www.pro-football-reference.com/players/A/AbduAm00.htm\")\r\n\r\n# returns_data is now a kick and punt returns object that has all the information stored within sub-objects\r\n# Methods will need to be called to obtain the relevant data to work with it\r\n\r\n# Kick and Punt Returns Data Regular Season\r\nregular_season_returns = returns_data.get_returns_data_regular_season()\r\n\r\n# Kick and Punt Returns Data Playoffs\r\nplayoffs_returns = returns_data.get_returns_data_playoffs()\r\n\r\n# Once you have decided which data object you would like you can then utilize them the same way as Team Data.\r\n\r\n# Example: Regular Season Kick and Punt Returns Data\r\n\r\n# Obtain the whole data set\r\nregular_season_returns_dataframe = regular_season_returns.get_dataframe_of_stats()\r\nregular_season_returns_dictionary = regular_season_returns.get_dictionary_of_stats()\r\n\r\n# Obtain specific data points\r\n# Set the reference year\r\nregular_season_returns.set_reference_year(2022)\r\n\r\n# Call the methods for specific data points\r\nplayers_age = regular_season_returns.get_age()\r\ngames_played = regular_season_returns.get_games_played()\r\ngames_started = regular_season_returns.get_games_started()\r\n```\r\n\r\n##### Kicking Data Object Usage\r\n```python\r\nfrom PFRWebScraper import ScrapePlayerData\r\n\r\n# Creates an instance of the Player Scraper Object\r\nplayer_scraper = ScrapePlayerData()\r\n\r\n# Scrapes for all kicking data on a player's page\r\nkicking_data = player_scraper.scrape_kicking(\"https://www.pro-football-reference.com/players/C/CarlDa00.htm\")\r\n\r\n# kicking_data is now a kicking object that has all the information stored within sub-objects\r\n# Methods will need to be called to obtain the relevant data to work with it\r\n\r\n# Kicking Data Regular Season\r\nregular_season_kicking = kicking_data.get_kicking_data_regular_season()\r\n\r\n# Kicking Data Playoffs\r\nplayoffs_kicking = kicking_data.get_kicking_data_playoffs()\r\n\r\n# Once you have decided which data object you would like you can then utilize them the same way as Team Data.\r\n\r\n# Example: Regular Season Kicking Data\r\n\r\n# Obtain the whole data set\r\nregular_season_returns_dataframe = regular_season_kicking.get_dataframe_of_stats()\r\nregular_season_returns_dictionary = regular_season_kicking.get_dictionary_of_stats()\r\n\r\n# Obtain specific data points\r\n# Set the reference year\r\nregular_season_kicking.set_reference_year(2022)\r\n\r\n# Call the methods for specific data points\r\nplayers_age = regular_season_kicking.get_age()\r\ngames_played = regular_season_kicking.get_games_played()\r\ngames_started = regular_season_kicking.get_games_started()\r\n```\r\n\r\n### Scraping URL Data\r\n#### Create URL Scraper and Method Usage\r\n##### Scraping Team for Player URLs\r\n```python\r\nfrom PFRWebScraper import ScrapeURLs\r\n\r\n# Creates an instance of the URL Scraper Object\r\nurl_scraper = ScrapeURLs()\r\n\r\n# Scrapes for Player's URLs that are on the specified team\r\n# You can set the specific year BUT if you dont want to it is always set \r\n#   to the current year\r\nplayer_url_data = url_scraper.scrape_team_for_player_urls(\"Las Vegas Raiders\")\r\n\r\n# Example on how to scrape for specific year\r\nplayer_url_data = url_scraper.scrape_team_for_player_urls(\"Las Vegas Raiders\", 2021)\r\n\r\n# player_url_data will now be an object containing the player's URLs\r\n# Methods can be called on that object to access the information\r\n\r\n# Examples:\r\n\r\n# Obtain a dictionary of all the players with the position as the KEY \r\n#   and the VALUE will be a list of dictionaries containing the player's \r\n#   name and URL\r\nteam_players_urls_dict = player_url_data.get_dictionaries_of_urls()\r\n\r\n# Example Data from get_dictionaries_of_urls(): \r\n#   {\r\n#     \"QB\": \r\n#          [\r\n#            {\r\n#              \"name\": \"Derek Carr\", \r\n#              \"url\": \"https://www.pro-football-reference.com/players/C/CarrDe02.htm\"\r\n#            }, \r\n#            { \r\n#              \"name\": \"Jarrett Stidham\", \r\n#              \"url\": \"https://www.pro-football-reference.com/players/S/StidJa00.htm\"\r\n#            }\r\n#          ], \r\n#     \"RB\": \r\n#          [\r\n#            { \r\n#              \"name\": \"Josh Jacobs\", \r\n#              \"url\": \"https://www.pro-football-reference.com/players/J/JacoJo01.htm\"\r\n#            }\r\n#          ]\r\n#   }\r\n\r\n# Obtaining the URLs of players listed as a Quarterback in the form of a list of dictionaries\r\nquarterback_urls = player_url_data.get_quarterbacks()\r\n\r\n# Obtaining the URLs of players listed as a Running Back in the form of a list of dictionaries\r\nrunning_back_urls = player_url_data.get_running_backs()\r\n\r\n# Obtaining the URLs of players listed as a Fullback in the form of a list of dictionaries\r\nfullback_urls = player_url_data.get_fullbacks()\r\n\r\n# Obtaining the URLs of players listed as a Wide Receiver in the form of a list of dictionaries\r\nwide_receiver_urls = player_url_data.get_wide_receivers()\r\n\r\n# Obtaining the URLs of players listed as a Tight End in the form of a list of dictionaries\r\ntight_end_urls = player_url_data.get_tight_ends()\r\n\r\n# Obtaining the URLs of players listed as a Kicker in the form of a list of dictionaries\r\nkicker_urls = player_url_data.get_kickers()\r\n\r\n# Example Data from get_quarterbacks():\r\n# [\r\n#   {\r\n#     \"name\": \"Derek Carr\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/C/CarrDe02.htm\"\r\n#   }, \r\n#   { \r\n#     \"name\": \"Jarrett Stidham\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/S/StidJa00.htm\"\r\n#   }\r\n# ]\r\n```\r\n\r\n##### Scraping Stat Type for Player URLs\r\n```python\r\nfrom PFRWebScraper import ScrapeURLs\r\n\r\n# Creates an instance of the URL Scraper Object\r\nurl_scraper = ScrapeURLs()\r\n\r\n# Scrapes for Player's URLs that are listed within that specific stat type list\r\n# You can set the specific year BUT if you dont want to it is always set \r\n#   to the current year\r\n\r\n# Example on how to scrape for current year and passing list\r\npassing_player_url_data = url_scraper.scrape_stat_type_for_player_urls(\"passing\")\r\n\r\n# Example on how to scrape for 2021 and rushing list\r\nrushing_player_url_data = url_scraper.scrape_stat_type_for_player_urls(\"rushing\", 2021)\r\n\r\n# Example on how to scrape for 2020 and receiving list\r\nreceiving_player_url_data = url_scraper.scrape_stat_type_for_player_urls(\"receiving\", 2020)\r\n\r\n# Example on how to scrape for current year and kicking list\r\nkicking_player_url_data = url_scraper.scrape_stat_type_for_player_urls(\"kicking\")\r\n\r\n# Example on how to scrape for current year and returns list\r\nreturns_player_url_data = url_scraper.scrape_stat_type_for_player_urls(\"returns\")\r\n\r\n# Example on how to scrape for current year and scoring list\r\nscoring_player_url_data = url_scraper.scrape_stat_type_for_player_urls(\"scoring\")\r\n\r\n# Obtain a list of dictionaries containing the player's name and url\r\npassing_players_urls_list = passing_player_url_data.get_list_of_urls()\r\n\r\n# Example Data from get_list_of_urls():\r\n# [\r\n#   {\r\n#     \"name\": \"Derek Carr\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/C/CarrDe02.htm\"\r\n#   }, \r\n#   { \r\n#     \"name\": \"Patrick Mahomes\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/M/MahoPa00.htm\"\r\n#   }, \r\n#   { \r\n#     \"name\": \"Joe Burrow\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/B/BurrJo01.htm\"\r\n#   }, \r\n#   { \r\n#     \"name\": \"Justin Herbert\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/H/HerbJu00.htm\"\r\n#   }, \r\n#   { \r\n#     \"name\": \"Tom Brady\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/B/BradTo00.htm\"\r\n#   }\r\n# ]\r\n\r\n# Obtain the number of dictionaries within the list\r\ncount_of_passing_players_urls_list = passing_player_url_data.get_count_of_urls()\r\n\r\n# Using the sample data the method get_count_of_urls() would return 5\r\n\r\n# Obtain a list of dictionaries, to the specified range, containing the player's name and url\r\nrange_of_passing_players_urls_list = passing_player_url_data.get_range_of_urls(1, 3)\r\n\r\n# Example Data from get_range_of_urls(1, 3):\r\n# [\r\n#   {\r\n#     \"name\": \"Derek Carr\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/C/CarrDe02.htm\"\r\n#   }, \r\n#   { \r\n#     \"name\": \"Patrick Mahomes\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/M/MahoPa00.htm\"\r\n#   }, \r\n#   { \r\n#     \"name\": \"Joe Burrow\", \r\n#     \"url\": \"https://www.pro-football-reference.com/players/B/BurrJo01.htm\"\r\n#   }\r\n# ]\r\n```\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "python,pro-football-reference,football,fantasy football,american football,pro football reference,web scraper,scraper",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "PFRWebScraper",
            "package_url": "https://pypi.org/project/PFRWebScraper/",
            "platform": null,
            "project_url": "https://pypi.org/project/PFRWebScraper/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/PFRWebScraper/1.0.1/",
            "requires_dist": [
                "pandas",
                "beautifulsoup4",
                "random-user-agent"
            ],
            "requires_python": "",
            "summary": "Scrapes statistics from https://www.pro-football-reference.com/",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16234870,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0f68177a20565cadf4e37913cbad76a3",
                    "sha256": "adf4f00f77de02f9f6f4ea7223cf5ceaa0feb75a9c4ce8254eda95698c8ac4d5"
                },
                "downloads": -1,
                "filename": "PFRWebScraper-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0f68177a20565cadf4e37913cbad76a3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 99441,
                "upload_time": "2022-12-28T06:05:27",
                "upload_time_iso_8601": "2022-12-28T06:05:27.087727Z",
                "url": "https://files.pythonhosted.org/packages/72/85/495bb6e0e0e4080d5690accce241f5581fb6766789c450399afa25d32888/PFRWebScraper-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0ce68e97ce112c080e1921a72fef31d5",
                    "sha256": "9a4b5fc0bee2c44539249a41afc66c2678a9e8c152effc6078c6685a9298323c"
                },
                "downloads": -1,
                "filename": "PFRWebScraper-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "0ce68e97ce112c080e1921a72fef31d5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 61368,
                "upload_time": "2022-12-28T06:05:28",
                "upload_time_iso_8601": "2022-12-28T06:05:28.868268Z",
                "url": "https://files.pythonhosted.org/packages/c6/8a/b9d4048d60b0d7d2d7caccb0403472f969b2430f6806eb223004530cef8c/PFRWebScraper-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
{
    "0.11": {
        "info": {
            "author": "Johannes Fischer",
            "author_email": "<aulasparticularesdealemaosp@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.9",
                "Topic :: Scientific/Engineering :: Visualization",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Topic :: Text Editors :: Text Processing",
                "Topic :: Text Processing :: Filters",
                "Topic :: Text Processing :: General",
                "Topic :: Text Processing :: Indexing",
                "Topic :: Utilities"
            ],
            "description": "\n# Easier ADB automation \n\n\n\n## Tested against Windows 10, Python 3.9.13, BlueStacks 5\n\n\n\n```python\n\n$pip install adbkit\n\nfrom adbkit import ADBTools\n\nadb_path = \"C:\\\\Users\\\\Gamer\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\platform-tools\\\\adb.exe\"\n\ndeviceserial = \"localhost:5875\"\n\n\n\n# Create an instance\n\n# Don't get confused about the instance name \"self\". I did it because it is faster copying methods from the class \n\nself = ADBTools(adb_path, deviceserial, sdcard=\"/sdcard/\")\n\nself = ADBTools(adb_path=adb_path, deviceserial=deviceserial)\n\n\n\n# connect to the device \n\nself.aa_connect_to_device()\n\n```\n\n\n\n\n\n\n\n```python\n\n# If you are using BlueStacks and want to have root access, call:\n\nself.aa_root_bluestacks_instances() \n\n# This method will basically do this steps: https://appuals.com/root-bluestacks/ to root BlueStacks\n\n# You can run the script every time you use this module. It won't hurt. \n\n# The first time, you might have to restart BlueStacks to enable the root access \n\n```\n\n\n\n\n\n\n\n```python\n\n# If your device/BlueStacks is rooted, enable root so that all commands will be sent as root \n\nself.aa_enable_root() \n\n# can be disabled by calling :\n\nself.aa_disable_root()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Activates self.bb_adbkeyboard \n\n# Read more about it: https://github.com/hansalemaos/adb_unicode_keyboard\n\nself.aa_activate_adb_keyboard(exit_keys=\"ctrl+x\") \n\n```\n\n\n\n\n\n\n\n```python\n\n# Activates self.bb_sendevent_keyboard (needs root access)\n\n# Read more about it: https://github.com/hansalemaos/sendevent_getevent_keyboard\n\n\n\nself.aa_activate_sendevent_keyboard(\n\n    sdcard=\"/storage/emulated/0/\",\n\n    tmp_folder_on_sd_card=\"AUTOMAT\",\n\n    exit_keys=\"ctrl+x\",\n\n)  # needs root access\n\n\n\n# Here is one example: \n\nself.bb_adbkeyboard.press_7_keycode_0()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Activates self.self.bb_getevent_sendevent\n\n# Read more about it: https://github.com/hansalemaos/sendevent_getevent_keyboard\n\n\n\nself.aa_activate_getevent_sendevent(\n\n    sdcard=\"/storage/emulated/0/\",\n\n    tmp_folder_on_sd_card=\"AUTOMAT\",\n\n    bluestacks_divider=32767,\n\n    exit_keys=\"ctrl+x\",\n\n)  # needs root access\n\n```\n\n\n\n\n\n\n\n```python\n\n# Activates self.bb_sendevent_touch\n\n# Read more about it: https://github.com/hansalemaos/sendevent_touch\n\n\n\nself.aa_activate_sendevent_touch(\n\n    sdcard=\"/storage/emulated/0/\",\n\n    tmp_folder_on_sd_card=\"AUTOMAT\",\n\n    bluestacks_divider=32767,\n\n    use_bluestacks_coordinates=True,\n\n)  # needs root access\n\n\n\n# Here is one example:\n\nself.bb_sendevent_touch.touch(10,10)\n\n```\n\n\n\n\n\n\n\n```python\n\n# Activates https://github.com/hansalemaos/a_pandas_ex_tesseract_multirow_regex_fuzz\n\n# You can download the 64 bit version of tesseract here: \n\n# https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.0.20221222.exe\n\n\n\nself.aa_activate_tesseract(\n\n        tesseractpath=r\"C:\\Program Files\\Tesseract-OCR\\tesseract.exe\"\n\n    )\n\n\n\n# Once activated, you can call:\n\n# self.aa_ocr_with_tesseract()\n\n\n\n    left  top  width  height       conf        text  middle_x  middle_y  end_x  end_y\n\n8    382   42    499      49  37.512093         RH,       631        66    881     91\n\n9    728   34     98      61  30.925949          2.       777        64    826     95\n\n13   370  101     37      11   84.72541     'system       388       106    407    112\n\n14   411  101     24      10  79.929901        Apps       423       106    435    111\n\n15   536   90     36      28  85.425911      Roblox       554       104    572    118\n\n16   676  100     55       9  88.744247  BlueStacks       703       104    731    109\n\n17   735  101      7       8  80.470955           X       738       105    742    109\n\n18   814  101     31      10  90.271423      Spiele       829       106    845    111\n\n19   848  101     18       8  93.303749         und       857       105    866    109\n\n20   869  103     41       9  87.963295     gewinne       889       107    910    112\n\n28    72  100     20      12  96.004517        Play        82       106     92    112\n\n29    95  101     27       8  86.986359       Store       108       105    122    109\n\n33   225  211     49      12  76.804665   Globoplay       249       217    274    223\n\n37   326  489     25      28  91.894142       Tibia       338       503    351    517\n\n38   401  500     50       8  91.477989   Guardians       426       504    451    508\n\n39   455  499     10       9  72.064316          of       460       503    465    508\n\n41   415  512     37       9  75.078018     Cloudia       433       516    452    521\n\n\n\n# and even perform a multiline fuzzy search:\n\nxxx = self.aa_ocr_with_tesseract(search_for='Kontakte verwalten')\n\n```\n\n```python\n\n# Use this method to update the screenshot \n\n# The updated screenshot can be found here: self.screenshot\n\nself.aa_update_screenshot()\n\n\n\n```\n\n\n\n\n\n\n\n```python\n\n# get 5 screenshot within 5 seconds\n\nxx=self.aa_get_screenshots(\n\n        sleeptime=1,\n\n        number=5)\n\n\n\n```\n\n\n\n\n\n\n\n```python\n\n# Now you can use self.df to do operations on the screenshot \n\n# More information about a_pandas_ex_image_tools:\n\n# https://github.com/hansalemaos/a_pandas_ex_image_tools\n\nself.aa_update_imagedf()\n\n```\n\n\n\n\n\n```python\n\n# If you want to capture the logcat output and analyze it in a DataFrame,\n\nuse: \n\nlogcatcap = self.aa_capture_logcat(\n\n        exit_keys=\"ctrl+x\",\n\n        timeout=None,\n\n    )  \n\n\n\n# When you exit using \"ctrl+x\", the method will return a DataFrame\n\n# By the way: almost all methods can be interrupted using a key command \n\n```\n\n\n\n\n\n\n\n```python\n\n# Those 2 methods will help you to identify and interact with views:\n\n# Read more about it: https://github.com/hansalemaos/androdf\n\ndf1 = self.aa_get_all_displayed_items_from_uiautomator(\n\n\tscreenshotfolder=\"f:\\\\compare_android\",  # screenshots will be saved here\n\n\tmax_variation_percent_x=10,  # used for one of the click functions, to not click exactly in the center - more information below\n\n\tmax_variation_percent_y=10,  # used for one of the click functions, to not click exactly in the center\n\n\tloung_touch_delay=(\n\n\t\t1000,\n\n\t\t1500,\n\n\t),  # with this settings longtouch will take somewhere between 1 and 1,5 seconds\n\n\tswipe_variation_startx=10,  # swipe coordinate variations in percent\n\n\tswipe_variation_endx=10,\n\n\tswipe_variation_starty=10,\n\n\tswipe_variation_endy=10,\n\n\tsdcard=\"/storage/emulated/0/\",  # sdcard will be used if you use the sendevent methods, don't pass a symlink - more information below\n\n\ttmp_folder_on_sd_card=\"AUTOMAT\",  # this folder will be created in the sdcard folder for using sendevent actions\n\n\tbluestacks_divider=32767,  # coordinates must be recalculated for BlueStacks https://stackoverflow.com/a/73733261/15096247 when using sendevent\n\n)\n\n\n\ndf3 = self.aa_get_all_displayed_items_from_activities(\n\n\tscreenshotfolder=\"f:\\\\compare_android\",  # screenshots will be saved here\n\n\tmax_variation_percent_x=10,  # used for one of the click functions, to not click exactly in the center - more information below\n\n\tmax_variation_percent_y=10,  # used for one of the click functions, to not click exactly in the center\n\n\tloung_touch_delay=(\n\n\t\t1000,\n\n\t\t1500,\n\n\t),  # with this settings longtouch will take somewhere between 1 and 1,5 seconds\n\n\tswipe_variation_startx=10,  # swipe coordinate variations in percent\n\n\tswipe_variation_endx=10,\n\n\tswipe_variation_starty=10,\n\n\tswipe_variation_endy=10,\n\n\tsdcard=\"/storage/emulated/0/\",  # sdcard will be used if you use the sendevent methods, don't pass a symlink - more information below\n\n\ttmp_folder_on_sd_card=\"AUTOMAT\",  # this folder will be created in the sdcard folder for using sendevent actions\n\n\tbluestacks_divider=32767,  # coordinates must be recalculated for BlueStacks https://stackoverflow.com/a/73733261/15096247 when using sendevent\n\n)\n\n```\n\n\n\n\n\n\n\n```python\n\n# Uses: https://github.com/hansalemaos/a_pandas_ex_adb_to_df\n\n# lists all files in DataFrame and adds useful functions\n\n# self.aa_list_all_files_on_device()\n\n\n\ndffiles = self.aa_list_folder_content(folder_to_search=\"data/\")  \n\nprint(dffiles)\n\n                  aa_date  ... ff_pull_file_cat\n\n0     2022-12-11 06:48:00  ...               ()\n\n1     2022-12-26 22:16:00  ...               ()\n\n2     2022-12-06 19:10:00  ...               ()\n\n3     2022-12-06 13:38:00  ...               ()\n\n4     2022-12-26 22:16:00  ...               ()\n\n                   ...  ...              ...\n\n26120 2021-09-16 04:21:00  ...               ()\n\n26121 2021-09-16 03:53:00  ...               ()\n\n26122 2021-09-16 03:53:00  ...               ()\n\n26123 2021-09-16 04:35:00  ...               ()\n\n26124 2021-09-16 04:31:00  ...               ()\n\n[26125 rows x 16 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\n# Search with grep \n\n# Uses https://github.com/hansalemaos/adb_grep_search\n\ndfgrep = self.aa_grep_search(\n\n        folder_to_search=\"data/data\",\n\n        filetype=\"*.db\",\n\n        regular_expression=r\"CREATE.TABLE\",\n\n        exit_keys=\"ctrl+x\",\n\n        timeout=None,\n\n        remove_control_characters=True,\n\n    )\n\n\n\ndfgrep\n\nOut[19]: \n\n                                               aa_file  ...      aa_regex\n\n0    data/data/com.android.providers.media/database...  ...  CREATE.TABLE\n\n1    data/data/com.android.providers.media/database...  ...  CREATE.TABLE\n\n2    data/data/com.android.providers.media/database...  ...  CREATE.TABLE\n\n3    data/data/com.android.providers.media/database...  ...  CREATE.TABLE\n\n4    data/data/com.globo.globotv/databases/mcsdk_bf...  ...  CREATE.TABLE\n\n..                                                 ...  ...           ...\n\n103  data/data/com.roblox.client/databases/google_a...  ...  CREATE.TABLE\n\n104  data/data/com.roblox.client/databases/google_a...  ...  CREATE.TABLE\n\n105  data/data/com.roblox.client/databases/google_a...  ...  CREATE.TABLE\n\n106  data/data/com.roblox.client/databases/google_a...  ...  CREATE.TABLE\n\n107  data/data/com.roblox.client/databases/google_a...  ...  CREATE.TABLE\n\n[108 rows x 5 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\n# Uses https://github.com/hansalemaos/a_pandas_ex_adb_settings_to_df\n\nself.aa_parse_settings_from_all_packages(\n\n        tempfolder=\"f:\\\\tmpfolder\", datafolder=\"data/\"\n\n    )\n\n\n\n        index          aa_all_keys  ... level_22 level_23\n\n0         0.0         (long, name)  ...      NaN      NaN\n\n1         1.0        (long, value)  ...      NaN      NaN\n\n2         0.0   (boolean, 0, name)  ...      NaN      NaN\n\n3         1.0  (boolean, 0, value)  ...      NaN      NaN\n\n4         2.0   (boolean, 1, name)  ...      NaN      NaN\n\n       ...                  ...  ...      ...      ...\n\n110795    NaN            (6, desc)  ...      NaN      NaN\n\n110796    NaN           (6, label)  ...      NaN      NaN\n\n110797    NaN             (6, pkg)  ...      NaN      NaN\n\n110798    NaN          (6, source)  ...      NaN      NaN\n\n110799    NaN             (6, url)  ...      NaN      NaN\n\n[110800 rows x 31 columns]\n\n\n\nYou might see this error messages several times:\n\n\n\n\"Go to: https://www.sqlite.org/download.html ,\n\ndownload the dll and put it in the DLLs folder of your env!\"\n\n\n\nYou can ignore it.\n\n```\n\n\n\n\n\n\n\n```python\n\n#This method helps you find all executable activities from a package \n\n# More about it: https://github.com/hansalemaos/a_pandas_ex_adb_execute_activities\n\n\n\nself.aa_get_activity_execution_df_from_one_package(\n\n        packagename=\"com.roblox.client\"\n\n    ) \n\n```\n\n\n\n\n\n\n\n```python\n\n# adds new contact, can be saved straight away\n\naddcon = self.aa_add_new_contact(\n\n\t\"hans\", \"+55119897827552\", \"hans@something.com\", \"my address\", save=False\n\n)\n\n```\n\n\n\n\n\n\n\n```python\n\n# If you play Roblox, you can enable/disable some textures to get higher fps\n\nself.aa_enable_roblox_textures(\n\n\texit_keys=\"ctrl+x\",\n\n\tprint_output=True,\n\n\ttimeout=None,\n\n)\n\n\n\nself.aa_disable_roblox_textures(\n\n\texit_keys=\"ctrl+x\",\n\n\tprint_output=True,\n\n\ttimeout=None,\n\n)\n\n```\n\n\n\n\n\n\n\n```python\n\n# goes to the home screen, doesn't close anything\n\nself.aa_go_to_home_screen()\n\n```\n\n\n\n\n\n\n\n```python\n\n# repeat=5 usually deletes more than 5 characters!!\n\nself.aa_press_delete_key_repeated_times(repeat=5)\n\n```\n\n\n\n\n\n\n\n```python\n\n# starts the android file manager, pass the file type you want to see\n\nself.aa_get_content(type_=\"text/plain\")\n\n```\n\n\n\n\n\n\n\n```python\n\n# Here are some methods to get useful information. \n\n# Returns DataFrames \n\nprint(self.aa_whole_dumpsys_to_df())\n\nprint(self.aa_list_all_packages())\n\nprint(self.aa_list_broadcast_stats())\n\nprint(self.aa_list_pending_intents())\n\nprint(self.aa_list_all_activities_from_device())\n\nprint(self.aa_list_all_services())\n\nprint(self.aa_list_all_receivers())\n\nprint(self.aa_list_all_activities())\n\nprint(self.aa_get_procstats())\n\nprint(self.aa_list_all_devices()) # devices on the device (dev ...)\n\nprint(self.aa_list_devices()) # all adb devices (localhost:5555 ...)\n\nprint(self.aa_list_pids_basic())\n\nprint(self.aa_list_pids_complete())\n\nprint(self.aa_list_memory())\n\nprint(self.aa_getprop())\n\nprint(self.aa_list_all_broadcasts())\n\nprint(self.aa_list_all_broadcasts_history())\n\nprint(self.aa_list_users())\n\nprint(self.aa_list_permission_groups())\n\nprint(self.aa_list_disabled_packages())\n\nprint(self.aa_list_apps_in_use())\n\nprint(self.aa_list_3rd_party_packages())\n\nprint(self.aa_list_features())\n\n```\n\n\n\n\n\n\n\n```python\n\n# Smile! :)\n\nself.aa_open_camera_photo_mode()\n\n```\n\n\n\n\n\n\n\n```python\n\n# works with and without http://\n\nprint(self.aa_open_website(\"google.com\"))\n\n```\n\n\n\n\n\n\n\n```python\n\n# switches to gallery\n\nself.aa_start_gallery()\n\n```\n\n\n\n\n\n\n\n```python\n\n# cheeeese\n\nself.aa_take_a_picture()\n\n```\n\n\n\n\n\n\n\n```python\n\n# useful for some apps \n\nself.aa_adb_turn_screen_compatibility_off()\n\nself.aa_adb_turn_screen_compatibility_on()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Be careful! \n\nself.aa_remove_file('/sdcard/9.png')\n\n```\n\n\n\n\n\n\n\n```python\n\n# Essential when you use your cell phone (with Whatsapp, Facebook ...) to automize things.\n\nself.aa_enable_notifications()\n\nself.aa_disable_notifications()\n\n```\n\n\n\n\n\n\n\n```python\n\n# More useful stuff for notifications\n\nself.aa_expand_settings() \n\nself.aa_expand_notifications()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Changes the screen orientation\n\n# You can pass:\n\n# horizontal_upside_down or 2\n\n# vertical or 1\n\n# horizontal or 0\n\n# vertical_upside_down or 3\n\nself.aa_change_screen_orientation(\"horizontal\")\n\n```\n\n\n\n\n\n\n\n```python\n\nself.aa_get_display_orientation()\n\n#Out[4]: 0 \n\n# 0 means horizontal\n\n```\n\n\n\n\n\n\n\n```python\n\n# Sometimes you upload new media files, but you can't see the thumbnails immediately\n\n# This method updates all thumbnails\n\nself.aa_rescan_media()\n\n```\n\n\n\n\n\n\n\n```python\n\n# If you are in the middle of a text and want to go to the end of the line\n\nself.aa_move_to_end_of_line()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Useful keyboard stuff \n\nself.aa_hide_keyboard()\n\nself.aa_is_keyboard_shown()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Doesn't work on BlueStacks, but on my pixel 6 there are no problems\n\n# (Actually it is not necessary when using BlueStacks hahaha)\n\nself.aa_is_screen_unlocked()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Don't use this command on BlueStacks, you will have to reboot the device\n\nself.aa_lock_screen()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Useful commands \n\nself.aa_press_home() #back to home screen\n\nself.aa_press_app_switch()\n\n```\n\n\n\n\n\n\n\n```python\n\n# Configured for my Pixel 6, but should work on any device with a \n\n# newer android version. \n\nself.aa_swipe_up_to_unlock_screen('3333')\n\n```\n\n\n\n\n\n\n\n```python\n\n# doesn't work with BlueStacks, because of the app switch design, \n\n# but it does on my pixel and should work with any device that \n\n# has a recent Android version\n\nself.aa_close_all_apps_with_swipe()\n\n```\n\n\n\n\n\n\n\n```python\n\n# uninstalls a package\n\nself.aa_uninstall_package('com.google.android.youtube')\n\n```\n\n\n\n\n\n\n\n```python\n\n# Returns the activity needed to open the package \n\nself.aa_resolve_activity('com.roblox.client')\n\nb'priority=0 preferredOrder=0 match=0x108000 specificIndex=-1 isDefault=true\\r\\n'\n\nb'com.roblox.client/.startup.ActivitySplash\\r\\n'\n\n```\n\n\n\n\n\n\n\n```python\n\n# But you can also open any package using:\n\nself.aa_open_app('com.roblox.client')\n\n```\n\n\n\n\n\n\n\n```python\n\n# This method makes swiping easy\n\n# x (start), y (start), x (end) y (end), last number in seconds\n\nself.aa_swipe(500, 400, 500, 100, 1.1) \n\n```\n\n\n\n\n\n\n\n```python\n\n#opens a separate shell window using cmd.exe \n\nself.aa_open_shell() \n\n```\n\n\n\n\n\n\n\n```python\n\n# It changes the dictionary that you are in\n\n# and executes a command \n\nself.aa_change_cwd_and_execute_adb_shell('ls', 'data/')\n\nb'5.3.10.1001\\r\\n'\n\nb'5.9.300.1014\\r\\n'\n\nb'adb\\r\\n'\n\nb'anr\\r\\n'\n\nb'app\\r\\n'\n\nb'app-asec\\r\\n'\n\nb'app-ephemeral\\r\\n'\n\nb'app-lib\\r\\n'\n\nb'app-private\\r\\n'\n\nb'arm\\r\\n'\n\n....\n\n```\n\n\n\n\n\n\n\n```python\n\n# This can also be accomplished by sending multiple commands: \n\nself.aa_execute_multiple_adb_shell_commands(['cd data/', 'ls|grep system'])\n\nOut[28]: [b'system\\r\\n', b'system_ce\\r\\n', b'system_de\\r\\n']\n\n```\n\n\n\n\n\n\n\n```python\n\n# You can also send non-shell commands: \n\nself.aa_execute_non_shell_adb_command('devices')\n\n```\n\n\n\n\n\n\n\n```python\n\n# This method pushes a file to your sdcard:\n\nself.aa_push_to_sdcard(r'F:\\donedone.png')\n\n```\n\n\n\n\n\n\n\n```python\n\n# This method pulls a file to your hdd\n\nself.aa_pull('/sdcard/donedone.png', 'f:\\\\dfdffasd')\n\n```\n\n\n\n\n\n\n\n```python\n\n# A fast way of scanning all connected devices:\n\n# start/end means the ports you want to start/end with\n\n# After 10 seconds, all processes that have not completed the search\n\n# will be killed \n\nself.aa_connect_do_all_devices(start=4999, end=6000, timeout=10)\n\n    '''self.aa_list_devices()\n\nb'List of devices attached\\r\\n'\n\nb'localhost:5037\\toffline\\r\\n'\n\nb'localhost:5040\\toffline\\r\\n'\n\nb'localhost:5357\\toffline\\r\\n'\n\nb'localhost:5725\\tdevice\\r\\n'\n\nb'localhost:5800\\toffline\\r\\n'\n\nb'localhost:5875\\tdevice\\r\\n'\n\nb'localhost:5900\\toffline\\r\\n'\n\nb'localhost:5955\\tdevice\\r\\n'\n\nb'\\r\\n'''\n\n\n\n    '''\n\nKilling the process\n\nKilling the process\n\nKilling the process\n\nKilling the process\n\nKilling the process\n\nKilling the process\n\nKilling the process\n\nKilling the process\n\nKilling the process'''\n\n```\n\n\n\n\n\n\n\n```python\n\n# Uses https://github.com/hansalemaos/a_cv2_shape_finder \n\n# to detect shapes in the screenshot \n\nself.get_shapes_from_screenshot_THRESH_OTSU()\n\nself.get_shapes_from_screenshot_ADAPTIVE_THRESH_MEAN_C()\n\nself.get_shapes_from_screenshot_ADAPTIVE_THRESH_GAUSSIAN_C()\n\n```\n\n\n\n\n\n\n\n```python\n\n#Some self-explaining stuff  \n\n\n\nself.aa_isfolder('/sdcard/donedone.png')\n\nFalse\n\nself.aa_isfolder('/sdcard/')\n\nTrue\n\nnext(self.aa_get_screenshots())\n\n\n\nself.aa_path_exists('/sdcard/')\n\nTrue\n\nself.aa_path_exists('/sdcard2/')\n\nFalse\n\n\n\nself.aa_get_screen_resolution()\n\n(960, 540)\n\n\n\nself.aa_restart_server()\n\nself.aa_reboot_and_listen_to_usb()\n\nself.aa_start_server()\n\nself.aa_stop_server()\n\nself.aa_kill_server()\n\nself.aa_force_stop('com.roblox.client') #root\n\nself.aa_show_screenshot_in_browser()\n\n```\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/hansalemaos/adbkit",
            "keywords": "adb,android,automation,shell,root",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "adbkit",
            "package_url": "https://pypi.org/project/adbkit/",
            "platform": null,
            "project_url": "https://pypi.org/project/adbkit/",
            "project_urls": {
                "Homepage": "https://github.com/hansalemaos/adbkit"
            },
            "release_url": "https://pypi.org/project/adbkit/0.11/",
            "requires_dist": [
                "a-cv2-imshow-thread",
                "a-cv2-shape-finder",
                "a-cv-imwrite-imread-plus",
                "a-pandas-ex-adb-execute-activities",
                "a-pandas-ex-adb-settings-to-df",
                "a-pandas-ex-adb-to-df",
                "a-pandas-ex-csv-plus",
                "a-pandas-ex-image-tools",
                "a-pandas-ex-logcat2df",
                "a-pandas-ex-tesseract-multirow-regex-fuzz",
                "adb-grep-search",
                "adb-unicode-keyboard",
                "androdf",
                "flatten-everything",
                "getevent-sendevent",
                "kthread",
                "numpy",
                "opencv-python",
                "pandas",
                "Pillow",
                "psutil",
                "pyperclip",
                "regex",
                "sendevent-getevent-keyboard",
                "sendevent-touch",
                "subprocess-print-and-capture",
                "touchtouch"
            ],
            "requires_python": "",
            "summary": "Big automation package for ADB",
            "version": "0.11",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16224761,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e54ed9cba86d92410c7fa31489827d15",
                    "sha256": "b43068680254f9bf83b6289caa28913ced76dcc3665a22e068ef92275967a974"
                },
                "downloads": -1,
                "filename": "adbkit-0.11-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e54ed9cba86d92410c7fa31489827d15",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 30852,
                "upload_time": "2022-12-27T11:34:02",
                "upload_time_iso_8601": "2022-12-27T11:34:02.404052Z",
                "url": "https://files.pythonhosted.org/packages/73/eb/53142067e1c2960298e2ee6d44196d5b8ec505809019e97807e8d68efc59/adbkit-0.11-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9283cfbd21dc66198fc98e8a8bda98d1",
                    "sha256": "4beb229383eb007bc77ba944a4001107c12fbd1fd335c3ac86b87510d0c61cb4"
                },
                "downloads": -1,
                "filename": "adbkit-0.11.tar.gz",
                "has_sig": false,
                "md5_digest": "9283cfbd21dc66198fc98e8a8bda98d1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 31982,
                "upload_time": "2022-12-27T11:34:03",
                "upload_time_iso_8601": "2022-12-27T11:34:03.965797Z",
                "url": "https://files.pythonhosted.org/packages/48/a9/cdd39db8203086d9c5cfa1140feb65e9c3da03e1988ca8cb609f517acf69/adbkit-0.11.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
{
    "0.0.1a1": {
        "info": {
            "author": "Hideaki Takahashi",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "<!--\n  Title: AIJack\n  Description: AIJack is a fantastic framework demonstrating the security risks of machine learning and deep learning, such as Model Inversion, poisoning attack, and membership inference attack.\n  Author: Hideaki Takahashi\n  -->\n\n# AIJack: Security and Privacy Risk Simulator for Standard/Distributed Machine Learning\n\n<div align=\"left\">\n<img src=\"https://badgen.net/github/stars/Koukyosyumei/AIjack?color=green\">\n<img src=\"https://badgen.net/github/forks/Koukyosyumei/AIjack\">\n<img src=\"https://badgen.net/github/watchers/Koukyosyumei/AIjack\">\n<img src=\"https://img.shields.io/github/commit-activity/m/Koukyosyumei/AIJack\">\n<img src=\"https://img.shields.io/github/languages/code-size/Koukyosyumei/AIJack\">\n<img src=\"https://img.shields.io/github/languages/count/Koukyosyumei/AIJack\">\n<img src=\"https://img.shields.io/github/license/Koukyosyumei/AIJack\">\n</div>\n\n\u2764\ufe0f <i>If you like AIJack, please consider <a href=\"https://github.com/sponsors/Koukyosyumei\">becoming a GitHub Sponsor</a></i> \u2764\ufe0f\n\n# What is AIJack?\n\n<img src=\"logo/AIJACK-NEON-LOGO.png\" width=406 align=\"right\">\n\nAIJack allows you to assess the privacy and security risks of machine learning algorithms such as *Model Inversion*, *Poisoning Attack*, *Evasion Attack*, *Free Rider*, and *Backdoor Attack*. AIJack also provides various defense techniques like *Differential Privacy*, *Homomorphic Encryption*, and other heuristic approaches. In addition, AIJack provides APIs for many distributed learning schemes like *Federated Learning* and *Split Learning*. You can integrate many attack and defense methods into such collaborative learning with a few lines. We currently implement more than 30 state-of-arts methods. For more information, see the [documentation](https://koukyosyumei.github.io/AIJack/intro.html).\n\n# Installation\n\nYou can install AIJack with `pip`. AIJack requires Boost and pybind11.\n\n```\napt install -y libboost-all-dev\npip install -U pip\npip install \"pybind11[global]\"\n\npip install aijack\n```\n\nIf you want to use the latest-version, you can directly install from GitHub.\n\n```\npip install git+https://github.com/Koukyosyumei/AIJack\n```\n\nYou can also use our [Dockerfile](Dockerfile).\n\n\n# Quick Start\n\nWe briefly introduce some example usages. You can also find more examples in [documentation](https://koukyosyumei.github.io/AIJack/intro.html).\n\n## Basic Interface\n\nFor standard machine learning algorithm, AIJack allows you to simulate attacks against machine learning models with `Attacker` APIs. AIJack mostly supports PyTorch or sklearn models.\n\nabstract code\n```Python\nattacker = Attacker(target_model)\nresult = attacker.attack()\n```\n\nFor distributed learning such as Fedeated Learning, AIJack offers four basic APIs: `Client`, `Server`, `API`, and `Manager`. `Client` and `Server` represents each client and server within each distributed learning scheme, and we register the clients and servers to `API`. You can run this `API` and execute training via `run` method. `Manager` gives additional abilities such as attack, defense or parallel computing to `Client`, `Server` or `API` via `attach` method.\n\nabstract code\n```Python\nclient = [Client(), Client()]\nserver = Server()\napi = API(client, server)\napi.run() # execute training\n\nc_manager = ClientManager()\ns_manager = ServerManager()\nExtendedClient = c_manager.attach(Client)\nExtendedServer = c_manager.attach(Server)\n\nextended_client = [ExtendedClient(), ExtendedClient()]\nextended_server = ExtendedServer()\napi = API(extended_client, extended_server)\napi.run() # execute training\n```\n\n## Federated Learning\n\n### FedAVG\n\nFedAVG is the most representative algorithm of Federated Learning, where multiple clients jointly train a single model without sharing their local datasets. You can integrate any Pytorch models.\n\n```Python\nfrom aijack.collaborative.fedavg import FedAVGClient, FedAVGServer\n\nclients = [FedAVGClient(local_model_1, user_id=0), FedAVGClient(local_model_2, user_id=1)]\noptimizers = [optim.SGD(clients[0].parameters()), optim.SGD(clients[1].parameters())]\n\nserver = FedAVGServer(clients, global_model)\n\napi = FedAVGAPI(\n    server,\n    clients,\n    criterion,\n    optimizers,\n    dataloaders\n)\napi.run()\n```\n\n### FedMD\n\nModel-Distillation based Federated Learning does not need communicating gradients, which might decrease the information leakage.\n\n```Python\nfrom aijack.collaborative.fedmd import FedMDAPI, FedMDClient, FedMDServer\n\nclients = [\n    FedMDClient(Net().to(device), public_dataloader, output_dim=10, user_id=c)\n    for c in range(client_size)\n]\nlocal_optimizers = [optim.SGD(client.parameters(), lr=lr) for client in clients]\n\nserver = FedMDServer(clients, Net().to(device))\n\napi = FedMDAPI(\n    server,\n    clients,\n    public_dataloader,\n    local_dataloaders,\n    F.nll_loss,\n    local_optimizers,\n    test_dataloader,\n    num_communication=2,\n)\napi.run()\n```\n\n### SecureBoost (Vertical Federated version of XGBoost)\n\nAIJack supports not only neuralnetwork but also tree-based Federated Learning.\n\n```Python\nfrom aijacl.collaborative.tree import SecureBoostClassifierAPI, SecureBoostClient\n\nkeygenerator = PaillierKeyGenerator(512)\npk, sk = keygenerator.generate_keypair()\n\nsclf = SecureBoostClassifierAPI(2,subsample_cols,min_child_weight,depth,min_leaf,\n                  learning_rate,boosting_rounds,lam,gamma,eps,0,0,1.0,1,True)\n\nsp1 = SecureBoostClient(x1, 2, [0], 0, min_leaf, subsample_cols, 256, False, 0)\nsp2 = SecureBoostClient(x2, 2, [1], 1, min_leaf, subsample_cols, 256, False, 0)\nsparties = [sp1, sp2]\n\nsparties[0].set_publickey(pk)\nsparties[0].set_secretkey(sk)\nsparties[1].set_publickey(pk)\n\nsclf.fit(sparties, y)\nsclf.predict_proba(X)\n```\n\n### MPI-backend\n\nAIJack supports MPI-backend for some of Federated Learning methods.\n\nFedAVG\n```Python\nfrom mpi4py import MPI\nfrom aijack.collaborative.fedavg import FedAVGClient, FedAVGServer\nfrom aijack.collaborative.fedavg import MPIFedAVGAPI, MPIFedAVGClientManager, MPIFedAVGServerManager\n\ncomm = MPI.COMM_WORLD\nmyid = comm.Get_rank()\n\nmpi_client_manager = MPIFedAVGClientManager()\nmpi_server_manager = MPIFedAVGServerManager()\nMPIFedAVGClient = mpi_client_manager.attach(FedAVGClient)\nMPIFedAVGServer = mpi_server_manager.attach(FedAVGServer)\n\nif myid == 0:\n    server = MPIFedAVGServer(comm, FedAVGServer(client_ids, model))\n    api = MPIFedAVGAPI(\n        comm,\n        server,\n        True,\n        F.nll_loss,\n        None,\n        None,\n        num_rounds,\n        1,\n    )\nelse:\n    client = MPIFedAVGClient(comm, FedAVGClient(model, user_id=myid))\n    api = MPIFedAVGAPI(\n        comm,\n        client,\n        False,\n        F.nll_loss,\n        optimizer,\n        dataloader,\n        num_rounds,\n        1,\n    )\n\napi.run()\n```\n\nFedMD\n```Python\nfrom mpi4py import MPI\nfrom aijack.collaborative.fedmd import MPIFedMDAPI, MPIFedMDClient, MPIFedMDServer\n\ncomm = MPI.COMM_WORLD\nmyid = comm.Get_rank()\n\nif myid == 0:\n    server = MPIFedMDServer(comm, FedMDServer(client_ids, model))\n    api = MPIFedMDAPI(\n        comm,\n        server,\n        True,\n        F.nll_loss,\n        None,\n        None,\n    )\nelse:\n    client = MPIFedMDClient(comm, FedMDClient(model, public_dataloader, output_dim=10, user_id=myid))\n    api = MPIFedMDAPI(\n        comm,\n        client,\n        False,\n        F.nll_loss,\n        optimizer,\n        dataloader,\n        public_dataloader,\n    )\n\napi.run()\n```\n\n### Attack: Model Inversion\n\nModel Inversion Attack steals the local training data via the shared information like gradients or parameters.\n\n```Python\nfrom aijack.attack.inversion import GradientInversionAttackServerManager\n\nmanager = GradientInversionAttackServerManager(input_shape, distancename=\"l2\")\nGradientInversionAttackFedAVGServer = manager.attach(FedAVGServer)\n\nserver = GradientInversionAttackFedAVGServer(clients, global_model)\n\napi = FedAVGAPI(\n    server,\n    clients,\n    criterion,\n    optimizers,\n    dataloaders\n)\napi.run()\n\nreconstructed_training_data = server.attack()\n```\n\n### Defense: Differential Privacy\n\nOne possible defense against Model Inversion Attack is using differential privacy. AIJack supports DPSGD, an optimizer which makes the trained model satisfy differential privacy.\n\n```Python\nfrom aijack.defense.dp import DPSGDManager, GeneralMomentAccountant, DPSGDClientManager\n\ndp_accountant = GeneralMomentAccountant()\ndp_manager = DPSGDManager(\n    accountant,\n    optim.SGD,\n    dataset=trainset,\n)\n\nmanager = DPSGDClientManager(dp_manager)\nDPSGDFedAVGClient = manager.attach(FedAVGClient)\n\nclients = [DPSGDFedAVGClient(local_model_1, user_id=0), DPSGDFedAVGClient(local_model_2, user_id=1)]\n```\n\n### Defense: Soteria\n\nAnother defense algorithm soteria, which theoretically gurantees the lowerbound of reconstructino error.\n\n```Python\nfrom aijack.defense.soteria import SoteriaClientManager\n\nmanager = SoteriaClientManager(\"conv\", \"lin\", target_layer_name=\"lin.0.weight\")\nSoteriaFedAVGClient = manager.attach(FedAVGClient)\n\nclients = [SoteriaFedAVGClient(local_model_1, user_id=0), SoteriaFedAVGClient(local_model_2, user_id=1)]\n```\n\n### Defense: Homomorophic Encryption\n\nClients in Federated Learning can also encrypt their local gradients to prevent the potential information leakage. For example, AIJack offers Paiilier Encryption with c++ backend, which faster than other python-based implementations.\n\n```Python\nfrom aijack.defense.paillier import PaillierGradientClientManager, PaillierKeyGenerator\n\nkeygenerator = PaillierKeyGenerator(key_length)\npk, sk = keygenerator.generate_keypair()\n\nmanager = PaillierGradientClientManager(pk, sk)\nPaillierGradFedAVGClient = manager.attach(FedAVGClient)\n\nclients = [\n  PaillierGradFedAVGClient(local_model_1, user_id=0, server_side_update=False),\n  PaillierGradFedAVGClient(local_model_2, user_id=1, server_side_update=False)\n    ]\n\nserver = FedAVGServer(clients, global_model, lr=lr, server_side_update=False)\n```\n\n### Attack: Poisoning\n\nPoisoning Attack aims to deteriorate the performance of the trained model.\n\nOne famous approach is Label Flip Attack.\n\n```Python\nfrom aijack.attack.poison import LabelFlipAttackClientManager\n\nmanager = LabelFlipAttackClientManager(victim_label=0, target_label=1)\nLabelFlipAttackFedAVGClient = manager.attach(FedAVGClient)\n\nclients = [LabelFlipAttackFedAVGClient(local_model_1, user_id=0), FedAVGClient(local_model_2, user_id=1)]\n```\n\n### Defense: FoolsGOld\n\nOne of the standard method to mitigate Poisoning Attack is FoolsGold, which calculates the similarity among clients and decrease the influence of the malicious clients.\n\n```Python\nfrom aijack.defense.foolsgold import FoolsGoldServerManager\n\nmanager = FoolsGoldServerManager()\nFoolsGoldFedAVGServer = manager.attach(FedAVGServer)\nserver = FoolsGoldFedAVGServer(clients, global_model)\n```\n\n### Attack: FreeRider\n\nIn real situation where the center server pay money for clients, it is important to detect freeriders who do not anything but pretend to locally train their models.\n\n```Python\nfrom aijack.attack.freerider import FreeRiderClientManager\n\nmanager = FreeRiderClientManager(mu=0, sigma=1.0)\nFreeRiderFedAVGClient = manager.attach(FedAVGClient)\n\nclients = [FreeRiderFedAVGClient(local_model_1, user_id=0), FedAVGClient(local_model_2, user_id=1)]\n```\n\n## Split Learning\n\nSplit Learning is another collaborative learning scheme, where only one party owns the ground-truth labels.\n\n### SplitNN\n\n```Python\nfrom aijack.collaborative.splitnn import SplitNNAPI, SplitNNClient\n\nclients = [SplitNNClient(model_1, user_id=0), SplitNNClient(model_2, user_id=1)]\noptimizers = [optim.Adam(model_1.parameters()), optim.Adam(model_2.parameters())]\n\nsplitnn = SplitNNAPI(clients, optimizers, train_loader, criterion, num_epoch)\nsplitnn.run()\n```\n\n### Attack: Label Leakage\n\nAIJack supports norm-based label leakage attack against Split Learning.\n\n```Python\nfrom aijack.attack.labelleakage import NormAttackManager\n\nmanager = NormAttackManager(criterion, device=\"cpu\")\nNormAttackSplitNNAPI = manager.attach(SplitNNAPI)\nnormattacksplitnn = NormAttackSplitNNAPI(clients, optimizers)\nleak_auc = normattacksplitnn.attack(target_dataloader)\n```\n\n\n# Supported Algorithms\n\n## Distributed Learning\n\n|             | Example                                           | Paper                                     |\n| ----------- | ------------------------------------------------- | ----------------------------------------- |\n| FedAVG      | [example](docs/aijack_fedavg.ipynb)               | [paper](https://arxiv.org/abs/1602.05629) |\n| FedProx     | WIP                                               | [paper](https://arxiv.org/abs/1812.06127) |\n| FedKD       | [example](test/collaborative/fedkd/test_fedkd.py) | [paper](https://arxiv.org/abs/2108.13323) |\n| FedMD       | [example](docs/aijack_fedmd.ipynb)                | [paper](https://arxiv.org/abs/1910.03581) |\n| FedGEMS     | WIP                                               | [paper](https://arxiv.org/abs/2110.11027) |\n| DSFL        | WIP                                               | [paper](https://arxiv.org/abs/2008.06180) |\n| SplitNN     | [example](docs/aijack_split_learning.ipynb)       | [paper](https://arxiv.org/abs/1812.00564) |\n| SecureBoost | [example](docs/aijack_secureboost.ipynb)          | [paper](https://arxiv.org/abs/1901.08755) |\n\n## Attack\n\n|                          | Attack Type          | Example                                                   | Paper                                                                                                                                               |\n| ------------------------ | -------------------- | --------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n| MI-FACE                  | Model Inversion      | [example](docs/aijack_miface.ipynb)                       | [paper](https://dl.acm.org/doi/pdf/10.1145/2810103.2813677)                                                                                         |\n| DLG                      | Model Inversion      | [example](docs/aijack_gradient_inversion_attack.ipynb)    | [paper](https://papers.nips.cc/paper/2019/hash/60a6c4002cc7b29142def8871531281a-Abstract.html)                                                      |\n| iDLG                     | Model Inversion      | [example](docs/aijack_gradient_inversion_attack.ipynb)    | [paper](https://arxiv.org/abs/2001.02610)                                                                                                           |\n| GS                       | Model Inversion      | [example](docs/aijack_gradient_inversion_attack.ipynb)    | [paper](https://proceedings.neurips.cc/paper/2020/hash/c4ede56bbd98819ae6112b20ac6bf145-Abstract.html)                                              |\n| CPL                      | Model Inversion      | [example](docs/aijack_gradient_inversion_attack.ipynb)    | [paper](https://arxiv.org/abs/2004.10397)                                                                                                           |\n| GradInversion            | Model Inversion      | [example](docs/aijack_gradient_inversion_attack.ipynb)    | [paper](https://openaccess.thecvf.com/content/CVPR2021/papers/Yin_See_Through_Gradients_Image_Batch_Recovery_via_GradInversion_CVPR_2021_paper.pdf) |\n| GAN Attack               | Model Inversion      | [example](example/model_inversion/gan_attack.py)          | [paper](https://arxiv.org/abs/1702.07464)                                                                                                           |\n| Shadow Attack            | Membership Inference | [example](docs/aijack_membership_inference.ipynb)         | [paper](https://arxiv.org/abs/1610.05820)                                                                                                           |\n| Norm attack              | Label Leakage        | [example](docs/aijack_split_learning.ipynb)               | [paper](https://arxiv.org/abs/2102.08504)                                                                                                           |\n| Delta Weights            | Free Rider Attack    | WIP                                                       | [paper](https://arxiv.org/pdf/1911.12560.pdf)                                                                                                       |\n| Gradient descent attacks | Evasion Attack       | [example](docs/aijack_evasion_attack.ipynb)               | [paper](https://arxiv.org/abs/1708.06131)                                                                                                           |\n| DBA                      | Backdoor Attack      | WIP                                                       | [paper](https://openreview.net/forum?id=rkgyS0VFvr)                                                                                                 |\n| Label Flip Attack        | Poisoning Attack     | [example](docs/aijack_poisoning_federated_learning.ipynb) | [paper](https://arxiv.org/abs/2203.08669)                                                                                                           |\n| History Attack           | Poisoning Attack     | [example](docs/aijack_poisoning_federated_learning.ipynb) | [paper](https://arxiv.org/abs/2203.08669)                                                                                                           |\n| MAPF                     | Poisoning Attack     | [example](docs/aijack_poisoning_federated_learning.ipynb) | [paper](https://arxiv.org/abs/2203.08669)                                                                                                           |\n| SVM Poisoning            | Poisoning Attack     | [example](docs/aijack_poisoning_attack_svm.ipynb)         | [paper](https://arxiv.org/abs/1206.6389)                                                                                                            |\n\n\n## Defense\n\n|                 | Defense Type           | Example                                  | Paper                                                                                                                                                              |\n| --------------- | ---------------------- | ---------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| DPSGD           | Differential Privacy   | [example](docs/aijack_miface.ipynb)      | [paper](https://arxiv.org/abs/1607.00133)                                                                                                                          |\n| Paillier        | Homomorphic Encryption | [example](docs/aijack_secureboost.ipynb) | [paper](https://link.springer.com/chapter/10.1007/3-540-48910-X_16)                                                                                                |  |\n| CKKS            | Homomorphic Encryption | [test](test/defense/ckks/test_core.py)   | [paper](https://eprint.iacr.org/2016/421.pdf)                                                                                                                      |  |\n| Soteria         | Others                 | [example](docs/aijack_soteria.ipynb)     | [paper](https://openaccess.thecvf.com/content/CVPR2021/papers/Sun_Soteria_Provable_Defense_Against_Privacy_Leakage_in_Federated_Learning_From_CVPR_2021_paper.pdf) |\n| FoolsGold       | Others                 | WIP                                      | [paper](https://arxiv.org/abs/1808.04866)                                                                                                                          |\n| Sparse Gradient | Others                 | [example](docs/aijack_fedavg.ipynb)      | [paper](https://aclanthology.org/D17-1045/)                                                                                                                        |\n| MID             | Others                 | [example](docs/aijack_mid.ipynb)         | [paper](https://arxiv.org/abs/2009.05241)                                                                                                                          |\n\n-----------------------------------------------------------------------\n\n# Contact\n\nwelcome2aijack[@]gmail.com\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION  1. Definitions.  \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.  2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.  3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.  4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:  (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.  5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.  6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.  7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.  8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.  9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.  END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.  To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.  Copyright 2022 Hideaki Takahashi  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aijack",
            "package_url": "https://pypi.org/project/aijack/",
            "platform": null,
            "project_url": "https://pypi.org/project/aijack/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/aijack/0.0.1a1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Security and Privacy Risk Simulator for Machine Learning",
            "version": "0.0.1a1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16281018,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "bd3499aa20b53ff349db1f3626f2cc46bcfa53cbe643d76f4c8b4229c29b51f7",
                    "md5": "8d5a535e8bafcf7d616a1f240447ab58",
                    "sha256": "b4525a4052f96e2f93a4d8e162e5efc88b84ed80f7e08b2c0fa232983c6abcdd"
                },
                "downloads": -1,
                "filename": "aijack-0.0.1a1.tar.gz",
                "has_sig": false,
                "md5_digest": "8d5a535e8bafcf7d616a1f240447ab58",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 127537,
                "upload_time": "2023-01-02T17:57:36",
                "upload_time_iso_8601": "2023-01-02T17:57:36.665754Z",
                "url": "https://files.pythonhosted.org/packages/bd/34/99aa20b53ff349db1f3626f2cc46bcfa53cbe643d76f4c8b4229c29b51f7/aijack-0.0.1a1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
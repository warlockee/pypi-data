{
    "0.0.1": {
        "info": {
            "author": "GoCardless",
            "author_email": "engineering@gocardless.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "License :: OSI Approved :: MIT License",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3.7"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/communitytechalliance/airflow-dbt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "airflow-dbt-cta",
            "package_url": "https://pypi.org/project/airflow-dbt-cta/",
            "platform": null,
            "project_url": "https://pypi.org/project/airflow-dbt-cta/",
            "project_urls": {
                "Homepage": "https://github.com/communitytechalliance/airflow-dbt"
            },
            "release_url": "https://pypi.org/project/airflow-dbt-cta/0.0.1/",
            "requires_dist": [
                "apache-airflow (>=1.10.3)"
            ],
            "requires_python": "",
            "summary": "Apache Airflow integration for dbt (forked from https://github.com/gocardless/airflow-dbt)",
            "version": "0.0.1",
            "yanked": true,
            "yanked_reason": "doesn't work lol"
        },
        "last_serial": 16241967,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "715b5af18373252eca5a670f1d23bf75",
                    "sha256": "859cba12ad3d901de74edaef5d18998cc08612ac041e6fd653bb78f9d1c7eaa8"
                },
                "downloads": -1,
                "filename": "airflow_dbt_cta-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "715b5af18373252eca5a670f1d23bf75",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 8949,
                "upload_time": "2022-12-28T22:12:11",
                "upload_time_iso_8601": "2022-12-28T22:12:11.122215Z",
                "url": "https://files.pythonhosted.org/packages/4f/55/dc3570ee52264ab1f22b33bac5d6ea87ba3513ade696a54d9498c4b25f79/airflow_dbt_cta-0.0.1-py3-none-any.whl",
                "yanked": true,
                "yanked_reason": "doesn't work lol"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ec6f94e681d0795c2aa248846c921158",
                    "sha256": "715bd4fd0eb33e6f314c55828bfd20f69544458ad2efe814e962a3e9ce9dcd49"
                },
                "downloads": -1,
                "filename": "airflow_dbt_cta-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "ec6f94e681d0795c2aa248846c921158",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10166,
                "upload_time": "2022-12-28T22:12:12",
                "upload_time_iso_8601": "2022-12-28T22:12:12.859830Z",
                "url": "https://files.pythonhosted.org/packages/d6/7b/a3a31a969a3dd9d4337e910d56e87156c01cd8e4394c9834a9252893df81/airflow_dbt_cta-0.0.1.tar.gz",
                "yanked": true,
                "yanked_reason": "doesn't work lol"
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "GoCardless",
            "author_email": "engineering@gocardless.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "License :: OSI Approved :: MIT License",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3.7"
            ],
            "description": "# airflow-dbt\n\n**NOTE: this repository was forked from https://github.com/gocardless/airflow-dbt in order to release an updated version to PyPi.**\n\nThis is a collection of [Airflow](https://airflow.apache.org/) operators to provide easy integration with [dbt](https://www.getdbt.com).\n\n```py\nfrom airflow import DAG\nfrom airflow_dbt_cta.operators.dbt_operator import (\n    DbtSeedOperator,\n    DbtSnapshotOperator,\n    DbtRunOperator,\n    DbtTestOperator,\n    DbtCleanOperator,\n)\nfrom airflow.utils.dates import days_ago\n\ndefault_args = {\n  'dir': '/srv/app/dbt',\n  'start_date': days_ago(0)\n}\n\nwith DAG(dag_id='dbt', default_args=default_args, schedule_interval='@daily') as dag:\n\n  dbt_seed = DbtSeedOperator(\n    task_id='dbt_seed',\n  )\n\n  dbt_snapshot = DbtSnapshotOperator(\n    task_id='dbt_snapshot',\n  )\n\n  dbt_run = DbtRunOperator(\n    task_id='dbt_run',\n  )\n\n  dbt_test = DbtTestOperator(\n    task_id='dbt_test',\n    retries=0,  # Failing tests would fail the task, and we don't want Airflow to try again\n  )\n\n  dbt_clean = DbtCleanOperator(\n    task_id='dbt_clean',\n  )\n\n  dbt_seed >> dbt_snapshot >> dbt_run >> dbt_test >> dbt_clean\n```\n\n## Installation\n\nInstall from PyPI:\n\n```sh\npip install airflow-dbt\n```\n\nIt will also need access to the `dbt` CLI, which should either be on your `PATH` or can be set with the `dbt_bin` argument in each operator.\n\n## Usage\n\nThere are five operators currently implemented:\n\n* `DbtDocsGenerateOperator`\n  * Calls [`dbt docs generate`](https://docs.getdbt.com/reference/commands/cmd-docs)\n* `DbtDepsOperator`\n  * Calls [`dbt deps`](https://docs.getdbt.com/docs/deps)\n* `DbtSeedOperator`\n  * Calls [`dbt seed`](https://docs.getdbt.com/docs/seed)\n* `DbtSnapshotOperator`\n  * Calls [`dbt snapshot`](https://docs.getdbt.com/docs/snapshot)\n* `DbtRunOperator`\n  * Calls [`dbt run`](https://docs.getdbt.com/docs/run)\n* `DbtTestOperator`\n  * Calls [`dbt test`](https://docs.getdbt.com/docs/test)\n* `DbtCleanOperator`\n  * Calls [`dbt clean`](https://docs.getdbt.com/docs/clean)\n\n\nEach of the above operators accept the following arguments:\n\n* `env`\n  * If set as a kwarg dict, passed the given environment variables as the arguments to the dbt task\n* `profiles_dir`\n  * If set, passed as the `--profiles-dir` argument to the `dbt` command\n* `target`\n  * If set, passed as the `--target` argument to the `dbt` command\n* `dir`\n  * The directory to run the `dbt` command in\n* `full_refresh`\n  * If set to `True`, passes `--full-refresh`\n* `vars`\n  * If set, passed as the `--vars` argument to the `dbt` command. Should be set as a Python dictionary, as will be passed to the `dbt` command as YAML\n* `models`\n  * If set, passed as the `--models` argument to the `dbt` command\n* `exclude`\n  * If set, passed as the `--exclude` argument to the `dbt` command\n* `select`\n  * If set, passed as the `--select` argument to the `dbt` command\n* `selector`\n  * If set, passed as the `--selector` argument to the `dbt` command\n* `dbt_bin`\n  * The `dbt` CLI. Defaults to `dbt`, so assumes it's on your `PATH`\n* `verbose`\n  * The operator will log verbosely to the Airflow logs\n* `warn_error`\n  * If set to `True`, passes `--warn-error` argument to `dbt` command and will treat warnings as errors\n\nTypically you will want to use the `DbtRunOperator`, followed by the `DbtTestOperator`, as shown earlier.\n\nYou can also use the hook directly. Typically this can be used for when you need to combine the `dbt` command with another task in the same operators, for example running `dbt docs` and uploading the docs to somewhere they can be served from.\n\n## Building Locally\n\nTo install from the repository:\nFirst it's recommended to create a virtual environment:\n```bash\npython3 -m venv .venv\n\nsource .venv/bin/activate\n```\n\nInstall using `pip`:\n```bash\npip install .\n```\n\n## Testing\n\nTo run tests locally, first create a virtual environment (see [Building Locally](https://github.com/gocardless/airflow-dbt#building-locally) section)\n\nInstall dependencies:\n```bash\npip install . pytest\n```\n\nRun the tests:\n```bash\npytest tests/\n```\n\n## Code style\nThis project uses [flake8](https://flake8.pycqa.org/en/latest/).\n\nTo check your code, first create a virtual environment (see [Building Locally](https://github.com/gocardless/airflow-dbt#building-locally) section):\n```bash\npip install flake8\nflake8 airflow_dbt/ tests/ setup.py\n```\n\n## Package management\n\nIf you use dbt's package manager you should include all dependencies before deploying your dbt project.\n\nFor Docker users, packages specified in `packages.yml` should be included as part your docker image by calling `dbt deps` in your `Dockerfile`.\n\n## Amazon Managed Workflows for Apache Airflow (MWAA)\n\nIf you use MWAA, you just need to update the `requirements.txt` file and add `airflow-dbt` and `dbt` to it.\n\nThen you can have your dbt code inside a folder `{DBT_FOLDER}` in the dags folder on S3 and configure the dbt task like below:\n\n```python\ndbt_run =\u00a0DbtRunOperator(\n  task_id='dbt_run',\n  dbt_bin='/usr/local/airflow/.local/bin/dbt',\n  profiles_dir='/usr/local/airflow/dags/{DBT_FOLDER}/',\n  dir='/usr/local/airflow/dags/{DBT_FOLDER}/'\n)\n```\n\n## Templating and parsing environments variables\n\nIf you would like to run DBT using custom profile definition template with environment-specific variables, like for example profiles.yml using jinja:\n```yaml\n<profile_name>:\n  outputs:\n    <source>:\n      database: \"{{ env_var('DBT_ENV_SECRET_DATABASE') }}\"\n      password: \"{{ env_var('DBT_ENV_SECRET_PASSWORD') }}\"\n      schema: \"{{ env_var('DBT_ENV_SECRET_SCHEMA') }}\"\n      threads: \"{{ env_var('DBT_THREADS') }}\"\n      type: <type>\n      user: \"{{ env_var('USER_NAME') }}_{{ env_var('ENV_NAME') }}\"\n  target: <source>\n```\n\nYou can pass the environment variables via the `env` kwarg parameter:\n\n```python\nimport os\n...\n\ndbt_run =\u00a0DbtRunOperator(\n  task_id='dbt_run',\n  env={\n    'DBT_ENV_SECRET_DATABASE': '<DATABASE>',\n    'DBT_ENV_SECRET_PASSWORD': '<PASSWORD>',\n    'DBT_ENV_SECRET_SCHEMA': '<SCHEMA>',\n    'USER_NAME': '<USER_NAME>',\n    'DBT_THREADS': os.getenv('<DBT_THREADS_ENV_VARIABLE_NAME>'),\n    'ENV_NAME': os.getenv('ENV_NAME')\n  }\n)\n```\n\n## License & Contributing\n\n* This is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\n* Bug reports and pull requests are welcome on GitHub at https://github.com/gocardless/airflow-dbt.\n\nGoCardless \u2665 open source. If you do too, come [join us](https://gocardless.com/about/jobs).\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/communitytechalliance/airflow-dbt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "airflow-dbt-cta",
            "package_url": "https://pypi.org/project/airflow-dbt-cta/",
            "platform": null,
            "project_url": "https://pypi.org/project/airflow-dbt-cta/",
            "project_urls": {
                "Homepage": "https://github.com/communitytechalliance/airflow-dbt"
            },
            "release_url": "https://pypi.org/project/airflow-dbt-cta/0.0.2/",
            "requires_dist": [
                "apache-airflow (>=1.10.3)"
            ],
            "requires_python": "",
            "summary": "Apache Airflow integration for dbt (forked from https://github.com/gocardless/airflow-dbt)",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16241967,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2c1566af0de19115cb6075316924100f",
                    "sha256": "431bce0603a4e5746f093feeab0e1e6bd58da456b45bcded47b5366f9be9f45f"
                },
                "downloads": -1,
                "filename": "airflow_dbt_cta-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2c1566af0de19115cb6075316924100f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 8950,
                "upload_time": "2022-12-28T22:30:58",
                "upload_time_iso_8601": "2022-12-28T22:30:58.319758Z",
                "url": "https://files.pythonhosted.org/packages/35/e4/86579f3ebc31d0b7ea3968b3e952f74a89470ac1e910098ff82beb1ab285/airflow_dbt_cta-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "68eb13a522ccdb537f58721e1c9549b2",
                    "sha256": "a797cf3ccecfccc45ce94e869adcd312f652861f0b8913a0ec524aad2aceac1b"
                },
                "downloads": -1,
                "filename": "airflow_dbt_cta-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "68eb13a522ccdb537f58721e1c9549b2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10177,
                "upload_time": "2022-12-28T22:30:59",
                "upload_time_iso_8601": "2022-12-28T22:30:59.978414Z",
                "url": "https://files.pythonhosted.org/packages/b6/7e/7901d8bf822158d7ce62a09d13dddc65d3df16cbb37fc8c205f7f78d9e0e/airflow_dbt_cta-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
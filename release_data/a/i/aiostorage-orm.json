{
    "1.0.0": {
        "info": {
            "author": "aarekuha",
            "author_email": "aarekuha@gmail.ru",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "Intended Audience :: End Users/Desktop",
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/CyberPhysics-Platform/aiostorage-orm/archive/refs/heads/master.zip",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/CyberPhysics-Platform/aiostorage-orm",
            "keywords": "",
            "license": "Apache License, Version 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiostorage-orm",
            "package_url": "https://pypi.org/project/aiostorage-orm/",
            "platform": null,
            "project_url": "https://pypi.org/project/aiostorage-orm/",
            "project_urls": {
                "Download": "https://github.com/CyberPhysics-Platform/aiostorage-orm/archive/refs/heads/master.zip",
                "Homepage": "https://github.com/CyberPhysics-Platform/aiostorage-orm"
            },
            "release_url": "https://pypi.org/project/aiostorage-orm/1.0.0/",
            "requires_dist": [
                "redis"
            ],
            "requires_python": ">=3.9",
            "summary": "Python for using in-memory storage with ORM",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16258991,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "06f67388bdd9293d44c8be6220c47001",
                    "sha256": "f83ab3bb16313310b9e95513c67dcf24fd4c748fc778d6482a4d4b87e9294959"
                },
                "downloads": -1,
                "filename": "aiostorage_orm-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "06f67388bdd9293d44c8be6220c47001",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 12373,
                "upload_time": "2022-12-06T14:06:01",
                "upload_time_iso_8601": "2022-12-06T14:06:01.762779Z",
                "url": "https://files.pythonhosted.org/packages/a1/3a/cfc0ada72453e64ba5a1f3b7d6b78593c7c5302490187d93f89aeb0e70a4/aiostorage_orm-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "57abab520497bf4410b42fa874e15e88",
                    "sha256": "d5451efdb7106b09051066a4d27cd6fc8a8eae9e64ab92255036b06553c57e04"
                },
                "downloads": -1,
                "filename": "aiostorage_orm-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "57abab520497bf4410b42fa874e15e88",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 9965,
                "upload_time": "2022-12-06T14:06:03",
                "upload_time_iso_8601": "2022-12-06T14:06:03.739309Z",
                "url": "https://files.pythonhosted.org/packages/9a/34/bdef03891dcbf8a882feb7766b4f75a03b6e9718c98582cd58a3f472cb4e/aiostorage_orm-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.2.1": {
        "info": {
            "author": "aarekuha",
            "author_email": "aarekuha@gmail.ru",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "Intended Audience :: End Users/Desktop",
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "#### AioStorageORM (CyberPhysics)\n[![Upload pypi](https://github.com/CyberPhysics-Platform/aiostorage-orm/actions/workflows/pypi_deploy.yml/badge.svg)](https://github.com/CyberPhysics-Platform/aiostorage-orm/actions/workflows/pypi_deploy.yml)\n[![Linting & Pytest](https://github.com/CyberPhysics-Platform/aiostorage-orm/actions/workflows/lint_and_test.yml/badge.svg)](https://github.com/CyberPhysics-Platform/aiostorage-orm/actions/workflows/lint_and_test.yml)\n##### \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\n```bash\n    pip install aiostorage-orm\n```\n##### \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\n- [redis-py](https://github.com/redis/redis-py)\n- [nest-asyncio](https://github.com/erdewit/nest_asyncio)\n##### \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f ([\u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b](examples/), [\u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_1_single.py))\n1. \u0418\u043c\u043f\u043e\u0440\u0442 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n    ```python\n        import redis.asyncio as redis\n\n        from storage_orm import StorageORM\n        from storage_orm import RedisORM\n        from storage_orm import RedisItem\n        from storage_orm import OperationResult\n    ```\n1. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n    ```python\n        class ExampleItem(RedisItem):\n            \"\"\"\n                \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n                  (\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0411\u0414 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0438\u043f)\n            \"\"\"\n            date_time: int\n            any_value: float\n\n            class Meta:\n                \"\"\"\n                    \u0421\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 Redis\n                    \u041a\u043b\u044e\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b \u0434\u043b\u044f\n                      \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\n                \"\"\"\n                table = \"subsystem.{subsystem_id}.tag.{tag_id}\"\n    ```\n1. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ORM \u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438\n    1. \u041f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 ORM\n        ```python\n            orm: StorageORM = RedisORM(host=\"localhost\", port=8379, db=1)\n        ```\n    1. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 redis.Redis \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\n        ```python\n            redis: redis.Redis = redis.Redis(host=\"localhost\", port=8379, db=1)\n            orm: StorageORM = RedisORM(client=redis)\n        ```\n1. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435/\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 (\u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0432 Meta.table \u043c\u043e\u0434\u0435\u043b\u0438)\n    1. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n        ```python\n            example_item: ExampleItem = ExampleItem(\n                subsystem_id=3,\n                tag_id=15,\n                date_time=100,\n                any_value=17.\n            )\n        ```\n    1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0441\u0442\u0430\u0432\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438\n        1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 save() \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\n            ```python\n                operation_result: OperationResult = await example_item.save()\n            ```\n        1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 save() StorageOrm\n            ```python\n                operation_result: OperationResult = await orm.save(item=example_item)\n            ```\n        1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c **\u0433\u0440\u0443\u043f\u043f\u043e\u0432\u0443\u044e** \u0432\u0441\u0442\u0430\u0432\u043a\u0443 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 ([\u043f\u0440\u0438\u043c\u0435\u0440 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u043e\u0439 \u0432\u0441\u0442\u0430\u0432\u043a\u0438](examples/redis_2_bulk_multiple.py))\n            ```python\n                operation_result: OperationResult = await orm.bulk_create(\n                    items=[example_item1, example_item2]\n                )\n            ```\n1. \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0411\u0414\n    - \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 Meta.table\n        ```python\n            table = \"subsystem.{subsystem_id}.tag.{tag_id}\"\n                                     ^               ^\n        ```\n        , \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440\n        ```python\n            example_items: ExampleItem = await exampleitem.get(subsystem_id=3, tag_id=15)\n        ```\n1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_3_using_multiple_connections.py))\n    - \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432 \u043c\u0435\u0442\u043e\u0434 StorageItem.using(db_instance=...) \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c\n      \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0411\u0414 Redis, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440\n        ```python\n            redis_another: redis.Redis = redis.Redis(host=\"localhost\", port=8379, db=17)\n            ...\n            result_of_operation: OperationResult = await example_item.using(db_instance=redis_another).save()\n        ```\n1. \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_4_values_in_list.py))\n    - \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0435\u043c\u0443\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0443\u0444\u0444\u0438\u043a\u0441\u043e\u043c __in, \u0432\n      \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0441\u043a\u043e\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n        ```python\n            getted_items: list[ExampleItem] = await ExampleItem.filter(subsystem_id__in=[21, 23], tag_id=15)\n        ```\n1. \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_5_find_by_object.py))\n    - \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c\n      \u0435\u0433\u043e \u0432 \u043c\u0435\u0442\u043e\u0434 RedisORM.get\n    ```python\n        item: ExampleItem = ExampleItem(subsystem_id=1, tag_id=15)\n        item_by_object: ExampleItem | None = await ExampleItem.get(_item=item)\n    ```\n1. \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_5_find_by_object.py))\n    - \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c\n      \u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0432 \u043c\u0435\u0442\u043e\u0434 RedisORM.filter\n    ```python\n        items: list[ExampleItem] = [\n            ExampleItem(subsystem_id=1, tag_id=15),\n            ExampleItem(subsystem_id=2, tag_id=16),\n        ]\n        item_by_objects: list[ExampleItem] = await ExampleItem.filter(_items=items)\n    ```\n1. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_6_delete_item.py))\n    ```python\n        example_item: ExampleItem = ExampleItem(subsystem_id=3, tag_id=15)\n        result_of_operation: OperationResult = await example_item.delete()\n    ```\n1. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_6_delete_item.py))\n    ```python\n        result_of_operation: OperationResult = await orm.bulk_delete(items=example_items)\n    ```\n1. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0436\u0438\u0437\u043d\u0438 ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_7_ttl.py))\n    ```python\n        class ExampleItem(RedisItem):\n            # \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0411\u0414 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0438\u043f)\n            date_time: int\n            any_value: str\n\n            class Meta:\n                # \u0421\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 Redis\n                # \u041a\u043b\u044e\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\n                table = \"subsystem.{subsystem_id}.tag.{tag_id}\"\n                # \u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n                ttl = 10\n        ...\n        example_item: ExampleItem = ExampleItem(subsystem_id=3, tag_id=15, date_time=100, any_value=17.)\n        result_of_operation: OperationResult = await example_item.save()\n        ...\n        example_items: list[ExampleItem] = []\n        for i in range(100):\n            subsystem_id: int = i % 10\n            example_item: ExampleItem = ExampleItem(\n                subsystem_id=subsystem_id,\n                another_key_value=i,\n                tag_id=10 + (15 * random.randint(0, 1)),\n                date_time=i*100,\n                any_value=random.random() * 10,\n            )\n            example_items.append(example_item)\n        result_of_operation: OperationResult = await orm.bulk_create(items=example_items)\n    ```\n1. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432\u043e \u0444\u0440\u0435\u0439\u043c ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_8_frame.py))\n    ```python\n        class ExampleItem(RedisItem):\n            # \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0411\u0414 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0438\u043f)\n            date_time: int\n            any_value: str\n\n            class Meta:\n                # \u0421\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 Redis\n                # \u041a\u043b\u044e\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\n                table = \"subsystem.{subsystem_id}.tag.{tag_id}\"\n                ttl = 10  # \u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n                frame_size = 3  # \u0420\u0430\u0437\u043c\u0435\u0440 frame'\u0430\n        ...\n        result_of_operation: OperationResult = await orm.frame.add(item_or_items=example_item)\n    ```\n1. \u0413\u0440\u0443\u043f\u043f\u043e\u0432\u043e\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432\u043e \u0444\u0440\u0435\u0439\u043c ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_8_frame.py))\n    * \u0437\u0430\u043f\u0438\u0441\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u0440\u043e\u0434\u043d\u044b\u043c\u0438 (\u0434\u043e\u043b\u0436\u043d\u044b \u044f\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u043e\u043c RedisItem, \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b\n      \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438)\n    ```python\n        ...\n        result_of_operation: OperationResult = await orm.frame.add(item_or_items=[example_item, example_item_2])\n    ```\n1. \u0421\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0440\u0435\u0439\u043c\u0430 ([\u043f\u0440\u0438\u043c\u0435\u0440](examples/redis_8_frame.py))\n    * \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0440\u0435\u0439\u043c\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c (list[ExampleItem])\n    * \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0440\u0435\u0439\u043c\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u0433\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 start_index \u0438 end_index (\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0442.\u0435. \u0441\u0430\u043c\u044b\u0439 \u0441\u0442\u0430\u0440\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n      get(ExampleItem(), 0, 0), \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 get(ExampleItem(), -1, -1))\n    ```python\n        ...\n        result_of_operation: OperationResult = await orm.frame.get(item=example_item)\n    ```\n##### \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432\n```bash\n    python -m venv venv\n    source ./venv/bin/activate\n    pip install redis\n\n    # \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\n    PYTHONPATH=\"${PYTHONPATH}:.\" python examples/redis_1_single.py\n\n    # \u041f\u0440\u0438\u043c\u0435\u0440 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u043e\u0439 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 (bulk)\n    PYTHONPATH=\"${PYTHONPATH}:.\" python examples/redis_2_bulk_multiple.py\n\n    # \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\n    PYTHONPATH=\"${PYTHONPATH}:.\" python examples/redis_3_using_multiple_connections.py\n\n    # \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    PYTHONPATH=\"${PYTHONPATH}:.\" python examples/redis_4_values_in_list.py\n\n    # \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0443\n    PYTHONPATH=\"${PYTHONPATH}:.\" python examples/redis_5_find_by_object.py\n\n    # \u041f\u0440\u0438\u043c\u0435\u0440 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432  \n    PYTHONPATH=\"${PYTHONPATH}:.\" python examples/redis_6_delete_item.py\n    \n    # \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0436\u0438\u0437\u043d\u0438\n    PYTHONPATH=\"${PYTHONPATH}:.\" python examples/redis_7_ttl.py\n    \n    # \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 frame'\u0430\u043c\u0438\n    PYTHONPATH=\"${PYTHONPATH}:.\" python examples/redis_8_frame.py\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/CyberPhysics-Platform/aiostorage-orm/archive/refs/heads/master.zip",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/CyberPhysics-Platform/aiostorage-orm",
            "keywords": "",
            "license": "Apache License, Version 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiostorage-orm",
            "package_url": "https://pypi.org/project/aiostorage-orm/",
            "platform": null,
            "project_url": "https://pypi.org/project/aiostorage-orm/",
            "project_urls": {
                "Download": "https://github.com/CyberPhysics-Platform/aiostorage-orm/archive/refs/heads/master.zip",
                "Homepage": "https://github.com/CyberPhysics-Platform/aiostorage-orm"
            },
            "release_url": "https://pypi.org/project/aiostorage-orm/1.2.1/",
            "requires_dist": [
                "redis",
                "nest-asyncio"
            ],
            "requires_python": ">=3.9",
            "summary": "Python for using in-memory storage with ORM",
            "version": "1.2.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16258991,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d2065bb936a64ba28fc891868019413a",
                    "sha256": "2ea6f9bad7e48881a0f43b1a92994012f8f4f135fd9a28485dda46ffc6fd0f75"
                },
                "downloads": -1,
                "filename": "aiostorage_orm-1.2.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d2065bb936a64ba28fc891868019413a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 17489,
                "upload_time": "2022-12-30T15:16:04",
                "upload_time_iso_8601": "2022-12-30T15:16:04.855352Z",
                "url": "https://files.pythonhosted.org/packages/ce/04/663e567410229240c2596a3659919bba3d71e74daf7e5d187da79e931fb2/aiostorage_orm-1.2.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ada02af17a5f119e86e50a2c5f4a16e4",
                    "sha256": "a37ac222ce98fd8f4bd20c57eb3909db55bc0890c8f13b1ea43e12b8eec02bbc"
                },
                "downloads": -1,
                "filename": "aiostorage_orm-1.2.1.tar.gz",
                "has_sig": false,
                "md5_digest": "ada02af17a5f119e86e50a2c5f4a16e4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 13737,
                "upload_time": "2022-12-30T15:16:06",
                "upload_time_iso_8601": "2022-12-30T15:16:06.326099Z",
                "url": "https://files.pythonhosted.org/packages/dc/a5/9b60561b11af93925924ac65a1086043599e8189b50df5f894d97f6aeb86/aiostorage_orm-1.2.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
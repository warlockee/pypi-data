{
    "1.0.1": {
        "info": {
            "author": "Thang Dang Minh",
            "author_email": "thangdangdev@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Environment :: Web Environment",
                "Framework :: Django",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: BSD License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Topic :: Internet :: WWW/HTTP"
            ],
            "description": "# DRF HTTP Serialization\n\n**A collection of useful Decorators to DRY up your Django Rest Framework when using Serializers**\n\nFull documentation: <https://drf-http-serialization.readthedocs.io/en/latest/>\n\n## Overview\n\nSerializer decorators help you boost your code and decrease duplication\nby using a higher-order function to reduce the number of lines of code\nand maintain consistency in your project.\n\n## Requirements\n\n- Python (>= 3.7)\n- [Django](https://github.com/django/django) (>= 3.0)\n- [Django REST Framework](https://github.com/tomchristie/django-rest-framework) (> 3.11)\n\n## Installation\n\nUsing `pip`:\n\n```bash\n$ pip install drf-http-serialization\n```\n\n## Basic Usage\n\n**HttpSerialization**\n\n```py\n# model user\nfrom django.contrib.auth.models import AbstractUser\n\nclass User(AbstractUser):\n    pass\n```\n\n```py\n# serializers.py\nfrom rest_framework import serializers\nfrom drf_http_serialization.models import User\n\nclass UserInformationSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField()\n    username = serializers.CharField()\n\n    class Meta:\n        model = User\n        fields = [\"id\", \"email\", \"username\"]\n```\n\n- With `@api_view` decorator function\n\n```py\nfrom rest_framework.decorators import api_view\nfrom drf_http_serialization import HttpSerialization\nfrom drf_http_serialization.serializers import UserInformationSerializer\n\n@api_view(http_method_names=[\"GET\"])\n@HttpSerialization(serializer_cls=UserInformationSerializer)\ndef get_user_func_view(request):\n    return request.user\n```\n\nAPI response\n\n```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"email\": \"userA@example.com\",\n    \"username\": \"userA\"\n  }\n}\n```\n\n- With `GenericViewSet` class\n\n```py\nfrom drf_http_serialization import HttpSerialization\nfrom rest_framework.viewsets import GenericViewSet\nfrom drf_http_serialization.models import User\nfrom drf_http_serialization.serializers import UserInformationSerializer\n# ...\n\n\nclass UserViewSet(GenericViewSet):\n    def get_queryset(self):\n        return User.objects.all()\n\n    @HttpSerialization(serializer_cls=UserInformationSerializer)\n    def list(self, request):\n        return self.get_queryset()\n```\n\nAPI response\n\n```json\n{\n  \"count\": 2,\n  \"next\": null,\n  \"previous\": null,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"email\": \"tom_hiddleston@gmail.com\",\n      \"username\": \"tom_hiddleston\"\n    },\n    {\n      \"id\": 2,\n      \"email\": \"chris_hemsworth@gmail.com\",\n      \"username\": \"chris_hemsworth\"\n    }\n  ]\n}\n```\n\n- With `APIView` class\n\n```py\nfrom rest_framework.views import APIView\nfrom drf_http_serialization import HttpSerialization\nfrom drf_http_serialization.serializers import UserInformationSerializer\n\n\nclass UserAPIView(APIView):\n    @HttpSerialization(serializer_cls=UserInformationSerializer)\n    def get(self, request):\n        return request.user\n```\n\n**SchemaValidation**\n\n- When validating body data(`POST` method)\n\n```py\nfrom rest_framework.views import APIView\nfrom drf_http_serialization import HttpSerialization, SchemaValidation\nfrom drf_http_serialization.serializers import UserInformationSerializer\nfrom drf_http_serialization.models import User\n\n# combination usage\nclass UserAPIView(APIView):\n    @HttpSerialization(serializer_cls=UserInformationSerializer)\n    @SchemaValidation(serializer_cls=UserInformationSerializer, location=\"body\")\n    def create(self, request, data):\n        # data object is validated\n        # the default will use key `data`, if you want to use another key,\n        # add argument to_key=\"something\" in SchemaValidation\n        user = User.objects.create(**data)\n        return user\n```\n\nAPI call\n\n```bash\nPOST /api/users HTTP/1.1\nHost: 127.0.0.1\nContent-Type: application/json\nAccept: */*\n\n\n{\n  \"email\": \"chris.evans\",\n  \"username\": \"chris_evans\"\n}\n\n```\n\nAPI response (422 HTTP status's code)\n\n```json\n{\n  \"errors\": [\n    {\n      \"field\": \"email\",\n      \"detail\": [\"Enter a valid email address.\"]\n    }\n  ],\n  \"message\": \"Validation Error!\"\n}\n```\n\n- When validating query params\n\n```py\nfrom drf_http_serialization import HttpSerialization, SchemaValidation\nfrom drf_http_serialization.serializers import UserInformationSerializer\nfrom drf_http_serialization.models import User\nfrom rest_framework.viewsets import GenericViewSet\n\nclass UserViewSet(GenericViewSet):\n\n    # combination usage\n    @HttpSerialization(serializer_cls=UserInformationSerializer)\n    @SchemaValidation(serializer_cls=UserInformationSerializer, location=\"query\")\n    def list(self, request, query):\n        # data dict is validated\n        # the default will use key `data`, if you want to use another key,\n        # add argument to_key=\"something\" in SchemaValidation\n        user = User.objects.filter(username=query[\"username\"])\n        return user\n```\n\nAPI call\n\n```\nGET /api/users?email=chris_evans HTTP/1.1\n```\n\nAPI response(422 HTTP status's code)\n\n```json\n{\n  \"errors\": [\n    {\n      \"field\": \"email\",\n      \"detail\": [\"Enter a valid email address.\"]\n    }\n  ],\n  \"message\": \"Validation Error!\"\n}\n```\n\nAccept list query params lookup:\n\n```py\nfrom drf_http_serialization import HttpSerialization, SchemaValidation\nfrom drf_http_serialization.serializers import UserListLookUpSerializer, UserInformationSerializer\nfrom drf_http_serialization.models import User\nfrom rest_framework.viewsets import GenericViewSet\n\nclass UserViewSet(GenericViewSet):\n\n    # combination usage\n    @HttpSerialization(serializer_cls=UserInformationSerializer)\n    @SchemaValidation(serializer_cls=UserListLookUpSerializer, location=\"query\")\n    def list(self, request, query):\n        # query dict is validated\n        # the default will use key `query`, if you want to use another key,\n        # add argument to_key=\"something\" in SchemaValidation\n        user = User.objects.filter(username__in=query[\"username\"])\n        return user\n```\n\nAPI request\n\n```\nGET /api/users?username=chris_evans&username=tom_hiddleston HTTP/1.1\n```\n\nAPI response\n\n```json\n{\n  \"count\": 2,\n  \"next\": null,\n  \"previous\": null,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"email\": \"tom_hiddleston@gmail.com\",\n      \"username\": \"tom_hiddleston\"\n    },\n    {\n      \"id\": 3,\n      \"email\": \"chris.evans@gmail.com\",\n      \"username\": \"chris_evans\"\n    }\n  ]\n}\n```\n\n## Support\n\nIf you need help, don't hesitate to start an [issue][issue].\nFor commercial support, please contact via email:\n[Thang Dang Minh](mailto:thangdangdev@gmail.com?subject=[GitHub]%20Source%20Django%20HTTP%20Serialization)\n\n[issue]: https://github.com/tkppro/drf-http-serialization/issues\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/tkppro/drf-http-serialization",
            "keywords": "",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "drf-http-serialization",
            "package_url": "https://pypi.org/project/drf-http-serialization/",
            "platform": null,
            "project_url": "https://pypi.org/project/drf-http-serialization/",
            "project_urls": {
                "Homepage": "https://github.com/tkppro/drf-http-serialization"
            },
            "release_url": "https://pypi.org/project/drf-http-serialization/1.0.1/",
            "requires_dist": [
                "Django (>=3.0)"
            ],
            "requires_python": ">=3.7",
            "summary": "Open package for Django to validate and serialize response data in short way",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16272676,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9deba01e6c0d33f8c0a3505bb844de47",
                    "sha256": "25bfad22f808f05503805fd2410ea8fd07862d6c61f4d2c87cbb098868562445"
                },
                "downloads": -1,
                "filename": "drf_http_serialization-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9deba01e6c0d33f8c0a3505bb844de47",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 9242,
                "upload_time": "2023-01-01T15:07:16",
                "upload_time_iso_8601": "2023-01-01T15:07:16.531379Z",
                "url": "https://files.pythonhosted.org/packages/d0/9e/0903622a322f247c0e4170e67cef193655ae3a7f5def85f97ce41fb07391/drf_http_serialization-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f0e3a16021325f428ddfead537fa39c6",
                    "sha256": "f10804fb4bd7c5e38d39ce567a5c4b7b6485e43e2f9c611467623cdc3e4890fc"
                },
                "downloads": -1,
                "filename": "drf-http-serialization-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "f0e3a16021325f428ddfead537fa39c6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 10500,
                "upload_time": "2023-01-01T15:07:18",
                "upload_time_iso_8601": "2023-01-01T15:07:18.417137Z",
                "url": "https://files.pythonhosted.org/packages/fc/c6/50c631204b5fc1a9b6ea7678f1d286144805a5210fa852cf5abb8d0c976f/drf-http-serialization-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
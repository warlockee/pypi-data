{
    "1.0.0.dev0": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.0.0.dev0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.0.0.dev0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e287543ff5127adfcad98d0c816ee3f4",
                    "sha256": "e180c4f69643086b419dfc89608220964ce91559fd926752d5698934d8149a21"
                },
                "downloads": -1,
                "filename": "dj-drf-utils-1.0.0.dev0.tar.gz",
                "has_sig": false,
                "md5_digest": "e287543ff5127adfcad98d0c816ee3f4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 8410,
                "upload_time": "2022-08-18T14:51:20",
                "upload_time_iso_8601": "2022-08-18T14:51:20.172331Z",
                "url": "https://files.pythonhosted.org/packages/98/2d/ec0c2ae4230c5530524545a797d53f24b7f4d1fe427304c4d7b9254012aa/dj-drf-utils-1.0.0.dev0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1.dev0": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.0.1.dev0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.0.1.dev0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c63737de15f90d9b53ce28f8ab3d0ef3",
                    "sha256": "e4a7cb7f049b1e04d9fda117e850cdb817e1d17a87e9ff3cfab9cbbbb4bb333a"
                },
                "downloads": -1,
                "filename": "dj-drf-utils-1.0.1.dev0.tar.gz",
                "has_sig": false,
                "md5_digest": "c63737de15f90d9b53ce28f8ab3d0ef3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 8426,
                "upload_time": "2022-08-18T15:11:24",
                "upload_time_iso_8601": "2022-08-18T15:11:24.851772Z",
                "url": "https://files.pythonhosted.org/packages/a3/12/8b63ac2784cf95cc8c3c442b232296176f40824e85933a53b5300ebf3325/dj-drf-utils-1.0.1.dev0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.2.dev0": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.0.2.dev0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.0.2.dev0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bb8187b938842e4eaeda389edd09229b",
                    "sha256": "fa10a3382fe592ae85e4fb414b1260ab52e88aca7f894578b9c218f44e5057aa"
                },
                "downloads": -1,
                "filename": "dj-drf-utils-1.0.2.dev0.tar.gz",
                "has_sig": false,
                "md5_digest": "bb8187b938842e4eaeda389edd09229b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 14819,
                "upload_time": "2022-08-18T15:13:45",
                "upload_time_iso_8601": "2022-08-18T15:13:45.187994Z",
                "url": "https://files.pythonhosted.org/packages/cf/cc/554137f92e929d80370f6c7a2d3ef8f0aef02e98a5ae49981d2947dd003a/dj-drf-utils-1.0.2.dev0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.3.dev0": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.0.3.dev0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.0.3.dev0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "72d2977d339eff5517273e2fb3c2da9d",
                    "sha256": "ac23b0dc58f485af2b05821b32d28719be787529e35c98a05db01a99b96085e4"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.0.3.dev0.tar.gz",
                "has_sig": false,
                "md5_digest": "72d2977d339eff5517273e2fb3c2da9d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 14816,
                "upload_time": "2022-08-18T15:20:15",
                "upload_time_iso_8601": "2022-08-18T15:20:15.725208Z",
                "url": "https://files.pythonhosted.org/packages/54/03/64e32f3206e4ea6a3413e6360fe4ca0894da10b4d7453e815d24fd5c5798/dj_drf_utils-1.0.3.dev0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.4": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.0.4/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "291b640c1e12b9af2eaf6466069048c3",
                    "sha256": "19c2e50af3e8476d773a0e9e4b1d15fcfdedd06e91682681fc3a2792d43eb50b"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "291b640c1e12b9af2eaf6466069048c3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 14799,
                "upload_time": "2022-08-18T17:25:43",
                "upload_time_iso_8601": "2022-08-18T17:25:43.902244Z",
                "url": "https://files.pythonhosted.org/packages/7a/a5/de192a18028f0f727992194712e420cf636ef634755e21897d30d784add4/dj_drf_utils-1.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.4.dev0": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.0.4.dev0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.0.4.dev0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b056844c74f97b7a672f8b1327e79d34",
                    "sha256": "e658e7c3b7bfd1798a32524a02fde021c164ea8e337bb7dc0e7759620a06e904"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.0.4.dev0.tar.gz",
                "has_sig": false,
                "md5_digest": "b056844c74f97b7a672f8b1327e79d34",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 14835,
                "upload_time": "2022-08-18T15:55:35",
                "upload_time_iso_8601": "2022-08-18T15:55:35.296914Z",
                "url": "https://files.pythonhosted.org/packages/5b/5b/1786680f95fd75d8b2cde323a22d6d58cd60875b84406b8629fffec6bf80/dj_drf_utils-1.0.4.dev0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.5": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple rest framework dj drf",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.0.5/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f5ff7c60d69f7668adcded5b3ed30583",
                    "sha256": "3ebf8ccf13e0fe577688f69306a270945124958d764d4007c388a1cde39ce336"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "f5ff7c60d69f7668adcded5b3ed30583",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 14828,
                "upload_time": "2022-08-18T17:27:58",
                "upload_time_iso_8601": "2022-08-18T17:27:58.915155Z",
                "url": "https://files.pythonhosted.org/packages/67/c7/ee147bc45bb1eec868a9652bef77a3bdd00ff264f5349fc2572247374208/dj_drf_utils-1.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.0": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple rest framework dj drf",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "409aa4e8f98f8789f5050d3ce4d2d7bf",
                    "sha256": "db7ab3ca9fe1c851b0031e7bbb4339caedf691705ab3a872419085459df48444"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "409aa4e8f98f8789f5050d3ce4d2d7bf",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 12974,
                "upload_time": "2022-08-19T17:28:51",
                "upload_time_iso_8601": "2022-08-19T17:28:51.658212Z",
                "url": "https://files.pythonhosted.org/packages/15/81/74381817915bde398f2717dccb563df2bcc1d1bc35151b7e570dcb22f395/dj_drf_utils-1.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.1": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple rest framework dj drf",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "336ad6570ef60a9d29db45db4573d4c3",
                    "sha256": "18b7468a1bbb08a11c9e0e04caa477e916b6c8f6d9d27339386146e82cef0206"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "336ad6570ef60a9d29db45db4573d4c3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 12966,
                "upload_time": "2022-08-19T17:31:44",
                "upload_time_iso_8601": "2022-08-19T17:31:44.075401Z",
                "url": "https://files.pythonhosted.org/packages/b9/94/ded5a55da236b2349fed80c7654db6cee91d16c84925515abeec084f26d0/dj_drf_utils-1.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.2": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple rest framework dj drf",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.1.2/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "84562891d964effadf581221692390ab",
                    "sha256": "001bb41516e22833bd71bbe5abefe2d232dafa32889253594877f02640a54b80"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "84562891d964effadf581221692390ab",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 12850,
                "upload_time": "2022-08-19T17:32:56",
                "upload_time_iso_8601": "2022-08-19T17:32:56.469119Z",
                "url": "https://files.pythonhosted.org/packages/17/40/30fba036f2af5ed103dca924574362c318b67b5d9a5c33602a27cd1aad01/dj_drf_utils-1.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.3": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple rest framework dj drf",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.1.3/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9cd23efdc41d86045c1fc55f11ded332",
                    "sha256": "57a4191539620db31cb3f271ed1bd0c8dc76853027caf41602c289dcdd8eb81c"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "9cd23efdc41d86045c1fc55f11ded332",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 12870,
                "upload_time": "2022-08-24T18:04:13",
                "upload_time_iso_8601": "2022-08-24T18:04:13.137134Z",
                "url": "https://files.pythonhosted.org/packages/50/1b/ca9d26de7a67ee7c48d72f57771381a565f4f60dc8aade93e77465c29dd5/dj_drf_utils-1.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.4": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple rest framework dj drf",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.1.4/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5fbb30a6801a572afd6bb855f147bebc",
                    "sha256": "fc96d84eab79e9684ab089ef4112476c0a1dc5db5c1111b1999e31015518751d"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "5fbb30a6801a572afd6bb855f147bebc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 15481,
                "upload_time": "2022-08-26T15:09:59",
                "upload_time_iso_8601": "2022-08-26T15:09:59.376187Z",
                "url": "https://files.pythonhosted.org/packages/bf/5f/4737e2838697831c6d15abcb2eb99a0127bba2adc5a1a8b98958b181deb2/dj_drf_utils-1.1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.2.0": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login model manager custom action shortcut error simple rest framework dj drf admin hash password user",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.2.0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "715d692f1f00350b426a6780f98067cd",
                    "sha256": "d18d2ae072b455d005dd6126b4f90b1c7724c168089ed6b150cbab934c8736e2"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "715d692f1f00350b426a6780f98067cd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 18856,
                "upload_time": "2022-09-18T22:24:17",
                "upload_time_iso_8601": "2022-09-18T22:24:17.176186Z",
                "url": "https://files.pythonhosted.org/packages/74/e6/c171562eb3f23a9347e337bb416e2053f945660a3cf78ba9e91ab60c5f3c/dj_drf_utils-1.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.3.0": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login modelmanager custom action shortcut error simple rest framework dj drf adminhash password user filter queryset",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.3.0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "05069caf8979ab205ea19e67105b4972",
                    "sha256": "57196b114f899ff7d5b472cd4e8458cdbeec1f291168db1507f7d033dbe95acf"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "05069caf8979ab205ea19e67105b4972",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 23408,
                "upload_time": "2022-12-23T17:26:48",
                "upload_time_iso_8601": "2022-12-23T17:26:48.569657Z",
                "url": "https://files.pythonhosted.org/packages/42/83/0f03f7faa62c739bdb9b13cebad21935f1ecf82b378849c265ce8988d4f8/dj_drf_utils-1.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.3.1": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login modelmanager custom action shortcut error simple rest framework dj drf adminhash password user filter queryset",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.3.1/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.3.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3e6d1bac481e5b637c7f4b89095c4783",
                    "sha256": "9758a5d037e35a7cc5f0d4ee1b8e5e92e6232232554fdb6db9a2270027519baf"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.3.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3e6d1bac481e5b637c7f4b89095c4783",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 23840,
                "upload_time": "2022-12-23T17:48:49",
                "upload_time_iso_8601": "2022-12-23T17:48:49.601999Z",
                "url": "https://files.pythonhosted.org/packages/8b/26/d11a8f932d02491b3e8a099b1e513a7e82fec71637b0893378d76e7c78b5/dj_drf_utils-1.3.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.3.2": {
        "info": {
            "author": "Cayo Rodrigues",
            "author_email": "cayo.rodrigues1914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# dj-drf-utils\n\nThis package provides useful functions and classes to be used in [Django](https://www.djangoproject.com/) projects, specially when working with [Django Rest Framework](https://www.django-rest-framework.org/). Below are some further explation about how to use this package and what each module inside it does.\n\nThe examples on this documentation are about movies and cinemas, having entities like `Movie`, `Cinema`, `Room`, and `MovieSession`.\n\n- [Installation](#installation)\n- [helpers.py](#helperspy)\n  - [get\\_object\\_or\\_error](#get_object_or_error)\n  - [get\\_list\\_or\\_error](#get_list_or_error)\n  - [set\\_and\\_destroy](#set_and_destroy)\n  - [bulk\\_get\\_or\\_create](#bulk_get_or_create)\n- [mixins.py](#mixinspy)\n  - [SerializerByMethodMixin](#serializerbymethodmixin)\n  - [SerializerByActionMixin](#serializerbyactionmixin)\n  - [SerializerByDetailActionsMixin](#serializerbydetailactionsmixin)\n  - [SerializerBySafeActionsMixin](#serializerbysafeactionsmixin)\n  - [FilterQuerysetMixin](#filterquerysetmixin)\n- [managers.py](#managerspy)\n  - [CustomUserManager](#customusermanager)\n- [action\\_patterns.py](#action_patternspy)\n- [admin.py](#adminpy)\n  - [CustomUserAdmin](#customuseradmin)\n\n## Installation\n\nFirst, run:\n\n```bash\npip install dj-drf-utils\n```\n\nThat's it!\n\n---\n\n## helpers.py\n\nThis module provides three useful functions. Two of them are a more powerful and versatille version of `get_object_or_404` and `get_list_or_404`, and the other is a handy shortcut.\n\n### get_object_or_error\n\nAlmost the same as `django.shortcuts.get_object_or_404`, but can raise any\ncustom error class you want, allowing you to return more precise error messages.\nAnother advantage of using this helper function, is that it prevents your application\nfrom crashing. For instance, in case you want to get an object by it's primary key, and\nit is of type `uuid`, but another data type is provided in the url, it will not crash,\nunlike the standard `get_object_or_404`. It expects the following arguments:\n\n- `klass` -> The model that will be used for the query\n- `exception` -> An error class inheriting from `rest_framework.exceptions.APIException`.\nIf no `exception` is provided, then the standard `django.http.Http404` class is used.\n- `**kwargs` -> Keyword arguments representing all fields that should be used for the\nsearch, as many as you please.\n\nFor instance, in case you want to get a `Room` of a `Cinema`:\n\n```python\n# exceptions.py\n\nfrom rest_framework.exceptions import APIException, status\n\n\nclass CinemaNotFoundError(APIException):\n    status_code = status.HTTP_404_NOT_FOUND\n    default_detail = \"Cinema not found\"\n\n\nclass RoomNotFoundError(APIException):\n    status_code = status.HTTP_404_NOT_FOUND\n    default_detail = \"Room not found in this cinema\"\n```\n\n```python\n# request endpoint\n\n\"/cinemas/<cinema_id>/rooms/<room_id>/\"\n```\n\n```python\n# views.py\n\nfrom dj_drf_utils.helpers import get_object_or_error\n\n\ncinema = get_object_or_error(Cinema, CinemaNotFoundError, pk=self.kwargs['cinema_id'])\nroom = get_object_or_error(Room, RoomNotFoundError, pk=self.kwargs['room_id'], cinema=cinema)\n```\n\nNote that in case a room id is valid, but the cinema id is not, an appropriated message will be\nreturned. In case you would use `get_object_or_404`, you would get just a `\"Not found.\"`. Having\nmore than one lookup field, `get_object_or_error` makes much clearer what is the problem.\n\nI highly encorage you to have a quick look at the source code, it's quite a simple concept.\n\n##\n\n### get_list_or_error\n\nAlmost the same as `django.shortcuts.get_list_or_404`, but can raise any\ncustom error class you want, allowing you to return more precise error messages.\nAnother advantage of using this helper function, is that it prevents your application\nfrom crashing. For instance, in case you want to get a list, filtering it by some foreign\nkey field, which is of type `uuid`, but another data type is provided in the url, it will\nnot crash, unlike the standard `get_list_or_404`. Also, this function gives you the possiblity\nof not raising an exception when no values are found, so you could just return an empty list.\nIt expects the following arguments:\n\n- `klass` -> The model that will be used for the query\n- `exception` -> An error class inheriting from `rest_framework.exceptions.APIException`.\nIf no `exception` is provided, then the standard `django.http.Http404` class is used.\n- `accept_empty` -> A boolean argument, which defaults to `False`. When provided, determines\nif an empty result is acceptable or if it should raise `exception`.\n- `**kwargs` -> Keyword arguments representing all fields that should be used for the\nsearch, as many as you please.\n\nFor instance, in case you want to list all `MovieSession`s of a `Room` in a `Cinema`:\n\n```python\n# exceptions.py\n\nfrom rest_framework.exceptions import APIException, status\n\n\nclass NoMovieSessionsError(APIException):\n    status_code = status.HTTP_404_NOT_FOUND\n    default_detail = \"This room has no scheduled movie sessions\"\n```\n\n```python\n# request endpoint\n\n\"/cinemas/<cinema_id>/rooms/<room_id>/movie-sessions/\"\n```\n\n```python\n# views.py\n\nfrom dj_drf_utils.helpers import get_object_or_error, get_list_or_error\n\n\ncinema = get_object_or_error(Cinema, CinemaNotFoundError, pk=self.kwargs['cinema_id'])\nroom = get_object_or_error(Room, RoomNotFoundError, pk=self.kwargs['room_id'], cinema=cinema)\nmovie_sessions = get_list_or_error(MovieSession, NoMovieSessionsError, room=room)\n```\n\nI highly encorage you to have a quick look at the source code, it's quite a simple concept.\n\n##\n\n### set_and_destroy\n\nThis function basically sets a new list of values in a foreign key field and erases any\nprevious values that were related to `klass`. For it to work, **you must set `null=True`\nin your model**, otherwise, the values will not be subsitituted, they will only be added.\nIt accepts the following parameters:\n\n- `klass` -> The model on the side `1` of a `1:N` relationship, the owner of the relation,\nin which the new values will be set\n- `attr` -> A string version of the attribute corresponding to the `related_name` value\nin the foreign key field\n- `value` -> A list (or any other iterable), containing new created instances of `related_klass`\n- `related_klass` -> The model on the side `N` of a `1:N` relationship, the one having the foreign\nkey field\n- `**kwargs` -> Keyword arguments used in a filter to determine which objects should be destroyed.\nIt could be really anything, but usually you will want it to be something like `klass=None`, so\nthat all objects that are no part of the relationship anymore can be descarded.\n\nFor instance, a `Movie` may have many `Video`s related to it, like teasers and trailers. In case\nyou want to update a `Movie`, reseting its `Video`s:\n\n```python\n# models.py\n\nclass Movie(models.Model):\n    ...\n\n\nclass Video(models.Model):\n    id = models.UUIDField(primary_key=True, editable=False, default=uuid4)\n    title = models.CharField(max_length=127)\n    url = models.URLField()\n\n    movie = models.ForeignKey(Movie, on_delete=models.CASCADE, related_name=\"videos\", null=True)\n```\n\n```python\n# serializers.py\n\nfrom dj_drf_utils.helpers import set_and_destroy\n\n\nclass MovieSerializer(serializers.ModelSerializer):\n    ...\n\n    def update(self, instance: Movie, validated_data: dict):\n      ...\n\n      videos_data = validated_data.pop(\"videos\", None)\n      if videos_data:\n          videos = [\n            Video.get_or_create(**video, movie=instance)[0]\n            for video in videos_data\n          ]\n          set_and_destroy(\n              klass=instance,\n              attr=\"videos\",\n              value=videos,\n              related_klass=Video,\n              movie=None,\n          )\n```\n\nIn the example above, we are first getting or creating video instances, in order to reuse the ones\npassed in the body of the request that may already be in our db. Each video can only be related to\none movie, since it doesn't make sense that two movies have the same trailer or teaser. So when\nassigning this new list of videos to a movie, the `set_and_destroy` function safely deletes all\nvideos having their `movie` foreign key equal to `None`.\n\nI highly encorage you to have a quick look at the source code, it's quite a simple concept.\n\n##\n\n### bulk_get_or_create\n\nDespite the name of this function, it does not translate into a single database hit,\nunfortunatelly. But it is still better than a loop executing `Model.objects.get_or_create`\nin every iteration.\n\nThat's because this function **combines filters and the bulk_create method**.\nDjango querysets are lazy, but in this function they are evaluated on every iteration.\nHowever, in the end **only one** `INSERT` query is performed.\n\n---\n\n#### Important!\nDjango's `Model.objects.bulk_create` method returns a list of newly created instances **without ids**\nwhen working with _SQLite_. Please, make sure to use _PostgreSQL_ to avoid problems.\n\n---\n\nIt expects the following parameters:\n\n- `klass` -> The model whose values will be retrieved or created\n- `values` -> A list of dictionaries having key value pairs demanded by `klass`\n- `only_create` -> A boolean value. Defaults to `False`. In case you don't care about getting\nexisting values, and just wants to create them, then you can set this arguments to `True`. It\nwill result in just one database hit.\n- `kwargs` -> Key value pairs with extra fields you want to use for filtering/creating instances\nof `klass`. It can be useful for foreign key fields\n\nUsage example:\n\n```python\n# serializers.py\n\nfrom dj_drf_utils.helpers import bulk_get_or_create, set_and_destroy\n\n\nclass MovieSerializer(serializers.ModelSerializer):\n    # ...\n\n    def create(self, validated_data: dict) -> Movie:\n        # ...\n\n        videos_data = validated_data.pop(\"videos\")\n\n        # ...\n\n        bulk_get_or_create(Video, videos_data, movie=movie)\n\n        # ...\n\n    def update(self, instance: Movie, validated_data: dict) -> Movie:\n        # ...\n\n        videos = validated_data.pop(\"videos\", None)\n\n        # ...\n\n        if videos:\n            set_and_destroy(\n                klass=instance,\n                attr=\"videos\",\n                value=bulk_get_or_create(Video, videos, movie=instance),\n                related_klass=Video,\n                movie=None,\n            )\n\n        # ...\n```\n\nNote that in the `update` method, we are combining `set_and_destroy` with `bulk_get_or_create`.\nThat's totally a thing.\n\nI highly encourage you to have a look at the source code, so that you can better understand what's\nhappening under the hood. It's not complicated.\n\n---\n\n## mixins.py\n\nThis module provides useful mixins to be used in Django Rest Framework **generic views** and **viewsets**.\n\n### SerializerByMethodMixin\n\nThis mixin overrides the `get_serializer_class` method of generic views. It's\npurpose is to dinamically define which serializer to use, depending on the request\nmethod. For this to be possible, a new class property should be set, it is:\n\n- `method_serializers` -> It should be a dictionary having it's keys with the names\nof http methods and values as the serializer classes corresponding to each method.\nIf the request method does not match any of the dict keys, it will return the value\nof `self.serializer_class`.\n\nBelow is an example:\n\n```python\n# views.py\n\nfrom dj_drf_utils.mixins import SerializerByMethodMixin\n\n\nclass MyBeautifulGenericView(SerializerByMethodMixin, ListCreateAPIView):\n    queryset = MyWonderfulModel.objects.all()\n    serializer_class = MyDefaultSerializer\n    method_serializers = {\n        \"GET\": MySerialzerToUseInGetRequests,\n    }\n```\n\n##\n\n### SerializerByActionMixin\n\nThis mixin overrides the `get_serializer_class` method of viewsets. It's\npurpose is to dinamically define which serializer to use, depending on the viewset\naction. For this to be possible, a new class property should be set, it is:\n\n- `action_serializers` -> It should be a dictionary having it's keys with the names\nof viewset actions and values as the serializer classes corresponding to each action.\nIf the viewset action does not match any of the dict keys, it will return the value\nof `self.serializer_class`.\n\nBelow is an example:\n\n```python\n# views.py\n\nfrom dj_drf_utils.mixins import SerializerByActionMixin\n\n\nclass MyBeautifulViewSet(SerializerByActionMixin, ModelViewSet):\n    queryset = MyWonderfulModel.objects.all()\n    serializer_class = MyDefaultSerializer\n    action_serializers = {\n        \"create\": MySerializerToUseInCreateActions,\n        \"update\": MySerialzerToUseInUpdateActions,\n        \"partial_update\": MySerialzerToUseInPartialUpdateActions,\n    }\n```\n\n##\n\n### SerializerByDetailActionsMixin\n\nThis mixin overrides the `get_serializer_class` method of viewsets. It's\npurpose is to dinamically define which serializer to use, depending on the viewset\naction. If it is a detail action, that is, one of `retrieve`, `update`, `partial_update`\nand `destroy`, then `self.detail_serializer_class` will be returned. Else, the default\n`self.serializer_class` is used. For this to be possible, a new class property should\nbe set, it is:\n\n- `detail_serializer_class` -> It's value should be a serializer class. This property defines\nwhich serializer to use in detail actions.\n\nBelow is an example:\n\n```python\n# views.py\n\nfrom dj_drf_utils.mixins import SerializerByDetailActionsMixin\n\n\nclass MyBeautifulViewSet(SerializerByDetailActionsMixin, ModelViewSet):\n    queryset = MyWonderfulModel.objects.all()\n    serializer_class = MyDefaultSerializer\n    detail_serializer_class = MyDetailSerializer\n```\n\n##\n\n### SerializerBySafeActionsMixin\n\nThis mixin overrides the `get_serializer_class` method of viewsets. It's\npurpose is to dinamically define which serializer to use, depending on the viewset\naction. If it is a _safe action_, then `self.safe_serializer_class` will be returned.\nElse, the default `self.serializer_class` is returned. A safe action is an action\nlisted in the `safe_actions` class property. For this to be possible, a new class\nproperty should be set, it is:\n\n- `safe_serializer_class` -> Its value should be a serializer class. This property defines\nwhich serializer to use in safe actions.\n\nYou can totally customize what is a \"safe action\". For that, you could change the value\nof `self.safe_actions`.\n\n- `safe_actions` -> It should be a `list[str]`, which each item representing a viewset action,\nconsidered safe for that viewset. The default value is `[\"list\", \"retrieve\"]`\n\nBelow is an example:\n\n```python\n# views.py\n\nfrom dj_drf_utils.mixins import SerializerBySafeActionsMixin\n\n\nclass MyBeautifulViewSet(SerializerBySafeActionsMixin, ModelViewSet):\n    queryset = MyWonderfulModel.objects.all()\n    serializer_class = MyDefaultSerializer\n    safe_serializer_class = MySafeSerializer\n```\n\n##\n\n### FilterQuerysetMixin\n\nThis mixin overrides the `get_queryset` method of class based views. It's main goal is\nto make it easier and simpler to filter and/or narrow down results. You may use it to\nattach results to the logged in user, to filter the queryset by route params (or `kwargs`)\nand by query params.\n\nThese are the class properties that this mixin accepts:\n\n- `user_key` -> A `str` representing which keyword argument should be used for filtering by\nuser. The default is `None`, meaning that the queryset will not be filtered by the logged in user, that\nis, `self.request.user`. If in your queryset there is a `FK` pointing to your project's auth user model, then this property should\nhave the same name as this `FK` field.\n- `filter_kwargs` -> A `dict[str, str]`, where the **key** represents the name of the **field** to be searched,\nand the **value** is the **url param**.\n- `filter_query_params` -> A `dict[str, str]`, where the **key** is the name of the **field** to be searched,\nand the **value** represents the **query param** received in the request.\n- `exception_klass` -> Should be an `exception` inheriting from `rest_framework.exceptions.APIException`. The\ndefault value is `django.http.Http404`. In case no value is returned or another kind of error occurs, this\nexception will be raised.\n- `accept_empty` -> A `bool`, which defaults to `True`. If `False`, then the `exception_klass` will be raised\nin case the results are empty. Otherwise, an empty value will be returned normaly.\n\nBelow is an example of how this might be useful:\n\n```python\n\n# request endpoint\n\n\"/categories/<category_id>/transactions/\"\n\n```\n\n```python\n\n# views.py\n\nfrom dj_drf_utils.mixins import FilterQuerysetMixin\n\nclass TransactionView(FilterQuerysetMixin, ListCreateAPIView):\n    serializer_class = TransactionSerializer\n    permission_classes = [IsAuthenticated]\n    user_key = \"user\"\n    filter_kwargs = {\"category\": \"category_id\"}\n    filter_query_params = {\n        \"month_id\": \"month_id\",\n        \"month__number\": \"month_number\",\n        \"month__name__icontains\": \"month_name\",\n        \"month__year\": \"year\",\n        \"description__icontains\": \"description\",\n        \"value\": \"value\",\n        \"value__gte\": \"value_gte\",\n        \"value__lte\": \"value_lte\",\n        \"is_income\": \"is_income\",\n        \"is_recurrent\": \"is_recurrent\",\n        \"installments\": \"installments\",\n    }\n\n```\n\nIn the example above, we are defining a view for monetary transactions. We don't want\nusers to see other user's transactions, so we attach all transactions to the logged in\nuser. By using the `user_key` class property, we tell the mixin that when filtering the\nqueryset, it should use `user=self.request.user`.\n\nAlso, all transactions have categories. And we want them always to be listed by category.\nSo in the url, we receive the `<category_id>` param. So that's why we declare `filter_kwargs`\nin that way.\n\nAs for the `filter_query_params` property, please note how interesting it is. In the keys of\nthe dictionary, we pass in the keys that will be used for filtering the queryset, just as if\nwe were filtering the queryset manually. None of these query params are mandatory.\n\nWe are not declaring `accept_empty`, which means that we will not raise `exception_klass` in any\ncase. So that's why we don't need to define `exception_klass` too.\n\nYou may have noticed that the `queryset` class property haven't been defined. That's not a\nproblem, because this mixin guesses what is the apropriated model by accessing `self.serializer_class.Meta.model`.\nSo as long as you define you model in that way, everything is OK.\n\n---\n\n## managers.py\n\nThis module provides a custom user manager as a shortcut for whoever wants to customize\ndjango's authentication system to use a different field instead of username for login.\nIt can be really anything, like email, phone, cpf, etc.\n\n### CustomUserManager\n\nA custom user manager that inherits from `django.contrib.auth.models.BaseUserManager`.\nIts purpouse in life is mainly to provide an easy and simple way to implement a login\nand register system that expects another field instead of `username`.\n\nBut what if you desired to customize your users in a way that other info is also required\nfor user creation? No problem, this class is highly customizable.\n\nInstead of having to override the `create` and `create_superuser` methods of `BaseUserManager`,\nyou can inherit from `CustomUserManager` and then simply set some class properties at your will.\nThey work as follows:\n\n- `auth_field_name` -> Defaults to `\"email\"`. Defines what is the name of the field that\nshould be used for login (besides password, of course). Note that this field **must**\nexist in your user model, **having a unique constraint**.\n- `user_is_staff` -> Defaults to `False`. Defines the starting staff status of newly\ncreated users\n- `user_start_active` -> Defaults to `True`. Defines if a user account should start in\nactive state. In cases where users have to confirm their account in some way before getting\naccess, you may wish to set this property to `False`\n- `super_is_staff` -> Defaults to `True`. Defines the starting staff status of newly\ncreated superusers\n- `super_start_active` -> Defaults to `True`. Defines if a superuser account should start in\nactive state. Usually you'll want this value to be `True`, but you're totally free to change\nit, depending on your needs.\n- `required_fields` -> Defaults to `[]`. It should be a `list[str]`. This property defines\nwhich fields are required to be provided upon user creation, besides `self.auth_field_name` and\n`password`. The fields `is_staff`, `is_superuser` and `is_active` should also not be present in\nthis list. It is worth noting that **all fields defined here, must also be defined in your user model**.\nOtherwise, a `ValidationError` is raised.\n\nBelow is an example of how you may customize the behaviour of this class:\n\n```python\n# managers.py\n\nfrom dj_drf_utils.managers import CustomUserManager\n\n\nclass MyOwnUserManager(CustomUserManager):\n    user_start_active = False\n    required_fields = [\"first_name\", \"last_name\"]\n```\n\nIn order to implement a login with email feature, for instance, you have to make some minor\nchanges to your user model. Below are some settings that may come in handy for you to define\nin your model:\n\n```python\n# models.py\n\nfrom .managers import MyOwnUserManager\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n\n\nclass MyUser(AbstractUser):\n    email = models.EmailField(unique=True)\n\n    username = None\n\n    objects = MyOwnUserManager()\n\n    USERNAME_FIELD = objects.auth_field_name\n    REQUIRED_FIELDS = objects.required_fields\n```\n\nThe `email` property is defined as unique, since it's gonna be used for login (as per the `USERNAME_FIELD`\nproperty). The `objects` property may be either the standard `dj_drf_utils.managers.CustomUserManager`\nor your own manager that inherits from it. In the example above, we are using our own user manager,\nwith some minor customizations. `REQUIRED_FIELDS` refer to the fields you are prompted when creating a\nsuperuser (it must not include the value defined for `USERNAME_FIELD` or `\"password\"`). Defining it to\n`objects.required_fields` prevents you from making mistakes and being redundant. Note that in the example\nabove we are droping the `username` column, but that's not necessary if you still want to have a username\nin your user model.\n\n---\n\n## action_patterns.py\n\nViewsets have the advantage of abstracting away the work of defining routes explicitly,\nbut routers have some limits. They can only go to a certain depth in producing urls.\n\nFor instance, let's imagine a simple application, where you have Bands and Albums.\nIn case you wish to list all Albums of a Band, you could make a request to an enpoint\nlike `/bands/<band_id>/albums/`. That's totally possible with routers. But what if you\nwant a detail route for an Album of a Band? A route like `/bands/<band_id>/albums/<album_id>/`\nwould make sense, right? But routers aren't able to go to such an extent. And you could\ntotally imagine bigger urls in real, bigger applications.\n\nSo defining our routes manually gives us a lot more control. Everything comes with a tradeoff\nthough. When manually defining routes for generic views, you can easily assign each view class\nto their routes, using the `as_view` method. But viewsets are different. One viewset class can\nbe assigned to more than one route. So for that to work, you've gotta do something like [this](https://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/#binding-viewsets-to-urls-explicitly).\n\nIn order to simplify things, and abstract away some boiler plate code, this module provides the\nstandard viewset actions mapped to their corresponding http method. Of course, you may have additional\nactions, customized according to your own needs. In this case, you can config them on your own. But\nthe standard ones are all set here.\n\nUsage example:\n\n```python\n# urls.py\n\nfrom django.urls import path\nfrom dj_drf_utils.action_patterns import STANDARD_DETAIL_PATTERN, STANDARD_PATTERN\n\nfrom . import views\n\n\ncinema_view = views.CinemaViewSet.as_view(STANDARD_PATTERN)\ncinema_detail_view = views.CinemaViewSet.as_view(STANDARD_DETAIL_PATTERN)\n\nurlpatterns = [\n    path(\"\", cinema_view),\n    path(\"<cinema_id>/\", cinema_detail_view),\n]\n```\n\nBut routers are still so cool and so simple to use. So a very good alternative is [drf-nested-routers](https://github.com/alanjds/drf-nested-routers).\nIt really makes it easier to deal with all of this. The `drf-nested-routers` library is designed to\nsolve exactly this problem, and even more.\n\n---\n\n## admin.py\n\nThis module provides a `CustomUserAdmin` class. It inherits from `django.contrib.auth.admin.UserAdmin`.\nHave you ever created a custom user model, added it to admin and then realized that your users passwords\nwere being created unhashed? Then you searched the internet and found out that django provides a `UserAdmin`\nclass that does the job. But what if you customized your authentication system, and you're using another\nfield instead of `username`? In this case, it throws an error, saying that there is no `username` field.\n\nIn order to make things easier, this module provides a class that abstracts away all the boring \nconfigurations you would need to do.\n\n### CustomUserAdmin\n\nThis class inherits from `django.contrib.auth.admin.UserAdmin`. It's purpose in life is to abstract\naway some boring configurations you may need, when you're using a custom user model. The advantage is\nto have the same features that Django standard `UserAdmin` class provides, but in a custom user model,\nhaving a field other than `username` used for authentication.\n\nThis class automaticaly figures out what is your user model, as long as it is pointed to by `AUTH_USER_MODEL`\nsetting in `settings.py`. Also, it takes the care of first checking for the fields you set in your user\nmodel before referencing them. But the **password field is mandatory**.\n\nBelow is an usage example:\n\n```python\n# admin.py\n\nfrom dj_drf_utils.admin import CustomUserAdmin\nfrom .models import User\n\nadmin.site.register(User, CustomUserAdmin)\n```\n\nIn case you want to customize some kind of behaviour, you totally can, either by overwriting the properties\nentirely (by inheriting this class), or by using one of the class methods defined in this class. For instance,\nif you added some columns that are not default of auth user model, but still want them to appear in the admin,\nyou could do something like this:\n\n```python\n\n# admin.py\n\nfrom dj_drf_utils.admin import CustomUserAdmin\nfrom .models import User\n\nfields = (\"cpf\", \"phone\")\n\n# add fields to the user creation form\nCustomUserAdmin.add_creation_fields(fields)\n# append fields to list_display\nCustomUserAdmin.add_list_display(fields)\n# add fields to personal info screen\nCustomUserAdmin.add_personal_info(fields)\n\nadmin.site.register(User, CustomUserAdmin)\n```\n\nNot so bad.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cayo-rodrigues/django-utils",
            "keywords": "django utils serializers generic views viewsets mixins email login modelmanager custom action shortcut error simple rest framework dj drf adminhash password user filter queryset",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dj-drf-utils",
            "package_url": "https://pypi.org/project/dj-drf-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/dj-drf-utils/",
            "project_urls": {
                "Homepage": "https://github.com/cayo-rodrigues/django-utils"
            },
            "release_url": "https://pypi.org/project/dj-drf-utils/1.3.2/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Useful functions and classes for Django and Django Rest Framework",
            "version": "1.3.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16199405,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fe077ab7e649290d65cc716b0e33135c",
                    "sha256": "182ce84ff880bb7e659b9caed84c093d5ec07701b92d7bc0173b3a6dd2a9b13f"
                },
                "downloads": -1,
                "filename": "dj_drf_utils-1.3.2.tar.gz",
                "has_sig": false,
                "md5_digest": "fe077ab7e649290d65cc716b0e33135c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 23799,
                "upload_time": "2022-12-23T17:58:31",
                "upload_time_iso_8601": "2022-12-23T17:58:31.723680Z",
                "url": "https://files.pythonhosted.org/packages/8d/65/b92d7072f80ffcc0f84f87e998caad468ef0bbce7641701d085c4051665e/dj_drf_utils-1.3.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
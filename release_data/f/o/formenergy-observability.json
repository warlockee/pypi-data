{
    "0.1.0": {
        "info": {
            "author": null,
            "author_email": "Form Energy Software <software@formenergy.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Form Energy Observability Python Library\n\nOTel tracing and logging tools, emphasizing data pipeline use cases with Dagster.\n\n## Using the Library\n\n### [Install from PyPI](https://pypi.org/project/formenergy-observability/)\n\n`pip install formenergy-observability`\n\n### Features\n\nSee the [examples/](examples/) directory for examples you can run and screenshots of the traces they produce.\n\nSome key features demonstrated in the examples:\n\nContext-aware tracing, so that spans and events can inherit attributes from parents:\n\n```py\nfrom form_observability import ContextAwareTracer, ctx\n\n_trace = ContextAwareTracer(__name__)\n\nwith ctx.set({\"test_id\": my_test_id}):\n    # many intervening function calls and spans\n    _trace.add_event(\"my_event\")  # automatically has the test_id attribute set on it\n```\n\nTrace context propagation for Dagster ops:\n\n```py\nfrom form_observability.dagster_otel import otel_op, publish_current_trace_context\nfrom form_observability import ContextAwareTracer\n\n_trace = ContextAwareTracer(__name__)\n\n@op\ndef root_trace_context_op(context):\n    with _trace.start_as_current_span(\"root\"):\n        # writes the trace context (as an asset materialization event) for later ops\n        publish_current_trace_context(context)\n\n@otel_op()  # picks up the trace context and starts a new span for this op\ndef my_op(context):\n    _trace.add_event(\"my_event\")\n\n@graph\ndef my_graph()\n    # In the graph, publish a root trace using a regular op, and then subsequent\n    # @otel_op ops will pick it up and contribute to the same trace.\n    setup_done = root_trace_context_op()\n    my_op(start=setup_done)\n```\n\n### Running the Examples\n\nGet an API key for uploading traces to your observability service (preferably in a development environment), set it in your environment, and run the examples. This should publish traces that you can then view.\n\n```bash\nexport OTEL_EXPORTER_OTLP_HEADERS=\"x-honeycomb-team=<API key>\"\nexport OTEL_EXPORTER_OTLP_ENDPOINT=\"your observability service, defaults to Honeycomb\"\npython examples/basics.py\ndagster job execute --python-file examples/dagster_job.py\n```\n\n## License\n\nThis library is provided under the MIT license, see [LICENSE.txt](LICENSE.txt).\n\n## Release Notes\n\n*   0.1.0 Initial external release, including `ContextAwareTracer`, `ctx`, and `@otel_op`.\n\n## Development\n\nIf you contribute, please ensure you and your employer accept [the license](LICENSE.txt) for any of your contributions.\n\n### Setup\n\nCreate and activate a virtual environment with your favorite tool, such as [direnv](https://github.com/direnv/direnv/wiki/Python). This project requires Python 3.8.\n\n```bash\npip install flit\nflit install --deps all --symlink [--python /path/to/venv/python]\n```\n\nBy default, `flit` installs into the current virtual environment. Using the `--python` argument can let you install into a specific venv other than the currently active one. For example you can activate some other venv, run `which python`, and then pass the output of that command to `flit`'s `--python` argument when installing from the `form-observability` repo.\n\nInitialize pre-commit hooks:\n\n```bash\npre-commit install --hook-type pre-commit --hook-type pre-push\n```\n\n### Running Tests\n\nFrom the project root directory:\n\n```bash\npytest\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": null,
            "keywords": null,
            "license": null,
            "maintainer": null,
            "maintainer_email": null,
            "name": "formenergy-observability",
            "package_url": "https://pypi.org/project/formenergy-observability/",
            "platform": null,
            "project_url": "https://pypi.org/project/formenergy-observability/",
            "project_urls": {
                "Home": "https://github.com/Form-Energy/formenergy-observability"
            },
            "release_url": "https://pypi.org/project/formenergy-observability/0.1.0/",
            "requires_dist": [
                "dagster>=1.1.6,<2",
                "opentelemetry-api>=1.15.0,<2",
                "opentelemetry-sdk>=1.15.0,<2",
                "opentelemetry-exporter-otlp-proto-grpc>=1.15.0,<2",
                "opentelemetry-instrumentation-requests>=0.36b0,<1",
                "opentelemetry-instrumentation-sqlalchemy>=0.36b0,<1",
                "pytest~=6.1.2 ; extra == \"test\"",
                "pytest-html~=2.1.1 ; extra == \"test\"",
                "pre-commit==2.15.0 ; extra == \"test\""
            ],
            "requires_python": ">=3.8",
            "summary": "OTel tracing/logging tools, emphasizing data pipeline use cases with Dagster.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16305479,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "blake2b_256": "63e4030e9dc57a3b3688f7b73a367deb5960a6a2d5b1fed3db3cd699af2ac771",
                    "md5": "efa68124ce15205e74b29c06a438ef89",
                    "sha256": "589eab89283655d2408a6b24f8b898b307fb5a95ce6163fb3c9bca50ded8edb3"
                },
                "downloads": -1,
                "filename": "formenergy_observability-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "efa68124ce15205e74b29c06a438ef89",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 20210,
                "upload_time": "2023-01-04T18:53:27",
                "upload_time_iso_8601": "2023-01-04T18:53:27.025657Z",
                "url": "https://files.pythonhosted.org/packages/63/e4/030e9dc57a3b3688f7b73a367deb5960a6a2d5b1fed3db3cd699af2ac771/formenergy_observability-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "blake2b_256": "d7e675498d90656c1cac2f95161fdb6b719b02abf4bf140ea4b3cf600705916f",
                    "md5": "825ba657c7704ee91b8ff7c68d5683d2",
                    "sha256": "d2d11d70a09bb57176c99099974ff99ffeb92b534b07ba919016c37535c58830"
                },
                "downloads": -1,
                "filename": "formenergy-observability-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "825ba657c7704ee91b8ff7c68d5683d2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 303158,
                "upload_time": "2023-01-04T18:53:29",
                "upload_time_iso_8601": "2023-01-04T18:53:29.106067Z",
                "url": "https://files.pythonhosted.org/packages/d7/e6/75498d90656c1cac2f95161fdb6b719b02abf4bf140ea4b3cf600705916f/formenergy-observability-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
{
    "1.0.1": {
        "info": {
            "author": "Douwe van der Meij",
            "author_email": "douwe@karibu-online.nl",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/douwevandermeij/fractal-roles",
            "keywords": null,
            "license": null,
            "maintainer": null,
            "maintainer_email": null,
            "name": "fractal-roles",
            "package_url": "https://pypi.org/project/fractal-roles/",
            "platform": null,
            "project_url": "https://pypi.org/project/fractal-roles/",
            "project_urls": {
                "Homepage": "https://github.com/douwevandermeij/fractal-roles"
            },
            "release_url": "https://pypi.org/project/fractal-roles/1.0.1/",
            "requires_dist": [
                "fractal_specifications",
                "black ; extra == \"test\"",
                "flake8 ; extra == \"test\"",
                "isort ; extra == \"test\""
            ],
            "requires_python": ">=3.8",
            "summary": "Fractal Roles provides a flexible way to define fine-grained roles & permissions for users of your Python applications.",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16259135,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "7d6f11544d7e7241f365fec1f442d690",
                    "sha256": "757c694e47a1e9efb2bc4751da4be678c6e77fb6785a2a2fff7d14c4a6e475c7"
                },
                "downloads": -1,
                "filename": "fractal_roles-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7d6f11544d7e7241f365fec1f442d690",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 4205,
                "upload_time": "2022-12-30T13:50:59",
                "upload_time_iso_8601": "2022-12-30T13:50:59.206814Z",
                "url": "https://files.pythonhosted.org/packages/30/4a/0e52dfc7b9a2de7df5ff4c04b6d8eae5973385456f03f43da564d5569803/fractal_roles-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "7a429de0102f823a9a59da222119dd5a",
                    "sha256": "ea0cd28b91a8f018103666e3e29b88d555c54cd3583362c0b99eb91c4b189626"
                },
                "downloads": -1,
                "filename": "fractal-roles-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "7a429de0102f823a9a59da222119dd5a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 8417,
                "upload_time": "2022-12-30T13:51:01",
                "upload_time_iso_8601": "2022-12-30T13:51:01.024337Z",
                "url": "https://files.pythonhosted.org/packages/8b/dd/a6baf89e50aa48465440986b5d155a23ce7adcf53d2beb4d55c20843e13d/fractal-roles-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.2": {
        "info": {
            "author": "Douwe van der Meij",
            "author_email": "douwe@karibu-online.nl",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Fractal Roles\n\n> Fractal Roles provides a flexible way to define fine-grained roles & permissions for users of your Python applications.\n\n[![PyPI Version][pypi-image]][pypi-url]\n[![Build Status][build-image]][build-url]\n[![Code Coverage][coverage-image]][coverage-url]\n[![Code Quality][quality-image]][quality-url]\n\n<!-- Badges -->\n\n[pypi-image]: https://img.shields.io/pypi/v/fractal-roles\n[pypi-url]: https://pypi.org/project/fractal-roles/\n[build-image]: https://github.com/douwevandermeij/fractal-roles/actions/workflows/build.yml/badge.svg\n[build-url]: https://github.com/douwevandermeij/fractal-roles/actions/workflows/build.yml\n[coverage-image]: https://codecov.io/gh/douwevandermeij/fractal-roles/branch/main/graph/badge.svg?token=Jv2ShlaVf8\n[coverage-url]: https://codecov.io/gh/douwevandermeij/fractal-roles\n[quality-image]: https://api.codeclimate.com/v1/badges/754713b64573aa47571d/maintainability\n[quality-url]: https://codeclimate.com/github/douwevandermeij/fractal-roles\n\n## Installation\n\n```sh\npip install fractal-roles\n```\n\n## Development\n\nSetup the development environment by running:\n\n```sh\nmake deps\n```\n\nHappy coding.\n\nOccasionally you can run:\n\n```sh\nmake lint\n```\n\nThis is not explicitly necessary because the git hook does the same thing.\n\n**Do not disable the git hooks upon commit!**\n\n\n## Usage\n\nTo be able to use Fractal Roles you first need to define which roles are available in your application.\\\nLet's say you have an **Admin** user and a regular **User**. You can then create the following roles in your application:\n\n```python\nfrom fractal_roles.models import Role\n\n\nclass Admin(Role):\n    ...\n\n\nclass User(Role):\n    ...\n```\n\nFor now, we skip permissions, we'll get back to it later.\n\nNext you can create a RolesService to install the roles.\n\n```python\nfrom fractal_roles.services import BaseRolesService\n\n\nclass RolesService(BaseRolesService):\n    def __init__(self):\n        self.roles = [Admin(), User()]\n```\n\nLast but not least we need to define a dataclass for the user's (authentication token) payload:\n\n```python\nfrom dataclasses import dataclass\n\nfrom fractal_roles.models import TokenPayloadRolesMixin\n\n\n@dataclass\nclass TokenPayloadRoles(TokenPayloadRolesMixin):\n    sub: str = \"\"  # JWT's standard claim for the subject of the token (for example, the user id)\n    account: str = \"\"  # a custom claim, in this case, to point to the account where the user belongs to\n```\n\n**The application in which this RolesService will be used, needs to provide the payload everytime a user tries to access a so-called endpoint.**\\\nWhen building an API application, the request should contain a header with the authentication token, which usually is in the form of JWT,\nand should contain the user's assigned role(s).\n\n### Verifying a user's payload\n\nExample payload:\n\n```json\n{\n  \"roles\": [\"user\"],\n  \"sub\": \"12345\",\n  \"account\": \"67890\"\n}\n```\n\nThe json above should be loaded into a TokenPayloadRoles object. From now on, when we refer to `payload` we mean such an object.\n\nWhen a user tries to access an endpoint, before it actually executes, the application should **verify** the `payload`.\nSuppose the user tries to **get** the endpoint **get_data**, then the verification can be done as follows:\n\n```python\nroles_service = RolesService()\npayload = roles_service.verify(payload, \"get_data\", \"get\")  # Note that it returns a payload as well\n```\n\nIf the code didn't raise a `NotAllowedException`, then the `payload` is now enriched with a [specification](https://github.com/douwevandermeij/fractal-specifications).\nYou can use that specification to filter the data that can be accessed by **get_data** to return back to the user.\n\nFor example:\n\n```python\ndata = [...]\nreturn list(filter(payload.specification.is_satisfied_by, data))\n```\n\nWhen using a real database and, for example, Django to manage it, you can convert the specification into a Django ORM query easily.\nTo do so please check out the [specification documentation](https://github.com/douwevandermeij/fractal-specifications).\n\nA quick example:\n```python\nfrom fractal_specifications.contrib.django.specifications import DjangoOrmSpecificationBuilder\n\n\nq = DjangoOrmSpecificationBuilder.build(payload.specification)\nreturn Data.objects.filter(q)\n```\n\nWe will now dive deeper into permissions, but the way to verify a user's payload stays the same.\n\n### Fine-grained permissions\n\nIn the example above we defined the roles **Admin** and **User** and we didn't set any permissions.\nBy default, any method (get, post, put, delete) on any endpoint will get an empty specification which is always\nevaluates to `True` so no data will be filtered.\n\nTo change this, we need to define more specific permissions. Let's say both **Admin** and **User** roles may only **get**\ntheir own data, by `account_id`, and on top of that the **User** may only **get** its own created data by `created_by`.\nWe will also only limit this to the **get_data** function, which in our case is the only external available endpoint.\n\n```python\nfrom fractal_roles.models import Method, Methods, Role\nfrom fractal_specifications.generic.operators import EqualsSpecification\nfrom fractal_specifications.generic.specification import Specification\n\n\ndef my_account(payload: TokenPayloadRoles) -> Specification:\n    return EqualsSpecification(\n        \"account_id\", payload.account\n    )\n\n\ndef my_data(payload: TokenPayloadRoles) -> Specification:\n    return my_account(payload) & EqualsSpecification(\n        \"created_by\", payload.sub\n    )\n\n\nclass Admin(Role):\n    get_data = Methods(get=Method(my_account), post=None, put=None, delete=None)\n\n\nclass User(Role):\n    get_data = Methods(get=Method(my_data), post=None, put=None, delete=None)\n```\n\nTo see this code in action, please check out the examples directory in this repository.\n\n### Multiple roles\n\nA user payload may also include multiple roles, for example:\n\n```json\n{\n  \"roles\": [\"user\", \"admin\"],\n  \"sub\": \"12345\",\n  \"account\": \"67890\"\n}\n```\n\nThe first matched Role, from the perspective of the RolesService, will be used for verification.\n\nIn our case, this will be **Admin**:\n\n```python\nclass RolesService(BaseRolesService):\n    def __init__(self):\n        self.roles = [Admin(), User()]  # Admin Role will first be checked against the payload\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/douwevandermeij/fractal-roles",
            "keywords": null,
            "license": null,
            "maintainer": null,
            "maintainer_email": null,
            "name": "fractal-roles",
            "package_url": "https://pypi.org/project/fractal-roles/",
            "platform": null,
            "project_url": "https://pypi.org/project/fractal-roles/",
            "project_urls": {
                "Homepage": "https://github.com/douwevandermeij/fractal-roles"
            },
            "release_url": "https://pypi.org/project/fractal-roles/1.0.2/",
            "requires_dist": [
                "fractal_specifications",
                "black ; extra == \"test\"",
                "flake8 ; extra == \"test\"",
                "isort ; extra == \"test\""
            ],
            "requires_python": ">=3.8",
            "summary": "Fractal Roles provides a flexible way to define fine-grained roles & permissions for users of your Python applications.",
            "version": "1.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16259135,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "f9d4df112f81b79a0619eab7d72ed59b",
                    "sha256": "7b69fcd7c3d1be7857d01d8aab668cf13e28d1a0c0d3caa14099510e41ae2b2d"
                },
                "downloads": -1,
                "filename": "fractal_roles-1.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f9d4df112f81b79a0619eab7d72ed59b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 5988,
                "upload_time": "2022-12-30T15:37:20",
                "upload_time_iso_8601": "2022-12-30T15:37:20.654594Z",
                "url": "https://files.pythonhosted.org/packages/b5/f3/b053aa7b1f6e225aa8ddd21e3cb90de6572a54a5b7e3f15412ca2a33c2af/fractal_roles-1.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "17c97d11cbb84588f81e0e5f127c8635",
                    "sha256": "c7be0a82423916827f285286362df051afef562df6998824f94db77c74472489"
                },
                "downloads": -1,
                "filename": "fractal-roles-1.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "17c97d11cbb84588f81e0e5f127c8635",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 11873,
                "upload_time": "2022-12-30T15:37:22",
                "upload_time_iso_8601": "2022-12-30T15:37:22.519935Z",
                "url": "https://files.pythonhosted.org/packages/8b/8c/cfb75839d9d1448e6562a6feadc56f5c148c00a1f9473ccc4a217c47045f/fractal-roles-1.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
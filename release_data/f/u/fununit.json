{
    "1.0.0": {
        "info": {
            "author": "John Post",
            "author_email": "muffinpost1@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: Freely Distributable",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Testing :: Unit"
            ],
            "description": "# fununit\n\n## Installation\n\nYou can install fununit from PyPI:\n\n`pip install fununit`\n\n## Description\n\n`fununit` (\"**fun**ctional **unit** testing\") is a functional, declarative, unit-testing library for testing pure functions in Python. It has the following characteristics:\n\n- functional\n  - fununit makes use of functional programming ideas such as higher-order functions and pure functions\n  - in fact, its core purpose is to test pure functions\n  - the fununit API exposes a selection of pure functions, allowing for great flexibility with their use\n- declarative\n  - fununit allows you to describe the tests you want to run in a declarative manner\n  - you get to expressively describe the tests that you want, not how they should be run\n- removes boilerplate testing code\n  - drastically reduces code duplication between tests, improving maintainability\n  - allows for writing very succinct code, making it faster and easier to write and read\n- framework-agnostic\n  - fununit is not coupled with any particular testing framework\n  - rather, it has adapters to translate fununit tests into any other format\n  - currently, there is an adapter for the built-in `unittest` module, which works great for fununit\n  - if you have specific requirements, feel free to write you own custom adapter\n\n## How to use\n\nfununit is a library to test pure functions. Take a look at `example.py` to see fununit being used. Because the API is very flexible, you can extend and build its simple functions into a custom flow if you want. But, here is the standard approach to writing tests with fununit:\n\n  - Create a `Suite` for testing a particular function. \n  - For each suite, specify a name for the suite, a name for the function being tested, and the function itself being tested.\n  - Also specify a list of `Cases`. Each case has a name, a list of parameters to pass to the function, and the expected return value.\n  - As shown in the example, `Suites` and `Cases` are created using constructor functions from their respective modules. You may choose to use keyword args instead of positional args to make your tests more explicit.\n\nA note about the fununit domain:\n\n  - `UnitTest` is the basic type. It contains everything needed to describe a single unit test in isolation, and nothing more.\n  - `TestCase` is a `UnitTest` that is partially built. It is missing some attributes. A `TestCase` on its own does not represent a standalone unit test. However, a group of them, paired with only one set of the missing attributes, is useful for describing several test cases without redundantly repeating the information about the function being tested.\n  - `TestSuite` is nothing but a group of `UnitTests` with a name. However, it has a constructor function that allows building one to test a particular function against a list of cases.\n\nThis is the fununit way of describing your unit tests. It allows you to dig way down deep into the core of what constitutes a unit test. You only specify what actually matters for each test, nothing more.\n\nFinally, to actually run your fununit-notated unit tests, use an adapter module. For example, the `adapters.unittest` has 2 useful functions. `build_suite` builds a fununit `TestSuite` into a `unittest.TestCase`. You can then use it how you would any other object of that type. `build_load_bundle_suites` takes a list of fununit `TestSuites`, builds them as above, then transforms them via `loading` and `bundling` into a `unittest.TestSuite`. It can then be run using any `TestRunner` provided by `unittest`. Every unit test / test case notated with fununit will be run as a separate unit test by `unittest`, so you will be able to immediately see particular cases in a suite, if any, that have failed.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/johnmpost/fununit",
            "keywords": "unit testing,testing,functional,declarative,pure functions,testing boilerplate",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "fununit",
            "package_url": "https://pypi.org/project/fununit/",
            "platform": null,
            "project_url": "https://pypi.org/project/fununit/",
            "project_urls": {
                "Homepage": "https://github.com/johnmpost/fununit"
            },
            "release_url": "https://pypi.org/project/fununit/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "a functional, declarative, unit-testing library for testing pure functions",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16233988,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3c502fb303221f702d43ba6fa9d17662",
                    "sha256": "ef3cdb6456689809d401405998f16a2c48d129528647ff00b81a39ebc77a2d09"
                },
                "downloads": -1,
                "filename": "fununit-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "3c502fb303221f702d43ba6fa9d17662",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 5121,
                "upload_time": "2022-12-28T02:16:10",
                "upload_time_iso_8601": "2022-12-28T02:16:10.177173Z",
                "url": "https://files.pythonhosted.org/packages/90/cb/c092c5ff87efdefa63e91d46cd9d795bf834ce03bb9def613eeab4583a6f/fununit-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9f082aa58e2eeff7a2a6b878144e91fb",
                    "sha256": "dc2491f9f75249a17fbd90eba312f0c13f0dcb5868812462a6b5fc9855753e32"
                },
                "downloads": -1,
                "filename": "fununit-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "9f082aa58e2eeff7a2a6b878144e91fb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 4337,
                "upload_time": "2022-12-28T02:16:11",
                "upload_time_iso_8601": "2022-12-28T02:16:11.855968Z",
                "url": "https://files.pythonhosted.org/packages/e9/e8/2227f1e93469578a637e2c5114b92236a0773fd6a7b813a13bfbdb9d6a78/fununit-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}
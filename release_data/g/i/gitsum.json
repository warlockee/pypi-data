{
    "1.0.0": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# gitsum\r\n[![Linux build badge](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/louis-hildebrand/cc9f4d1c6c0152b11b3eb2fe84fc0076/raw/gitsum-Linux.json)](https://github.com/louis-hildebrand/gitsum/actions/workflows/main.yml)\r\n[![macOS build badge](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/louis-hildebrand/cc9f4d1c6c0152b11b3eb2fe84fc0076/raw/gitsum-macOS.json)](https://github.com/louis-hildebrand/gitsum/actions/workflows/main.yml)\r\n[![Windows build badge](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/louis-hildebrand/cc9f4d1c6c0152b11b3eb2fe84fc0076/raw/gitsum-Windows.json)](https://github.com/louis-hildebrand/gitsum/actions/workflows/main.yml)\r\n[![Coverage badge](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/louis-hildebrand/cc9f4d1c6c0152b11b3eb2fe84fc0076/raw/gitsum-coverage.json)](https://github.com/louis-hildebrand/gitsum/actions/workflows/main.yml)\r\n\r\n`gitsum` is a command-line tool that provides a summary of multiple Git repositories.\r\n\r\n## Installation\r\nEnsure you have Python 3.8+ and pip installed. Then run\r\n```sh\r\npip install gitsum\r\n```\r\n\r\n## Basic Usage\r\nMove to a directory in which there are Git repositories and then run `gitsum`.\r\n\r\nThis will print out an overview of the status of each repository within the current directory (or its subdirectories). For example:\r\n```\r\nFound 7 Git repositories.\r\n!  deleted                        master        *  local repo\r\n!  modified                       (d02092)      *  local repo\r\n   remote/empty                   (no commits)     local branch\r\n!  remote/not empty/ahead behind  main             >1 <3\r\n!  remote/not empty/staged        feature       *\r\n!  unmerged                       main          *  local repo\r\n!  untracked                      (no commits)  *  local repo\r\n```\r\n\r\nThe standard output includes:\r\n- The flag `!` if there are local changes or if the current branch is ahead of or behind its upstream branch\r\n- The directory path (relative to the current working directory)\r\n- The current branch (or the current commit hash if the repo is in detached HEAD mode)\r\n- The flag `*` if there are local changes (e.g., untracked files, modified files, deleted files)\r\n- The remote status, which can be:\r\n    - `local repo` if the repository has no remotes\r\n    - `local branch` if the repository has at least one remote but the current branch has no upstream\r\n    - The number of commits ahead and behind the upstream branch (e.g., `>1 <3` say that the given repo is 1 commit ahead and 3 commits behind)\r\n\r\n## General Usage\r\n### Getting Help\r\nRun\r\n```sh\r\ngitsum --help\r\n```\r\n\r\n### Listing Files Outside Git Repos\r\nIn some cases you might want to know if there are files or directories which are not in a Git repository (e.g., to know if you forgot to make a Git repo for any of your local projects).\r\n\r\nTo see a list of files and directories that are not inside a Git repository (in addition to the normal output), run\r\n```sh\r\ngitsum --outside-files\r\n```\r\n\r\nTo see _only_ these outside files (without the normal output), run\r\n```sh\r\ngitsum --only-outside-files\r\n```\r\n\r\n### Fetching Beforehand\r\nTo fetch from each remote repository before displaying the repository statuses, run\r\n```sh\r\ngitsum --fetch\r\n```\r\n\r\nNote that this option is currently limited to public repositories. If `gitsum` is unable to fetch (e.g., because the repository is private), then a warning will simply be displayed. \r\n\r\n## Running the Tests\r\nBefore running the tests, clone the repository and install the test dependencies using `pip install -r test-requirements.txt`. You must also build the project with `python -m build` and then install the package with `pip install --find-links=dist gitsum`.\r\n\r\nThe tests can be run by issuing the command `pytest` (or `python -m unittest`, if you prefer). This must be done from the root of the repository.\r\n\r\n`gitsum` is verified by a few integration tests which create Git repos and check that the command's output is as expected. To avoid the `gitsum` repo itself interfering with the output, the repo is temporarily disabled by renaming the `.git/` folder to `.git.bak/`. This might not be possible if your IDE is using the `.git/` folder. If you get errors, you might need to disable your IDE's Git integration for this project. For example, in VS Code, you can add a file `.vscode/settings.json` in the root of the repo with the following contents:\r\n```json\r\n{\r\n    \"git.enabled\": false\r\n}\r\n```\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "git",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "gitsum",
            "package_url": "https://pypi.org/project/gitsum/",
            "platform": null,
            "project_url": "https://pypi.org/project/gitsum/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/gitsum/1.0.0/",
            "requires_dist": [
                "pygit2"
            ],
            "requires_python": ">=3.8",
            "summary": "Summarize the status of multiple Git repositories.",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16170248,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a13b2aef6c6d9847422cb862bba3ee98",
                    "sha256": "cd315be712784f1dc245bcd29587c9d61528b74879e514508f5c3d22d2d64e83"
                },
                "downloads": -1,
                "filename": "gitsum-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a13b2aef6c6d9847422cb862bba3ee98",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 7034,
                "upload_time": "2022-12-21T06:14:03",
                "upload_time_iso_8601": "2022-12-21T06:14:03.380731Z",
                "url": "https://files.pythonhosted.org/packages/96/d6/69eafff30bc31f19051e66f303a2b1a98a8faeb377eda381b0999f22f781/gitsum-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a695577f936cc546783d2beb33b48d7c",
                    "sha256": "521b6f49d188cdd06a03ed26ef97887ab57d74acaf79b9f07b398658ad6f50e0"
                },
                "downloads": -1,
                "filename": "gitsum-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "a695577f936cc546783d2beb33b48d7c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 7319,
                "upload_time": "2022-12-21T06:14:05",
                "upload_time_iso_8601": "2022-12-21T06:14:05.185556Z",
                "url": "https://files.pythonhosted.org/packages/2c/b3/ac0ec97bebf2e84c845224c9979ce18fade17af4bce908d5431727c8c314/gitsum-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}